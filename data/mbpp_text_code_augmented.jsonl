{"original_text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "original_code": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]", "transformed_text": "Find the minimum cost path from (0, 0) to (m, n).", "transformed_code": "R, C = 3, 3; min_cost = lambda cost, m, n: (tc := [[0]*C for _ in range(R)], tc[0][0] := cost[0][0], [tc[i][0] := tc[i-1][0] + cost[i][0] for i in range(1, m+1)], [tc[0][j] := tc[0][j-1] + cost[0][j] for j in range(1, n+1)], [tc[i][j] := min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] for i in range(1, m+1) for j in range(1, n+1)], tc[m][n])"}
{"original_text": "Write a function to find the similar elements from the given two tuple lists.", "original_code": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ", "transformed_text": "Find similar elements in two tuples.", "transformed_code": "similar_elements = lambda a, b: tuple(set(a) & set(b))"}
{"original_text": "Write a python function to identify non-prime numbers.", "original_code": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result", "transformed_text": "Create a function to find non-prime numbers.", "transformed_code": "is_not_prime = lambda n: any(n % i == 0 for i in range(2, int(math.sqrt(n)) + 1))"}
{"original_text": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "original_code": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums", "transformed_text": "Find largest integers from a list using heap queue.", "transformed_code": "import heapq as hq; heap_queue_largest = lambda nums, n: hq.nlargest(n, nums)"}
{"original_text": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "original_code": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] ", "transformed_text": "Find ways to fill a 3 x n board with dominoes.", "transformed_code": "count_ways = lambda n: (A := [0] * (n + 1), B := [0] * (n + 1), A[0], A[1], B[0], B[1], [(A[i := i+1] := A[i - 2] + 2 * B[i - 1], B[i] := A[i - 1] + B[i - 2]) for i in range(2, n + 1)], A[n])[-1]"}
{"original_text": "Write a python function to check whether the two numbers differ at one bit position only or not.", "original_code": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)", "transformed_text": "Check if two numbers differ by one bit.", "transformed_code": "is_Power_Of_Two = lambda x: x and not(x & (x - 1)); differ_At_One_Bit_Pos = lambda a, b: is_Power_Of_Two(a ^ b)"}
{"original_text": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "original_code": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "transformed_text": "Find words with 4 or more characters in a string using regex.", "transformed_code": "import re\nfind_char_long = lambda text: re.findall(r'\\b\\w{4,}\\b', text)"}
{"original_text": "Write a function to find squares of individual elements in a list using lambda function.", "original_code": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums", "transformed_text": "Find squares of elements in a list using lambda.", "transformed_code": "square_nums = list(map(lambda x: x ** 2, nums))"}
{"original_text": "Write a python function to find the minimum number of rotations required to get the same string.", "original_code": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n ", "transformed_text": "Find minimum rotations to achieve the same string.", "transformed_code": "find_rotations = lambda s: next((i for i in range(1, len(s)+1) if s == (s+s)[i:i+len(s)]), len(s))"}
{"original_text": "Write a function to get the n smallest items from a dataset.", "original_code": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest", "transformed_text": "Get n smallest items from a dataset.", "transformed_code": "import heapq; small_nnum = lambda lst, n: heapq.nsmallest(n, lst)"}
{"original_text": "Write a python function to remove first and last occurrence of a given character from the string.", "original_code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ", "transformed_text": "Remove first and last occurrence of a character in a string.", "transformed_code": "remove_Occ = lambda s, ch: (s:=s.replace(ch, '', 1)) and s[::-1].replace(ch, '', 1)[::-1]"}
{"original_text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "original_code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result", "transformed_text": "Sort a matrix by the sum of its rows.", "transformed_code": "sort_matrix = lambda M: sorted(M, key=sum)"}
{"original_text": "Write a function to count the most common words in a dictionary.", "original_code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n", "transformed_text": "Count the most common words in a list.", "transformed_code": "from collections import Counter; count_common = lambda words: Counter(words).most_common(4)"}
{"original_text": "Write a python function to find the volume of a triangular prism.", "original_code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ", "transformed_text": "Find the volume of a triangular prism.", "transformed_code": "find_volume = lambda l, b, h: (l * b * h) / 2"}
{"original_text": "Write a function to split a string at lowercase letters.", "original_code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))", "transformed_text": "Split a string at lowercase letters.", "transformed_code": "import re; split_lowerstring = lambda text: re.findall('[a-z][^a-z]*', text)"}
{"original_text": "Write a function to find sequences of lowercase letters joined with an underscore.", "original_code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "transformed_text": "Find sequences of lowercase letters separated by underscores.", "transformed_code": "import re; text_lowercase_underscore = lambda text: 'Found a match!' if re.search('^[a-z]+_[a-z]+$', text) else 'Not matched!'"}
{"original_text": "Write a function to find the perimeter of a square.", "original_code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "transformed_text": "Calculate the perimeter of a square.", "transformed_code": "square_perimeter = lambda a: 4 * a"}
{"original_text": "Write a function to remove characters from the first string which are present in the second string.", "original_code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ", "transformed_text": "Remove characters from one string that exist in another.", "transformed_code": "NO_OF_CHARS = 256; str_to_list = lambda s: list(s); lst_to_string = lambda l: ''.join(l); get_char_count_array = lambda s: [s.count(chr(i)) for i in range(NO_OF_CHARS)]; remove_dirty_chars = lambda s1, s2: lst_to_string([s1[i] for i in range(len(s1)) if get_char_count_array(s2)[ord(s1[i])] == 0])"}
{"original_text": "Write a function to find whether a given array of integers contains any duplicate element.", "original_code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ", "transformed_text": "Find duplicates in an array of integers.", "transformed_code": "test_duplicate = lambda arraynums: len(arraynums) != len(set(arraynums))"}
{"original_text": "Write a function to check if the given number is woodball or not.", "original_code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False", "transformed_text": "Create a function to determine if a number is woodball.", "transformed_code": "is_woodall = lambda x: False if x % 2 == 0 else True if x == 1 else (x := x + 1, p := 0, (p := p + 1) if (x := x / 2) % 2 == 0 and p == x else False)"}
{"original_text": "Write a function to find m number of multiples of n.", "original_code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)", "transformed_text": "Find m multiples of n.", "transformed_code": "multiples_of_num = lambda m, n: list(range(n, (m + 1) * n, n))"}
{"original_text": "Write a function to find the first duplicate element in a given array of integers.", "original_code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate", "transformed_text": "Find the first duplicate in an array of integers.", "transformed_code": "find_first_duplicate = lambda nums: next((x for x in nums if nums.count(x) > 1), -1)"}
{"original_text": "Write a python function to find the maximum sum of elements of list in a list of lists.", "original_code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ", "transformed_text": "Find the maximum sum in a list of lists.", "transformed_code": "maximum_sum = lambda lst: max(sum(x) for x in lst)"}
{"original_text": "Write a function to convert the given binary number to its decimal equivalent.", "original_code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)", "transformed_text": "Convert binary to decimal.", "transformed_code": "binary_to_decimal = lambda b: sum((b // (10**i) % 10) * (2**i) for i in range(len(str(b))))"}
{"original_text": "Write a python function to find the product of non-repeated elements in a given array.", "original_code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ", "transformed_text": "Find product of unique elements in an array.", "transformed_code": "find_Product = lambda arr: (prod := 1) or (prod := prod * arr[i] for i in range(len(arr)) if arr[i - 1] != arr[i]) and prod)"}
{"original_text": "Write a function to check if the given tuple list has all k elements.", "original_code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ", "transformed_text": "Check if all elements in the tuple list match k.", "transformed_code": "check_k_elements = lambda test_list, K: all(ele == K for tup in test_list for ele in tup)"}
{"original_text": "Write a python function to remove all digits from a list of strings.", "original_code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list", "transformed_text": "Remove digits from strings in a list.", "transformed_code": "import re; remove = lambda lst: [re.sub('[0-9]', '', i) for i in lst]"}
{"original_text": "Write a python function to find binomial co-efficient.", "original_code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ", "transformed_text": "Find binomial coefficient using a function.", "transformed_code": "binomial_Coeff = lambda n, k: 0 if k > n else 1 if k == 0 or k == n else binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"}
{"original_text": "Write a python function to find the element occurring odd number of times.", "original_code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1", "transformed_text": "Find the element that appears an odd number of times.", "transformed_code": "get_Odd_Occurrence = lambda arr: next((x for x in arr if arr.count(x) % 2 != 0), -1)"}
{"original_text": "Write a python function to count all the substrings starting and ending with same characters.", "original_code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ", "transformed_text": "Count substrings that start and end with the same character.", "transformed_code": "count_Substring_With_Equal_Ends = lambda s: sum(1 for i in range(len(s)) for j in range(1, len(s) - i + 1) if s[i] == s[i + j - 1])"}
{"original_text": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "original_code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result", "transformed_text": "Find top k frequent integers from sorted lists using a heap.", "transformed_code": "func = lambda nums, k: (lambda d: (lambda temp: (lambda result: [result.append(key) for _ in range(k) for v, key in sorted(temp, reverse=True)] and result)([heapq.heappop(temp) for _ in range(len(temp))]))(sorted(d.items(), key=lambda x: x[1])[:k]))(collections.Counter(i for row in nums for i in row))"}
{"original_text": "Write a python function to find the largest prime factor of a given number.", "original_code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)", "transformed_text": "Find the largest prime factor of a number.", "transformed_code": "import math; max_Prime_Factors = lambda n: (lambda f, n: [(f := i) if n % i == 0 else (n := n // i) for i in range(2, int(math.sqrt(n)) + 1) if n > 1])[-1] if n > 1 else -1)(0, n)"}
{"original_text": "Write a python function to convert a decimal number to binary number.", "original_code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ", "transformed_text": "Convert decimal to binary.", "transformed_code": "decimal_to_binary = lambda N: sum((N >> i) & 1 * 10**i for i in range(N.bit_length()))"}
{"original_text": "Write a python function to find the missing number in a sorted array.", "original_code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ", "transformed_text": "Find the missing number in a sorted array.", "transformed_code": "find_missing = lambda ar, N: (lambda l, r: (lambda f: f(f, l, r))(lambda f, l, r: (-1 if l > r else (mid := (l + r) // 2, (ar[mid] != mid + 1 and ar[mid - 1] == mid) and mid + 1 or (ar[mid] != mid + 1 and (r := mid - 1) is not None) or (l := mid + 1) or f(f, l, r))[1]))(0, N - 1))"}
{"original_text": "Write a function to find the n-th rectangular number.", "original_code": "def find_rect_num(n):\r\n  return n*(n + 1) ", "transformed_text": "Find the n-th rectangular number.", "transformed_code": "find_rect_num = lambda n: n*(n + 1)"}
{"original_text": "Write a python function to find the nth digit in the proper fraction of two given numbers.", "original_code": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ", "transformed_text": "Find nth digit in the fraction of two numbers.", "transformed_code": "find_nth_digit = lambda p, q, N: (lambda f: f(f, N))(lambda f, N: (p := p * 10) // q if N == 0 else f(f, N - 1)) if N >= 0 else None)"}
{"original_text": "Write a function to sort a given mixed list of integers and strings.", "original_code": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part", "transformed_text": "Sort a mixed list of integers and strings.", "transformed_code": "sort_mixed_list = lambda mixed_list: sorted(i for i in mixed_list if type(i) is int) + sorted(i for i in mixed_list if type(i) is str)"}
{"original_text": "Write a function to find the division of first even and odd number of a given list.", "original_code": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)", "transformed_text": "Find division of first even and odd numbers in a list.", "transformed_code": "div_even_odd = lambda lst: next((el for el in lst if el%2==0),-1) / next((el for el in lst if el%2!=0),-1)"}
{"original_text": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "original_code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")", "transformed_text": "Check if string letters can be rearranged with different adjacent characters.", "transformed_code": "import heapq; from collections import Counter; rearange_string = lambda S: (lambda ctr: (heap := [(-value, key) for key, value in ctr.items()], heapq.heapify(heap), \"\" if (-heap[0][0]) * 2 > len(S) + 1 else (ans := [], (lambda: ([(ans.extend([char1, char2]), heapq.heappush(heap, (nct1 + 1, char1)) if nct1 + 1 else None) for nct1, char1 in [heapq.heappop(heap), heapq.heappop(heap)]], ans))(lambda: True) and (\"\".join(ans) + (heap[0][1] if heap else \"\")))[-1]))[0](Counter(S)))(S)"}
{"original_text": "Write a function to find frequency of the elements in a given list of lists using collections module.", "original_code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result", "transformed_text": "Find element frequencies in a list of lists.", "transformed_code": "from collections import Counter; from itertools import chain; freq_element = lambda nums: Counter(chain.from_iterable(nums))"}
{"original_text": "Write a function to filter even numbers using lambda function.", "original_code": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums", "transformed_text": "Filter even numbers from a list using lambda.", "transformed_code": "list(filter(lambda x: x%2 == 0, nums))"}
{"original_text": "Write a python function to find the sum of repeated elements in a given array.", "original_code": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])", "transformed_text": "Find sum of repeated numbers in an array.", "transformed_code": "find_sum = lambda arr: sum(x for x in arr if arr.count(x) > 1)"}
{"original_text": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "original_code": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "transformed_text": "Find lowercase letter sequences joined by underscores.", "transformed_code": "import re; text_match = lambda text: 'Found a match!' if re.search('^[a-z]+_[a-z]+$', text) else 'Not matched!'"}
{"original_text": "Write a function that matches a word at the beginning of a string.", "original_code": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'", "transformed_text": "Find a word at the start of a string.", "transformed_code": "import re\ntext_match_string = lambda text: 'Found a match!' if re.search('^\\w+', text) else 'Not matched!'"}
{"original_text": "Write a function to find the gcd of the given array elements.", "original_code": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd", "transformed_text": "Find the gcd of array elements.", "transformed_code": "get_gcd = lambda l: (lambda f: (lambda gcd: (gcd := f(f, l[0], l[1]), (gcd := f(f, gcd, l[i]) for i in range(2, len(l))))[-1])(lambda f, x, y: x if not y else f(f, y, x % y)))(0))"}
{"original_text": "Write a python function to determine whether all the numbers are different from each other are not.", "original_code": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;", "transformed_text": "Check if all numbers in a list are unique.", "transformed_code": "test_distinct = lambda data: len(data) == len(set(data))"}
{"original_text": "Write a python function to find the last digit when factorial of a divides factorial of b.", "original_code": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10", "transformed_text": "Calculate last digit of factorial A divided by factorial B.", "transformed_code": "compute_Last_Digit = lambda A, B: (1 if A == B else 0 if B - A >= 5 else reduce(lambda v, i: (v * (i % 10)) % 10, range(A + 1, B + 1), 1) % 10)"}
{"original_text": "Write a python function to set all odd bits of a given number.", "original_code": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)", "transformed_text": "Create a function to set odd bits of a number.", "transformed_code": "odd_bit_set_number = lambda n: n | sum((1 << i) for i in range(0, n.bit_length(), 2))"}
{"original_text": "Write a function to extract every first or specified element from a given two-dimensional list.", "original_code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ", "transformed_text": "Extract specified elements from a 2D list.", "transformed_code": "specified_element = lambda nums, N: [i[N] for i in nums]"}
{"original_text": "Write a function to find the list with minimum length using lambda function.", "original_code": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)", "transformed_text": "Find the shortest list using a lambda function.", "transformed_code": "min_length_list = lambda input_list: (min(len(x) for x in input_list), min(input_list, key=lambda i: len(i)))"}
{"original_text": "Write a function to print check if the triangle is equilateral or not.", "original_code": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False", "transformed_text": "Check if a triangle is equilateral.", "transformed_code": "check_equilateral = lambda x, y, z: x == y == z"}
{"original_text": "Write a function to caluclate area of a parallelogram.", "original_code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area", "transformed_text": "Calculate area of a parallelogram.", "transformed_code": "parallelogram_area = lambda b, h: b * h"}
{"original_text": "Write a python function to check whether the first and last characters of a given string are equal or not.", "original_code": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ", "transformed_text": "Check if first and last characters of a string are the same.", "transformed_code": "check_Equality = lambda str: \"Equal\" if str[0] == str[-1] else \"Not Equal\""}
{"original_text": "Write a function to sort the given array by using counting sort.", "original_code": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list", "transformed_text": "Sort the array using counting sort.", "transformed_code": "counting_sort = lambda my_list: (lambda max_value: (buckets := [0] * (max_value + 1), [buckets.__setitem__(i, buckets[i] + 1) for i in my_list], [my_list.__setitem__(i, j) for j in range(max_value + 1) for a in range(buckets[j]) if (i := 0) is not None] ))(max(my_list))(my_list)"}
{"original_text": "Write a function to find t-nth term of geometric series.", "original_code": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn", "transformed_text": "Find the t-nth term of a geometric series.", "transformed_code": "tn_gp = lambda a, n, r: a * (r ** (n - 1))"}
{"original_text": "Write a python function to check if a given number is one less than twice its reverse.", "original_code": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ", "transformed_text": "Create a function to check if a number equals one less than twice its reverse.", "transformed_code": "rev = lambda num: int(str(num)[::-1]); check = lambda n: 2 * rev(n) == n + 1"}
{"original_text": "Write a python function to find the largest number that can be formed with the given digits.", "original_code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ", "transformed_text": "Find the largest number from the given digits.", "transformed_code": "find_Max_Num = lambda arr: int(''.join(sorted(map(str, arr), reverse=True)))"}
{"original_text": "Write a python function to check whether the given two integers have opposite sign or not.", "original_code": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ", "transformed_text": "Check if two integers have opposite signs.", "transformed_code": "opposite_Signs = lambda x, y: (x ^ y) < 0"}
{"original_text": "Write a function to find the nth octagonal number.", "original_code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ", "transformed_text": "Find the nth octagonal number", "transformed_code": "is_octagonal = lambda n: 3 * n * n - 2 * n"}
{"original_text": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "original_code": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max", "transformed_text": "Find maximum subsequence length with adjacent element difference.", "transformed_code": "max_len_sub = lambda arr, n: max([mls := [1] * n, [mls.__setitem__(i, mls[j] + 1) for j in range(i) if abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1] for i in range(n)], key=max)[0])"}
{"original_text": "Write a python function to count number of substrings with the sum of digits equal to their length.", "original_code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count", "transformed_text": "Count substrings with digit sum equal to length.", "transformed_code": "from collections import defaultdict; count, sum = 0, 0; mp = defaultdict(int); mp[0] += 1; [sum := sum + ord(s[i]) - ord('0'), count := count + mp[sum - (i + 1)], mp[sum - (i + 1)] += 1 for i in range(n)]; count"}
{"original_text": "Write a python function to find smallest number in a list.", "original_code": "def smallest_num(xs):\n  return min(xs)\n", "transformed_text": "Find the smallest number in a list.", "transformed_code": "smallest_num = lambda xs: min(xs)"}
{"original_text": "Write a function to find the maximum difference between available pairs in the given tuple list.", "original_code": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ", "transformed_text": "Find maximum difference in pairs from a tuple list.", "transformed_code": "max_difference = lambda test_list: max(abs(b - a) for a, b in test_list)"}
{"original_text": "Write a function to sort a list of tuples using lambda.", "original_code": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks", "transformed_text": "Sort a list of tuples by the second element.", "transformed_code": "sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])"}
{"original_text": "Write a function of recursion list sum.", "original_code": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total", "transformed_text": "Create a recursive function to sum list elements.", "transformed_code": "recursive_list_sum = lambda data_list: sum(recursive_list_sum(el) if isinstance(el, list) else el for el in data_list)"}
{"original_text": "Write a python function to count positive numbers in a list.", "original_code": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ", "transformed_text": "Count positive numbers in a list.", "transformed_code": "pos_count=lambda lst: sum(1 for num in lst if num >= 0)"}
{"original_text": "Write a function to find the number of ways to partition a set of bell numbers.", "original_code": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ", "transformed_text": "Find the ways to partition a set of bell numbers.", "transformed_code": "bell_number = lambda n: [[bell[i][0] if i == 0 else bell[i-1][i-1] + sum(bell[i][j-1] for j in range(i+1)) for j in range(n+1)] for i in range(n+1)][n][0]"}
{"original_text": "Write a python function to check whether the given array is monotonic or not.", "original_code": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "transformed_text": "Check if the array is monotonic.", "transformed_code": "is_Monotonic = lambda A: all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))"}
{"original_text": "Write a function to check whether a list contains the given sublist or not.", "original_code": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set", "transformed_text": "Check if a list contains a specified sublist.", "transformed_code": "is_sublist = lambda l, s: s == [] or s == l or len(s) > len(l) and False or any(l[i:i+len(s)] == s for i in range(len(l)))"}
{"original_text": "Write a function to find whether all the given tuples have equal length or not.", "original_code": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")", "transformed_text": "Check if all tuples have the same length.", "transformed_code": "find_equal_tuple = lambda Input, k: all(len(t) == k for t in Input); get_equal = lambda Input, k: 'All tuples have same length' if find_equal_tuple(Input, k) else 'All tuples do not have same length'"}
{"original_text": "Write a function to sort a list of elements using comb sort.", "original_code": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums", "transformed_text": "Sort a list using the comb sort algorithm.", "transformed_code": "comb_sort = lambda nums: (setattr(gaps, len(nums)), exec('swapped=True;\\nwhile gaps>1 or swapped:\\n gaps=int(gaps/shrink_fact); swapped=False; i=0;\\n while gaps+i<len(nums):\\n  swapped|=nums[i]>nums[i+gaps] and (nums.insert(i, nums.pop(i+gaps)), True)[1]; i+=1'), nums)[-1])"}
{"original_text": "Write a python function to check whether the given number can be represented as difference of two squares or not.", "original_code": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False", "transformed_text": "Check if a number can be the difference of two squares", "transformed_code": "dif_Square = lambda n: n % 4 != 2"}
{"original_text": "Write a function to split the given string with multiple delimiters by using regex.", "original_code": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))", "transformed_text": "Split a string using multiple delimiters with regex.", "transformed_code": "import re; multiple_split=lambda text: re.split('; |, |\\*|\\n', text)"}
{"original_text": "Write a function to check whether it follows the sequence given in the patterns array.", "original_code": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True", "transformed_text": "Check if colors match patterns in sequence.", "transformed_code": "is_samepatterns = lambda colors, patterns: (len(colors) == len(patterns)) and (len(set(patterns)) == len(set(colors))) and all((sd := {p: [] for p in patterns})[p].append(c) for p, c in zip(patterns, colors)) or all(all(v == values[0] for v in values) for values in sd.values())"}
{"original_text": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "original_code": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ", "transformed_text": "Find tuples where all elements are divisible by k.", "transformed_code": "find_tuples = lambda lst, k: [sub for sub in lst if all(ele % k == 0 for ele in sub)]"}
{"original_text": "Write a python function to count the number of squares in a rectangle.", "original_code": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))", "transformed_text": "Count squares in a rectangle.", "transformed_code": "count_squares = lambda m, n: (m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2) if (n := n if n >= m else (m := n, n)[0]) else 0"}
{"original_text": "Write a python function to find the difference between sum of even and odd digits.", "original_code": "def is_Diff(n): \r\n    return (n % 11 == 0) ", "transformed_text": "Find the difference between even and odd digit sums.", "transformed_code": "is_Diff = lambda n: n % 11 == 0"}
{"original_text": "Write a python function to find number of integers with odd number of set bits.", "original_code": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ", "transformed_text": "Find integers with an odd number of set bits.", "transformed_code": "count_With_Odd_SetBits=lambda n: (n+1)/2 if n%2!=0 else n//2 + (bin(n).count('1')%2)"}
{"original_text": "Write a python function to check whether the length of the word is odd or not.", "original_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False", "transformed_text": "Check if a word's length is odd.", "transformed_code": "word_len = lambda s: any(len(word) % 2 != 0 for word in s.split())"}
{"original_text": "Write a function to find the nth tetrahedral number.", "original_code": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6", "transformed_text": "Find the nth tetrahedral number.", "transformed_code": "tetrahedral_number = lambda n: (n * (n + 1) * (n + 2)) / 6"}
{"original_text": "Write a function to zip the two given tuples.", "original_code": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ", "transformed_text": "Create a function to combine two tuples.", "transformed_code": "zip_tuples = lambda t1, t2: [(j, t2[i % len(t2)]) for i, j in enumerate(t1)]"}
{"original_text": "Write a function to find the volume of a sphere.", "original_code": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume", "transformed_text": "Find the volume of a sphere using the radius.", "transformed_code": "volume_sphere = lambda r: (4/3)*math.pi*r**3"}
{"original_text": "Write a python function to find the character made by adding all the characters of the given string.", "original_code": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)", "transformed_text": "Find the character by adding all characters of the string.", "transformed_code": "get_Char = lambda strr: chr(ord('a') + (sum(ord(c) - ord('a') + 1 for c in strr) % 26) - 1) if sum(ord(c) - ord('a') + 1 for c in strr) % 26 != 0 else 'z'"}
{"original_text": "Write a function to find the n-th number in newman conway sequence.", "original_code": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "transformed_text": "Find the n-th number in the Newman Conway sequence.", "transformed_code": "sequence = lambda n: 1 if n in {1, 2} else sequence(sequence(n-1)) + sequence(n-sequence(n-1))"}
{"original_text": "Write a function to find the surface area of a sphere.", "original_code": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea", "transformed_text": "Calculate the surface area of a sphere.", "transformed_code": "surfacearea_sphere=lambda r: 4*math.pi*r*r"}
{"original_text": "Write a function to find nth centered hexagonal number.", "original_code": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1", "transformed_text": "Find the nth centered hexagonal number.", "transformed_code": "centered_hexagonal_number = lambda n: 3 * n * (n - 1) + 1"}
{"original_text": "Write a function to merge three dictionaries into a single expression.", "original_code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict", "transformed_text": "Merge three dictionaries into one.", "transformed_code": "merge_dictionaries_three = lambda d1, d2, d3: dict(collections.ChainMap({}, d1, d2, d3))"}
{"original_text": "Write a function to get the frequency of the elements in a list.", "original_code": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count", "transformed_text": "Get element frequency from a list.", "transformed_code": "from collections import Counter; freq_count = lambda list1: Counter(list1)"}
{"original_text": "Write a function to find the closest smaller number than n.", "original_code": "def closest_num(N):\r\n  return (N - 1)", "transformed_text": "Find the closest number smaller than n.", "transformed_code": "closest_num = lambda N: N - 1"}
{"original_text": "Write a python function to find the length of the longest word.", "original_code": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max", "transformed_text": "Find the longest word length.", "transformed_code": "len_log = lambda list1: max(len(i) for i in list1)"}
{"original_text": "Write a function to check if a substring is present in a given list of string values.", "original_code": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False", "transformed_text": "Check for substring in a list of strings.", "transformed_code": "find_substring = lambda str1, sub_str: any(sub_str in s for s in str1)"}
{"original_text": "Write a function to check whether the given number is undulating or not.", "original_code": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True", "transformed_text": "Create a function to check if a number undulates.", "transformed_code": "is_undulating = lambda n: len(n) > 2 and all(n[i - 2] == n[i] for i in range(2, len(n)))"}
{"original_text": "Write a function to calculate the value of 'a' to the power 'b'.", "original_code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)", "transformed_text": "Calculate a raised to the power of b.", "transformed_code": "power=lambda a,b:1 if b==0 else 0 if a==0 else a if b==1 else a*power(a,b-1)"}
{"original_text": "Write a function to extract the index minimum value record from the given tuples.", "original_code": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ", "transformed_text": "Find the index of the tuple with the minimum value.", "transformed_code": "from operator import itemgetter; index_minimum=lambda test_list: min(test_list, key=itemgetter(1))[0]"}
{"original_text": "Write a python function to find the minimum length of sublist.", "original_code": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ", "transformed_text": "Find minimum length of sublist.", "transformed_code": "Find_Min_Length = lambda lst: min(len(x) for x in lst)"}
{"original_text": "Write a python function to find the number of divisors of a given integer.", "original_code": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x", "transformed_text": "Find the number of divisors for an integer.", "transformed_code": "divisor = lambda n: sum(1 for i in range(1, n+1) if n % i == 0)"}
{"original_text": "Write a function to find frequency count of list of lists.", "original_code": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n", "transformed_text": "Count frequency of items in a list of lists.", "transformed_code": "frequency_lists = lambda list1: {num: list1.count(num) for sublist in list1 for num in sublist}"}
{"original_text": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "original_code": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ", "transformed_text": "Multiply all numbers in a list and divide by the list length.", "transformed_code": "multiply_num = lambda numbers: eval('*'.join(map(str, numbers))) / len(numbers)"}
{"original_text": "Write a function to convert the given decimal number to its binary equivalent.", "original_code": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ", "transformed_text": "Convert decimal number to binary.", "transformed_code": "decimal_to_binary = lambda n: bin(n).replace(\"0b\",\"\")"}
{"original_text": "Write a function to find the next smallest palindrome of a specified number.", "original_code": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i", "transformed_text": "Find the next smallest palindrome after a number.", "transformed_code": "next_smallest_palindrome = lambda num: next(i for i in range(num+1, sys.maxsize) if str(i) == str(i)[::-1])"}
{"original_text": "Write a function to find the kth element in the given array.", "original_code": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]", "transformed_text": "Find the kth element in the array.", "transformed_code": "kth_element = lambda arr, k: sorted(arr)[k-1]"}
{"original_text": "Write a function to convert snake case string to camel case string.", "original_code": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "transformed_text": "Convert snake case to camel case.", "transformed_code": "snake_to_camel = lambda word: ''.join(x.capitalize() or '_' for x in word.split('_'))"}
{"original_text": "Write a function to find eulerian number a(n, m).", "original_code": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "transformed_text": "Find eulerian number for given n and m.", "transformed_code": "eulerian_num = lambda n, m: 0 if m >= n or n == 0 else 1 if m == 0 else (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"original_text": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "original_code": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r", "transformed_text": "Sort each sublist of strings in a list.", "transformed_code": "sort_sublists = lambda input_list: [sorted(x) for x in input_list]"}
{"original_text": "Write a python function to count true booleans in the given list.", "original_code": "def count(lst):   \r\n    return sum(lst) ", "transformed_text": "Count true values in a list.", "transformed_code": "count = lambda lst: sum(lst)"}
{"original_text": "Write a function to add the given list to the given tuples.", "original_code": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ", "transformed_text": "Add a list to a tuple.", "transformed_code": "add_lists = lambda test_list, test_tup: tuple(list(test_tup) + test_list)"}
{"original_text": "Write a python function to count hexadecimal numbers for a given range.", "original_code": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ", "transformed_text": "Count hexadecimal numbers in a specified range.", "transformed_code": "count_Hexadecimal = lambda L, R: sum(1 for i in range(L, R + 1) if (10 <= i <= 15) or (i > 15 and any((k := i) //= 16 and k % 16 >= 10 for _ in iter(int, 1))))"}
{"original_text": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "original_code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)", "transformed_text": "Merge multiple sorted lists into one sorted list.", "transformed_code": "merge_sorted = lambda *args: list(heapq.merge(*(sorted(arg) for arg in args)))"}
{"original_text": "Write a python function to find the count of rotations of a binary string with odd value.", "original_code": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ", "transformed_text": "Find count of '1's in binary string.", "transformed_code": "odd_Equivalent = lambda s: sum(1 for char in s if char == '1')"}
{"original_text": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "original_code": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ", "transformed_text": "Extract missing ranges from a list within given start and end values.", "transformed_code": "extract_missing = lambda test_list, strt_val, stop_val: [(strt_val, sub[0]) for sub in test_list if sub[0] > strt_val]+[(strt_val, stop_val) for sub in test_list if strt_val < stop_val] or []"}
{"original_text": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "original_code": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result", "transformed_text": "Find common elements in nested lists.", "transformed_code": "common_in_nested_lists = lambda nl: list(set.intersection(*map(set, nl)))"}
{"original_text": "Write a python function to find the perimeter of a cylinder.", "original_code": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ", "transformed_text": "Find the perimeter of a cylinder.", "transformed_code": "perimeter = lambda diameter, height: 2 * (diameter + height)"}
{"original_text": "Write a function to check if a string represents an integer or not.", "original_code": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False", "transformed_text": "Check if a string is an integer", "transformed_code": "check_integer = lambda text: text.strip() and (text.isdigit() or (text[0] in '+-' and text[1:].isdigit()))"}
{"original_text": "Write a function to assign frequency to each tuple in the given tuple list.", "original_code": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ", "transformed_text": "Assign frequency to each tuple in a list.", "transformed_code": "assign_freq = lambda lst: str([(*k, v) for k, v in Counter(lst).items()])"}
{"original_text": "Write a function to check whether all dictionaries in a list are empty or not.", "original_code": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit", "transformed_text": "Check if all dictionaries in a list are empty.", "transformed_code": "empty_dict = lambda list1: all(not d for d in list1)"}
{"original_text": "Write a function to convert a given tuple of positive integers into an integer.", "original_code": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result", "transformed_text": "Convert tuple of integers to single integer.", "transformed_code": "tuple_to_int = lambda nums: int(''.join(map(str, nums)))"}
{"original_text": "Write a function to convert all possible convertible elements in the list to float.", "original_code": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ", "transformed_text": "Convert elements in the list to float.", "transformed_code": "list_to_float = lambda lst: [(float(ele) if not ele.isalpha() else ele for ele in tup)[:2] for tup in lst]"}
{"original_text": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "original_code": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst", "transformed_text": "Convert a string into a list of words.", "transformed_code": "string_to_list = lambda s: list(s.split())"}
{"original_text": "Write a python function to find the element that appears only once in a sorted array.", "original_code": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)", "transformed_text": "Find the unique element in a sorted array.", "transformed_code": "search = lambda arr: reduce(lambda x, y: x ^ y, arr)"}
{"original_text": "Write a function to find the maximum product from the pairs of tuples within a given list.", "original_code": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max", "transformed_text": "Find maximum product from tuples in a list.", "transformed_code": "max_product_tuple = lambda list1: max(abs(x * y) for x, y in list1)"}
{"original_text": "Write a function to find the triplet with sum of the given array", "original_code": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)", "transformed_text": "Find triplet in array with given sum", "transformed_code": "check_triplet = lambda A, n, s, c: c == 3 and s == 0 or c < 3 and n > 0 and (check_triplet(A, n - 1, s - A[n - 1], c + 1) or check_triplet(A, n - 1, s, c))"}
{"original_text": "Write a function to find n\u2019th smart number.", "original_code": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ", "transformed_text": "Find the nth smart number.", "transformed_code": "MAX=3000; smartNumber=lambda n:[j for i in range(2,MAX) for j in range(i*2,MAX,i) if (not[i]*0) or (result:=[j for j in range(2,MAX) if not primes[j]])][n-1]"}
{"original_text": "Write a function to sum all amicable numbers from 1 to a specified number.", "original_code": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)", "transformed_text": "Find the sum of all amicable numbers up to a limit.", "transformed_code": "amicable_numbers_sum = lambda limit: sum({num for num in range(2, limit+1) if (sum_fact := sum(fact for fact in range(1, num) if num % fact == 0)) != num and sum_fact2 := sum(fact for fact in range(1, sum_fact) if sum_fact % fact == 0) == num})"}
{"original_text": "Write a function to get the angle of a complex number.", "original_code": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle", "transformed_text": "Get the angle of a complex number.", "transformed_code": "import cmath; angle_complex=lambda a,b: cmath.phase(complex(a,b))"}
{"original_text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "original_code": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0", "transformed_text": "Find maximum difference between 0s and 1s in binary substring.", "transformed_code": "find_length = lambda s, n: max((sum((1 if s[i] == '0' else -1) for i in range(j, n)) for j in range(n)), 0)"}
{"original_text": "Write a python function to find the sum of common divisors of two given numbers.", "original_code": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum", "transformed_text": "Find the sum of common divisors for two numbers.", "transformed_code": "sum = lambda a,b: sum(i for i in range(1,min(a,b)) if a % i == 0 and b % i == 0)"}
{"original_text": "Write a function to multiply two integers without using the * operator in python.", "original_code": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)", "transformed_text": "Create a function to multiply two integers without the * operator.", "transformed_code": "multiply_int = lambda x, y: -multiply_int(x, -y) if y < 0 else 0 if y == 0 else x if y == 1 else x + multiply_int(x, y - 1)"}
{"original_text": "Write a function to shortlist words that are longer than n from a given list of words.", "original_code": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t", "transformed_text": "Shortlist words longer than n from a list.", "transformed_code": "long_words = lambda n, lst: [x for x in lst.split() if len(x) > n]"}
{"original_text": "Write a function to calculate magic square.", "original_code": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True", "transformed_text": "Create a function to verify a magic square.", "transformed_code": "magic_square_test=lambda m:len(set([sum(r)for r in m]+[sum(m[i][j]for i in range(len(m)))for j in range(len(m))]+[sum(m[i][i]for i in range(len(m)))]+[sum(m[i][len(m)-1-i]for i in range(len(m)))])])==1"}
{"original_text": "Write a function to find the item with maximum frequency in a given list.", "original_code": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result", "transformed_text": "Find the item with the highest frequency in a list.", "transformed_code": "from collections import defaultdict; max_occurrences = lambda nums: max((count := defaultdict(int)[i] += 1 for i in nums), key=lambda x: x[1])"}
{"original_text": "Write a python function to reverse only the vowels of a given string.", "original_code": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string", "transformed_text": "Reverse vowels in a string.", "transformed_code": "reverse_vowels = lambda s: ''.join(s[i] if s[i] not in 'aeiouAEIOU' else (v := [c for c in s if c in 'aeiouAEIOU'])[-1 - sum(s[:i] in 'aeiouAEIOU' for i in range(i)]) for i in range(len(s)))"}
{"original_text": "Write a function to convert tuple to a string.", "original_code": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str", "transformed_text": "Convert a tuple into a string.", "transformed_code": "tup_string = lambda tup1: ''.join(tup1)"}
{"original_text": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "original_code": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)", "transformed_text": "Calculate the sum of negative numbers in a list.", "transformed_code": "sum_negativenum = lambda nums: sum(filter(lambda x: x < 0, nums))"}
{"original_text": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.", "original_code": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ", "transformed_text": "Check if the last element of an array is even or odd after p operations.", "transformed_code": "check_last = lambda arr, n, p: \"EVEN\" if (sum(arr) % 2 == 0) ^ (p == 1) else \"ODD\""}
{"original_text": "Write a function to find the nth hexagonal number.", "original_code": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ", "transformed_text": "Get the nth hexagonal number.", "transformed_code": "hexagonal_num = lambda n: n*(2*n - 1)"}
{"original_text": "Write a function to calculate electricity bill.", "original_code": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total", "transformed_text": "Calculate electricity bill based on units used.", "transformed_code": "cal_electbill=lambda units:((units < 50) * (units * 2.60 + 25) + (units <= 100) * (130 + (units - 50) * 3.25 + 35) + (units <= 200) * (130 + 162.50 + (units - 100) * 5.26 + 45) + (units > 200) * (130 + 162.50 + 526 + (units - 200) * 8.45 + 75))"}
{"original_text": "Write a function to find the ration of zeroes in an array of integers.", "original_code": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "transformed_text": "Find the ratio of zeroes in a list of integers.", "transformed_code": "zero_count = lambda nums: round(sum(1 for x in nums if x == 0) / len(nums), 2)"}
{"original_text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "original_code": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True", "transformed_text": "Check if a number is a sum of non-zero powers of 2.", "transformed_code": "is_Sum_Of_Powers_Of_Two=lambda n: n % 2 == 0"}
{"original_text": "Write a function to find the circumference of a circle.", "original_code": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter", "transformed_text": "Calculate the circle's circumference.", "transformed_code": "circle_circumference = lambda r: 2 * 3.1415 * r"}
{"original_text": "Write a function to extract elements that occur singly in the given tuple list.", "original_code": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ", "transformed_text": "Extract elements that appear only once from a list of tuples.", "transformed_code": "extract_singly = lambda test_list: [ele for inner in test_list for ele in set(inner) if inner.count(ele) == 1]"}
{"original_text": "Write a function to sort a list of elements using pancake sort.", "original_code": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums", "transformed_text": "Sort a list using pancake sort.", "transformed_code": "pancake_sort = lambda nums: (lambda f, nums, arr_len: f(f, nums, arr_len))(lambda f, nums, arr_len: nums if arr_len <= 1 else f(f, nums[:nums.index(max(nums[:arr_len]))][::-1] + nums[nums.index(max(nums[:arr_len]))+1:], arr_len - 1)[::-1] + nums[arr_len:], arr_len - 1), nums, len(nums))"}
{"original_text": "Write a function to count the same pair in three given lists.", "original_code": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result", "transformed_text": "Count matching elements in three lists.", "transformed_code": "count_samepair = lambda l1, l2, l3: sum(m == n == o for m, n, o in zip(l1, l2, l3))"}
{"original_text": "Write a function to find number of lists present in the given tuple.", "original_code": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ", "transformed_text": "Find number of lists in the tuple.", "transformed_code": "find_lists = lambda Input: 1 if isinstance(Input, list) else len(Input)"}
{"original_text": "Write a python function to find the sum of absolute differences in all pairs of the given array.", "original_code": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum", "transformed_text": "Find the sum of absolute differences in array pairs.", "transformed_code": "sum_Pairs = lambda arr, n: sum(i * arr[i] - (n-1 - i) * arr[i] for i in range(n-1, -1, -1))"}
{"original_text": "Write a python function to find the maximum difference between any two elements in a given array.", "original_code": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ", "transformed_text": "Find maximum difference between two elements in an array.", "transformed_code": "max_Abs_Diff = lambda arr: max(arr) - min(arr)"}
{"original_text": "Write a function to find the ascii value of total characters in a string.", "original_code": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])", "transformed_text": "Find ascii value of characters in a string", "transformed_code": "ascii_value_string = lambda str1: sum(ord(c) for c in str1)"}
{"original_text": "Write a function to find the maximum total path sum in the given triangle.", "original_code": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]", "transformed_text": "Find maximum path sum in triangle.", "transformed_code": "max_path_sum = lambda tri, m, n: [tri[i][j] := tri[i][j] + max(tri[i+1][j], tri[i+1][j+1]) for i in range(m-1, -1, -1) for j in range(i+1)][0][0]"}
{"original_text": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "original_code": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ", "transformed_text": "Divide a number into two parts for maximum digit sum.", "transformed_code": "sum_digits_single = lambda x: sum(int(d) for d in str(x))\nclosest = lambda x: int('9' * len(str(x)))\nsum_digits_twoparts = lambda N: sum_digits_single(closest(N)) + sum_digits_single(N - closest(N))"}
{"original_text": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "original_code": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result", "transformed_text": "Find the longest subsequence with adjacent differences of one.", "transformed_code": "longest_subseq_with_diff_one = lambda arr, n: (lambda dp: (max(dp) if dp else 1) if (dp := [1] * n) else 1)([max(dp[i], dp[j] + 1) for i in range(n) for j in range(i) if (arr[i] == arr[j] + 1 or arr[i] == arr[j] - 1) or dp[i]])"}
{"original_text": "Write a python function to find whether the given number is present in the infinite sequence or not.", "original_code": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False", "transformed_text": "Find if a number exists in an infinite sequence.", "transformed_code": "does_Contain_B = lambda a, b, c: a == b or (b - a) * c > 0 and (b - a) % c == 0"}
{"original_text": "Write a python function to check whether the given number is co-prime or not.", "original_code": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1", "transformed_text": "Create a function to determine if two numbers are co-prime.", "transformed_code": "gcd = lambda p, q: gcd(q, p % q) if q else p; is_coprime = lambda x, y: gcd(x, y) == 1"}
{"original_text": "Write a function to sort the given array by using merge sort.", "original_code": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n", "transformed_text": "Sort the array using merge sort.", "transformed_code": "merge = lambda a,b: (c := [], [c.append(a[0]) or a.pop(0) if a and (not b or a[0] < b[0]) else c.append(b[0]) or b.pop(0) for _ in range(len(a) + len(b))], c + (b or a))[2]\nmerge_sort = lambda x: x if len(x) < 2 else merge(merge_sort(x[:len(x)//2]), merge_sort(x[len(x)//2:]))"}
{"original_text": "Write a function to find the vertex of a parabola.", "original_code": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex", "transformed_text": "Find the vertex of a parabola.", "transformed_code": "parabola_vertex = lambda a, b, c: ((-b / (2 * a), ((4 * a * c - b * b) / (4 * a))))"}
{"original_text": "Write a function to extract every specified element from a given two dimensional list.", "original_code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result", "transformed_text": "Extract specified element from a 2D list.", "transformed_code": "specified_element = lambda nums, N: [i[N] for i in nums]"}
{"original_text": "Write a python function to toggle all even bits of a given number.", "original_code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "transformed_text": "Toggle even bits of a number.", "transformed_code": "even_bit_toggle_number = lambda n: n ^ sum((1 << i) for i in range(n.bit_length()) if i % 2 == 0)"}
{"original_text": "Write a function to convert a tuple of string values to a tuple of integer values.", "original_code": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result", "transformed_text": "Convert strings to integers in a tuple.", "transformed_code": "tuple_int_str = lambda tuple_str: tuple(map(int, tuple_str))"}
{"original_text": "Write a function to reflect the run-length encoding from a list.", "original_code": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]", "transformed_text": "Create a function for run-length encoding from a list.", "transformed_code": "from itertools import groupby; encode_list = lambda list1: [[len(list(group)), key] for key, group in groupby(list1)]"}
{"original_text": "Write a python function to find k number of operations required to make all elements equal.", "original_code": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ", "transformed_text": "Find operations to equalize array elements.", "transformed_code": "min_Ops = lambda arr,n,k: int(sum((max(arr) - x) / k for x in arr) if all((max(arr) - x) % k == 0 for x in arr) else -1)"}
{"original_text": "Write a function to print the season for the given month and day.", "original_code": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season", "transformed_text": "Find the season based on the month and day.", "transformed_code": "month_season = lambda month, days: 'winter' if month in ('January', 'February', 'March') and not (month == 'December' and days > 20) else 'spring' if month in ('April', 'May', 'June') and not (month == 'March' and days > 19) else 'summer' if month in ('July', 'August', 'September') and not (month == 'June' and days > 20) else 'autumn'"}
{"original_text": "Write a function to find x and y that satisfies ax + by = n.", "original_code": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ", "transformed_text": "Find x and y from equation ax + by = n.", "transformed_code": "solution = lambda a, b, n: next((i, (n - (i * a)) // b) for i in range(n // a + 1) if (n - (i * a)) % b == 0) if any((n - (i * a)) % b == 0 for i in range(n // a + 1)) else 'No solution'"}
{"original_text": "Write a function to remove all elements from a given list present in another list.", "original_code": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result", "transformed_text": "Remove elements from one list that are in another list.", "transformed_code": "remove_elements = lambda list1, list2: [x for x in list1 if x not in list2]"}
{"original_text": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "original_code": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)", "transformed_text": "Calculate the sum of positive integers in a series.", "transformed_code": "sum_series = lambda n: 0 if n < 1 else n + sum_series(n - 2)"}
{"original_text": "Write a function to calculate the area of a regular polygon.", "original_code": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area", "transformed_text": "Calculate the area of a regular polygon.", "transformed_code": "area_polygon = lambda s,l: s * (l ** 2) / (4 * tan(pi / s))"}
{"original_text": "Write a python function to check whether the sum of divisors are same or not.", "original_code": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ", "transformed_text": "Create a function to compare the sum of divisors.", "transformed_code": "import math; divSum=lambda n: 1+sum(i+(n//i) for i in range(2,int(n**0.5)+1) if n%i==0); areEquivalent=lambda num1,num2: divSum(num1)==divSum(num2)"}
{"original_text": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "original_code": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ", "transformed_text": "Count characters in a string matching their alphabet positions.", "transformed_code": "count_char_position = lambda str1: sum(1 for i in range(len(str1)) if i == ord(str1[i].lower()) - ord('a'))"}
{"original_text": "Write a python function to count the pairs with xor as an even number.", "original_code": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ", "transformed_text": "Count pairs with even xor from the list.", "transformed_code": "find_even_Pair = lambda A, N: sum(1 for i in range(N) for j in range(i+1, N) if (A[i] ^ A[j]) % 2 == 0)"}
{"original_text": "Write a python function to find smallest power of 2 greater than or equal to n.", "original_code": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ", "transformed_text": "Find the smallest power of 2 greater than or equal to n.", "transformed_code": "next_Power_Of_2 = lambda n: n if n and not(n & (n - 1)) else 1 << (n.bit_length())"}
{"original_text": "Write a python function to find the frequency of a number in a given array.", "original_code": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ", "transformed_text": "Find the frequency of a number in an array.", "transformed_code": "frequency = lambda a,x: sum(1 for i in a if i == x)"}
{"original_text": "Write a function to calculate the nth pell number.", "original_code": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ", "transformed_text": "Calculate the nth pell number.", "transformed_code": "get_pell = lambda n: n if n <= 2 else (lambda a, b: (lambda f, i: f(f, i))(lambda f, i: a if i > n else f(f, i+1) if (c := 2*b + a) and (a := b) and (b := c) else b, 3))(1, 2)"}
{"original_text": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "original_code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "transformed_text": "Find the sum of numbers in a list within a range.", "transformed_code": "sum_range_list = lambda list1, m, n: sum(list1[m:n+1])"}
{"original_text": "Write a function to find the perimeter of a pentagon.", "original_code": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter", "transformed_text": "Find the perimeter of a pentagon.", "transformed_code": "perimeter_pentagon=lambda a: 5*a"}
{"original_text": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "original_code": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count", "transformed_text": "Find occurrences of 'std' in a string.", "transformed_code": "count_occurance = lambda s: sum(1 for i in range(len(s)-2) if s[i:i+3] == 'std')"}
{"original_text": "Write a function to remove everything except alphanumeric characters from a string.", "original_code": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))", "transformed_text": "Remove non-alphanumeric characters from a string.", "transformed_code": "import re; remove_splchar = lambda text: re.sub('[\\W_]+', '', text)"}
{"original_text": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "original_code": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result", "transformed_text": "Group key-value pairs into a dictionary of lists.", "transformed_code": "group_keyvalue = lambda l: {k: [v for k, v in l if k == key] for key in set(k for k, _ in l)}"}
{"original_text": "Write a function to verify validity of a string of parentheses.", "original_code": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0", "transformed_text": "Create a function to check if parentheses are valid.", "transformed_code": "is_valid_parenthese = lambda str1: len(stack := [p for p in str1 if p in '([{']) or all(stack.pop() == {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}[p] for p in str1 if p in ')]}') and not stack"}
{"original_text": "Write a function to find the perimeter of a triangle.", "original_code": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter", "transformed_text": "Calculate the triangle's perimeter.", "transformed_code": "perimeter_triangle=lambda a,b,c: a+b+c"}
{"original_text": "Write a python function to find two distinct numbers such that their lcm lies within the given range.", "original_code": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ", "transformed_text": "Find two distinct numbers with lcm in the specified range.", "transformed_code": "answer = lambda L, R: (L, 2 * L) if (2 * L <= R) else -1"}
{"original_text": "Write a function to search some literals strings in a string.", "original_code": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')", "transformed_text": "Search for specified strings in a given string.", "transformed_code": "import re; string_literals = lambda patterns, text: next((\"Matched!\" if re.search(p, text) else \"Not Matched!\" for p in patterns), \"Not Matched!\")"}
{"original_text": "Write a function to find if the given number is a keith number or not.", "original_code": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ", "transformed_text": "Determine if a number is a keith number.", "transformed_code": "is_num_keith = lambda x: (lambda terms, n: (terms.reverse(), (next_term := 0, i := n, [terms.append((next_term := sum(terms[i-j] for j in range(1, n+1))) for _ in iter(int, 1)]) for _ in iter(int, 1)]) and next_term == x)[-1])(list(map(int, str(x)[::-1])), len(str(x)))"}
{"original_text": "Write a function to calculate distance between two points using latitude and longitude.", "original_code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist", "transformed_text": "Calculate distance between two geographic points.", "transformed_code": "distance_lat_long = lambda slat, slon, elat, elon: 6371.01 * acos(sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(slon - elon))"}
{"original_text": "Write a function to find the longest common prefix in the given set of strings.", "original_code": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ", "transformed_text": "Find the longest common prefix of multiple strings.", "transformed_code": "common_prefix_util = lambda str1, str2: ''.join(str1[i] for i in range(min(len(str1), len(str2))) if str1[i] == str2[i]); common_prefix = lambda arr: ''.join(common_prefix_util(arr[0], arr[i]) for i in range(1, len(arr)))"}
{"original_text": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "original_code": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "transformed_text": "Find uppercase, lowercase, special characters, and numbers using regex.", "transformed_code": "import re; find_character = lambda s: (re.findall(r\"[A-Z]\", s), re.findall(r\"[a-z]\", s), re.findall(r\"[0-9]\", s), re.findall(r\"[, .!?]\", s))"}
{"original_text": "Write a function to count all the distinct pairs having a difference of k in any array.", "original_code": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count", "transformed_text": "Count distinct pairs with a difference of k in an array.", "transformed_code": "count_pairs = lambda arr, n, k: sum(1 for i in range(n) for j in range(i + 1, n) if abs(arr[i] - arr[j]) == k)"}
{"original_text": "Write a function to find all the values in a list that are greater than a specified number.", "original_code": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum", "transformed_text": "Find values in a list greater than a number.", "transformed_code": "greater_specificnum = lambda lst, num: [x for x in lst if x > num]"}
{"original_text": "Write a function to find the focus of a parabola.", "original_code": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus", "transformed_text": "Find the focus of a parabola.", "transformed_code": "parabola_focus = lambda a, b, c: (-b / (2 * a), ((4 * a * c - b * b + 1) / (4 * a)))"}
{"original_text": "Write a function to search some literals strings in a string by using regex.", "original_code": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')", "transformed_text": "Search literals in a string using regex.", "transformed_code": "import re; check_literals = lambda text, patterns: 'Matched!' if any(re.search(p, text) for p in patterns) else 'Not Matched!'"}
{"original_text": "Write a function to find the longest common subsequence for the given two sequences.", "original_code": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "transformed_text": "Find the longest common subsequence of two sequences.", "transformed_code": "longest_common_subsequence = lambda X, Y, m, n: 0 if m == 0 or n == 0 else 1 + longest_common_subsequence(X, Y, m-1, n-1) if X[m-1] == Y[n-1] else max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"}
{"original_text": "Write a python function to check whether the given number can be represented by product of two squares or not.", "original_code": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;", "transformed_text": "Check if a number is a product of two squares.", "transformed_code": "prod_Square = lambda n: any((i*i*j*j == n) for i in range(2, n + 1) for j in range(2, n + 1))"}
{"original_text": "Write a python function to find the first missing positive number.", "original_code": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)", "transformed_text": "Find the first missing positive number.", "transformed_code": "first_Missing_Positive=lambda arr,n: (1 if 1 not in arr else next(i+1 for i in range(1,n+1) if arr.count(i)==0))"}
{"original_text": "Write a python function to count the number of integral co-ordinates that lie inside a square.", "original_code": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ", "transformed_text": "Count integral points inside a square.", "transformed_code": "count_Intgral_Points=lambda x1,y1,x2,y2: (y2-y1-1)*(x2-x1-1)"}
{"original_text": "Write a function to check whether the given month name contains 30 days or not.", "original_code": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False", "transformed_text": "Check if a month has 30 days.", "transformed_code": "check_month = lambda m: m in [\"April\", \"June\", \"September\", \"November\"]"}
{"original_text": "Write a python function to check whether a string has atleast one letter and one number.", "original_code": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ", "transformed_text": "Create a function to verify a string contains letters and numbers.", "transformed_code": "check_String = lambda s: any(c.isalpha() for c in s) and any(c.isdigit() for c in s)"}
{"original_text": "Write a function to remove the duplicates from the given tuple.", "original_code": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ", "transformed_text": "Remove duplicates from a tuple.", "transformed_code": "remove_tuple = lambda test_tup: tuple(set(test_tup))"}
{"original_text": "Write a python function to convert octal number to decimal number.", "original_code": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ", "transformed_text": "Convert octal to decimal number.", "transformed_code": "octal_To_Decimal = lambda n: sum((n//(8**i) % 8) * (8**i) for i in range(len(str(n))))"}
{"original_text": "Write a python function to find the first position of an element in a sorted array.", "original_code": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res", "transformed_text": "Find first position of element in sorted array.", "transformed_code": "first = lambda arr, x, n: (lambda low, high, res: (lambda: (res := -1, [(res := mid, high := mid - 1) if arr[mid] == x else (low := mid + 1) if arr[mid] < x else (high := mid - 1) for mid in range((low + high) // 2, low <= high)]))())(0, n - 1, -1))"}
{"original_text": "Write a function to remove all the tuples with length k.", "original_code": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ", "transformed_text": "Remove tuples of length k from the list.", "transformed_code": "remove_tuples = lambda test_list, K: [ele for ele in test_list if len(ele) != K]"}
{"original_text": "Write a function to perform the exponentiation of the given two tuples.", "original_code": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n", "transformed_text": "Create a function for exponentiating two tuples.", "transformed_code": "find_exponentio = lambda tup1, tup2: tuple(a ** b for a, b in zip(tup1, tup2))"}
{"original_text": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "original_code": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ", "transformed_text": "Find the largest triangle inscribed in an ellipse.", "transformed_code": "largest_triangle = lambda a, b: -1 if a < 0 or b < 0 else (3 * math.sqrt(3) * a**2) / (4 * b)"}
{"original_text": "Write a python function to find highest power of 2 less than or equal to given number.", "original_code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ", "transformed_text": "Find highest power of 2 less than or equal to number.", "transformed_code": "highest_Power_of_2 = lambda n: max(i for i in range(n + 1) if (i & (i - 1)) == 0)"}
{"original_text": "Write a function to find all index positions of the maximum values in a given list.", "original_code": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result", "transformed_text": "Find indices of maximum values in a list.", "transformed_code": "position_max = lambda lst: [i for i, v in enumerate(lst) if v == max(lst)]"}
{"original_text": "Write a python function to check whether the elements in a list are same or not.", "original_code": "def chkList(lst): \r\n    return len(set(lst)) == 1", "transformed_text": "Create a Python function to check if all list elements are identical.", "transformed_code": "chkList = lambda lst: len(set(lst)) == 1"}
{"original_text": "Write a function to remove even characters in a string.", "original_code": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2", "transformed_text": "Remove even characters from a string.", "transformed_code": "remove_even = lambda s: ''.join(s[i] for i in range(len(s)) if i % 2 == 0)"}
{"original_text": "Write a python function to find the hamming distance between given two integers.", "original_code": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ", "transformed_text": "Find hamming distance between two integers", "transformed_code": "hamming_Distance=lambda n1,n2:sum((n1^n2>>i)&1 for i in range(32))"}
{"original_text": "Write a python function to count the occurrence of a given character in a string.", "original_code": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ", "transformed_text": "Count character occurrences in a string.", "transformed_code": "count = lambda s, c: sum(1 for i in s if i == c)"}
{"original_text": "Write a function to find the inversions of tuple elements in the given tuple list.", "original_code": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ", "transformed_text": "Find inversions of elements in a tuple list.", "transformed_code": "inversion_elements = lambda test_tup: tuple(map(~, test_tup))"}
{"original_text": "Write a function to perform the adjacent element concatenation in the given tuples.", "original_code": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "transformed_text": "Perform adjacent element concatenation in tuples.", "transformed_code": "concatenate_elements = lambda test_tup: tuple(i + j for i, j in zip(test_tup, test_tup[1:]))"}
{"original_text": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "original_code": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]", "transformed_text": "Find the longest repeating subsequences in a string without overlap.", "transformed_code": "find_longest_repeating_subseq = lambda s: (lambda n: (lambda dp: ([(0 if i != j else 0) for j in range(n+1)] for i in range(n+1)])(dp := [[0]*(n+1) for _ in range(n+1)]) or ([(dp[i][j] := 1 + dp[i-1][j-1] if s[i-1] == s[j-1] and i != j else max(dp[i][j-1], dp[i-1][j]) for j in range(1, n+1)) for i in range(1, n+1)], dp[n][n])[-1]))(len(s))"}
{"original_text": "Write a function to check the given decimal with a precision of 2 by using regex.", "original_code": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)", "transformed_text": "Create a function to validate decimals with two decimal places.", "transformed_code": "import re; is_decimal = lambda num: bool(re.search(r'^[0-9]+(\\.[0-9]{1,2})?$', num))"}
{"original_text": "Write a function to delete the smallest element from the given heap and then insert a new item.", "original_code": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap", "transformed_text": "Delete the smallest element from a heap and insert a new item.", "transformed_code": "import heapq as hq; heap_replace = lambda heap,a: (hq.heapify(heap), hq.heapreplace(heap, a), heap)[-1]"}
{"original_text": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "original_code": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)", "transformed_text": "Check if a string has only allowed characters a-z, A-Z, and 0-9.", "transformed_code": "import re\nis_allowed_specific_char = lambda s: not re.search(r'[^a-zA-Z0-9]', s)"}
{"original_text": "Write a python function to count numbers whose oth and nth bits are set.", "original_code": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ", "transformed_text": "Create a function to count numbers with specific bits set.", "transformed_code": "count_Num = lambda n: 1 if n == 1 else pow(2, n - 2)"}
{"original_text": "Write a python function to find the sum of fourth power of n natural numbers.", "original_code": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum", "transformed_text": "Find the sum of the fourth powers of first n natural numbers.", "transformed_code": "fourth_Power_Sum = lambda n: sum(i**4 for i in range(1, n+1))"}
{"original_text": "Write a function to perform the concatenation of two string tuples.", "original_code": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "transformed_text": "Concatenate two string tuples.", "transformed_code": "concatenate_strings = lambda t1, t2: tuple(a + b for a, b in zip(t1, t2))"}
{"original_text": "Write a function to convert radians to degrees.", "original_code": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree", "transformed_text": "Convert radians to degrees.", "transformed_code": "degree_radian = lambda radian: radian * (180 / math.pi)"}
{"original_text": "Write a function to decode a run-length encoded given list.", "original_code": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]", "transformed_text": "Decode a run-length encoded list.", "transformed_code": "decode_list = lambda alist: [x for g in alist for x, R in (lambda g: [(g[1], range(g[0]))] if isinstance(g, list) else [(g, [0])])(g) for i in R]"}
{"original_text": "Write a function to check if a nested list is a subset of another nested list.", "original_code": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ", "transformed_text": "Create a function to verify if one nested list is inside another.", "transformed_code": "check_subset_list = lambda list1, list2: all(i in list1 for i in list2)"}
{"original_text": "Write a python function to find the first repeated character in a given string.", "original_code": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'", "transformed_text": "Find the first repeated character in a string.", "transformed_code": "first_Repeated_Char = lambda s: next((ch for ch in s if s.index(ch) != s.index(ch, s.index(ch) + 1)), '\\0')"}
{"original_text": "Write a python function to find the minimum operations required to make two numbers equal.", "original_code": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1", "transformed_text": "Find minimum operations to make two numbers equal.", "transformed_code": "import math; min_Operations=lambda A,B:(B:=B//math.gcd(A,B))-1 if A<=B else min_Operations(B,A)"}
{"original_text": "Write a function to extract maximum and minimum k elements in the given tuple.", "original_code": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ", "transformed_text": "Extract the largest and smallest k elements from a tuple.", "transformed_code": "extract_min_max = lambda t, k: tuple(sorted(t)[:k] + sorted(t)[-k:])"}
{"original_text": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "original_code": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))", "transformed_text": "Replace specified occurrences of spaces, commas, or dots with a colon.", "transformed_code": "import re; replace_max_specialchar = lambda text,n: re.sub('[ ,.]', ':', text, n)"}
{"original_text": "Write a python function to find the first even number in a given list of numbers.", "original_code": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even", "transformed_text": "Find the first even number in a list.", "transformed_code": "first_even = lambda nums: next((el for el in nums if el % 2 == 0), -1)"}
{"original_text": "Write a function to check if all the elements in tuple have same data type or not.", "original_code": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ", "transformed_text": "Check if all elements in a tuple have the same type.", "transformed_code": "check_type = lambda t: all(isinstance(e, type(t[0])) for e in t)"}
{"original_text": "Write a function to check for majority element in the given sorted array.", "original_code": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1", "transformed_text": "Check if an element is a majority in a sorted array.", "transformed_code": "is_majority = lambda arr, n, x: (i := binary_search(arr, 0, n-1, x)) != -1 and arr[i + n//2] == x\rbinary_search = lambda arr, low, high, x: (mid := (low + high)//2, (mid == 0 or x > arr[mid-1]) and arr[mid] == x and mid) if high >= low else (binary_search(arr, mid + 1, high, x) if x > arr[mid] else binary_search(arr, low, mid - 1, x)) if x != arr[mid] else -1)"}
{"original_text": "Write a python function to count set bits of a given number.", "original_code": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ", "transformed_text": "Create a function to count set bits in a number.", "transformed_code": "count_Set_Bits = lambda n: sum(n >> i & 1 for i in range(n.bit_length()))"}
{"original_text": "Write a python function to find the minimum element in a sorted and rotated array.", "original_code": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ", "transformed_text": "Find the minimum in a sorted rotated array.", "transformed_code": "find_Min = lambda arr, low, high: (arr[high] if low >= high else find_Min(arr, mid + 1, high) if arr[mid] > arr[high] else find_Min(arr, low, mid) if arr[mid] != arr[high] else find_Min(arr, low, high - 1))"}
{"original_text": "Write a python function to remove the characters which have odd index values of a given string.", "original_code": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result", "transformed_text": "Remove characters at odd index positions from a string.", "transformed_code": "odd_values_string = lambda s: ''.join(s[i] for i in range(len(s)) if i % 2 == 0)"}
{"original_text": "Write a function to find minimum of three numbers.", "original_code": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ", "transformed_text": "Find the minimum of three numbers.", "transformed_code": "min_of_three = lambda a, b, c: min(a, b, c)"}
{"original_text": "Write a python function to check whether all the bits are unset in the given range or not.", "original_code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False", "transformed_text": "Check if all bits are unset in a specified range.", "transformed_code": "all_Bits_Set_In_The_Given_Range = lambda n, l, r: (n & (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))) == 0)"}
{"original_text": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "original_code": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr", "transformed_text": "Re-arrange array to place negatives before positives.", "transformed_code": "re_arrange_array = lambda arr, n: [(arr[j := (j + 1) if arr[i] < 0 else j), arr[i]] for i in range(n) if (arr[j := (j + 1) if arr[i] < 0 else j), arr[i])][j] or arr"}
{"original_text": "Write a function to replace blank spaces with any character in a string.", "original_code": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2", "transformed_text": "Replace spaces in a string with a given character.", "transformed_code": "replace_blank = lambda str1, char: str1.replace(' ', char)"}
{"original_text": "Write a function to find the maximum sum in the given right triangle of numbers.", "original_code": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))", "transformed_text": "Find the maximum sum in a triangle of numbers.", "transformed_code": "max_sum = lambda tri, n: (tri[1][1:3].__iadd__([tri[0][0]]), [tri[i].__iadd__([tri[i-1][0]]) for i in range(2, n)], [tri[i].__iadd__([tri[i-1][j-1]]) if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j] else tri[i].__iadd__([tri[i-1][j]]) for i in range(2, n) for j in range(1, i)], max(tri[n-1]))[2]"}
{"original_text": "Write a function to get the n largest items from a dataset.", "original_code": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest", "transformed_text": "Get the largest n items from a dataset.", "transformed_code": "import heapq; larg_nnum=lambda list1,n:heapq.nlargest(n,list1)"}
{"original_text": "Write a function to find the lateral surface area of a cylinder.", "original_code": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface", "transformed_text": "Find the lateral surface area of a cylinder.", "transformed_code": "lateralsurface_cylinder = lambda r, h: 2 * 3.1415 * r * h"}
{"original_text": "Write a function to find the volume of a cube.", "original_code": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume", "transformed_text": "Find the volume of a cube.", "transformed_code": "volume_cube = lambda l: l**3"}
{"original_text": "Write a python function to set all even bits of a given number.", "original_code": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ", "transformed_text": "Set all even bits of a number.", "transformed_code": "even_bit_set_number = lambda n: n | sum((1 << i) for i in range(0, n.bit_length(), 2))"}
{"original_text": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "original_code": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;", "transformed_text": "Count maximum equilateral triangles in a given triangle.", "transformed_code": "No_of_Triangle=lambda N,K: -1 if N<K else((N-K+1)*(N-K+2)//2)+((N-2*K+1)*(N-2*K+2)//2)"}
{"original_text": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "original_code": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ", "transformed_text": "Count occurrences of similar records in tuples.", "transformed_code": "check_occurrences = lambda lst: dict(Counter(tuple(sorted(ele)) for ele in lst))"}
{"original_text": "Write a python function to count number of non-empty substrings of a given string.", "original_code": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ", "transformed_text": "Count non-empty substrings in a string.", "transformed_code": "number_of_substrings = lambda s: int(len(s) * (len(s) + 1) / 2)"}
{"original_text": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "original_code": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]", "transformed_text": "Find sequences of length n where each element is at least twice the previous one and at most m.", "transformed_code": "get_total_number_of_sequences = lambda m, n: (lambda T: (T[m][n], [T[i][j] for i in range(m+1) for j in range(n+1) if (T[i][0], T[j][0])]) if (T:=[0]*(m+1) for _ in range(n+1)) else None)(T))"}
{"original_text": "Write a function to replace the last element of the list with another list.", "original_code": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n", "transformed_text": "Replace the last element of a list with another list.", "transformed_code": "replace_list=lambda list1,list2:list1[:-1]+list2"}
{"original_text": "Write a function to generate a 3d array having each element as '*'.", "original_code": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d", "transformed_text": "Generate a 3D array filled with '*'.", "transformed_code": "array_3d = lambda m,n,o: [[['*' for _ in range(m)] for _ in range(n)] for _ in range(o)]"}
{"original_text": "Write a function to count total characters in a string.", "original_code": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total", "transformed_text": "Count characters in string.", "transformed_code": "count_charac = lambda str1: sum(1 for _ in str1)"}
{"original_text": "Write a function to sort the given list based on the occurrence of first element of tuples.", "original_code": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ", "transformed_text": "Sort the list by how often the first element of tuples occurs.", "transformed_code": "sort_on_occurence = lambda lst: [(i, *dict.fromkeys(j), len(j)) for i, j in {k: [v for _, v in lst if _ == k] for k, _ in lst}.items()]"}
{"original_text": "Write a python function to find the next perfect square greater than a given number.", "original_code": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ", "transformed_text": "Find the next perfect square greater than a number.", "transformed_code": "next_Perfect_Square = lambda N: (int(N**0.5) + 1)**2"}
{"original_text": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "original_code": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum", "transformed_text": "Find maximum sum of bi-tonic subsequence from an array.", "transformed_code": "max_sum = lambda arr, n: (lambda MSIBS: (MSDBS := arr[:], [MSIBS.__setitem__(i, max(MSIBS[i], MSIBS[j] + arr[i])) for j in range(i) if arr[i] > arr[j]] for i in range(n), [MSDBS.__setitem__(-i, max(MSDBS[-i], MSDBS[-j] + arr[-i])) for j in range(1, i) if arr[-i] > arr[-j]] for i in range(1, n + 1)], max(sum(i + j - k for i, j, k in zip(MSIBS, MSDBS, arr)), float('-Inf'))))(arr[:]))(arr, n)"}
{"original_text": "Write a function for computing square roots using the babylonian method.", "original_code": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;", "transformed_text": "Compute square roots using the Babylonian method.", "transformed_code": "babylonian_squareroot = lambda number: 0 if number == 0 else (g := number/2.0, g2 := g + 1, (g := (g + number/g)/2) while g != g2)[0]"}
{"original_text": "Write a function to find the longest palindromic subsequence in the given string.", "original_code": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]", "transformed_text": "Find longest palindromic subsequence in a string.", "transformed_code": "lps = lambda s: (lambda L, n: (L := [[0] * n for _ in range(n)], [L[i][i] := 1 for i in range(n)], [L[i][j] := 2 if s[i] == s[j] and j - i == 1 else L[i + 1][j - 1] + 2 if s[i] == s[j] else max(L[i][j - 1], L[i + 1][j]) for cl in range(2, n + 1) for i in range(n - cl + 1) for j in [i + cl - 1]], L[0][n - 1])[2])(s, len(s))"}
{"original_text": "Write a function to calculate the harmonic sum of n-1.", "original_code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ", "transformed_text": "Calculate harmonic sum of n-1.", "transformed_code": "harmonic_sum = lambda n: 1 if n < 2 else 1/n + harmonic_sum(n-1)"}
{"original_text": "Write a function to find the intersection of two arrays using lambda function.", "original_code": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result", "transformed_text": "Find intersection of two arrays.", "transformed_code": "intersection_array = lambda a1, a2: list(filter(lambda x: x in a1, a2))"}
{"original_text": "Write a python function to count the occcurences of an element in a tuple.", "original_code": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ", "transformed_text": "Count occurrences of an element in a tuple.", "transformed_code": "count_X = lambda tup, x: sum(1 for ele in tup if ele == x)"}
{"original_text": "Write a function to insert an element before each element of a list.", "original_code": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list", "transformed_text": "Insert an element before each item in a list.", "transformed_code": "insert_element = lambda lst, el: [v for elt in lst for v in (el, elt)]"}
{"original_text": "Write a python function to convert complex numbers to polar coordinates.", "original_code": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ", "transformed_text": "Convert complex numbers to polar.", "transformed_code": "import cmath; convert = lambda numbers: cmath.polar(numbers)"}
{"original_text": "Write a python function to count integers from a given list.", "original_code": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr", "transformed_text": "Count integers in a list.", "transformed_code": "count_integer = lambda lst: sum(1 for i in lst if isinstance(i, int))"}
{"original_text": "Write a function to find all words starting with 'a' or 'e' in a given string.", "original_code": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list", "transformed_text": "Find words in a string that start with 'a' or 'e'.", "transformed_code": "import re; words_ae=lambda text: re.findall(r'[ae]\\w+', text)"}
{"original_text": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "original_code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r", "transformed_text": "Generate combinations of selected colours with repetitions.", "transformed_code": "combinations_colors = lambda l, n: list(combinations_with_replacement(l, n))"}
{"original_text": "Write a python function to count the number of prime numbers less than a given non-negative number.", "original_code": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr", "transformed_text": "Count prime numbers below a given non-negative number.", "transformed_code": "count_primes = lambda n: sum(1 for num in range(2, n) if all(num % i != 0 for i in range(2, int(num**0.5)+1)))"}
{"original_text": "Write a function to swap two numbers.", "original_code": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)", "transformed_text": "Swap two numbers.", "transformed_code": "swap_numbers = lambda a, b: (b, a)"}
{"original_text": "Write a function to find number of odd elements in the given list using lambda function.", "original_code": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd", "transformed_text": "Count odd numbers in a list using lambda.", "transformed_code": "count_odd = lambda array_nums: len(list(filter(lambda x: x % 2 != 0, array_nums)))"}
{"original_text": "Write a function to maximize the given two tuples.", "original_code": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "transformed_text": "Maximize elements from two tuples.", "transformed_code": "maximize = lambda t1, t2: tuple(max(a, b) for a, b in zip(t1, t2))"}
{"original_text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "original_code": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "transformed_text": "Find the nth newman-shanks-williams prime number.", "transformed_code": "newman_prime = lambda n: 1 if n < 2 else 2 * newman_prime(n - 1) + newman_prime(n - 2)"}
{"original_text": "Write a function to perform mathematical division operation across the given tuples.", "original_code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "transformed_text": "Perform division on elements from two tuples.", "transformed_code": "lambda t1, t2: tuple(a // b for a, b in zip(t1, t2))"}
{"original_text": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "original_code": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]", "transformed_text": "Split a list into two parts by length.", "transformed_code": "split_two_parts = lambda list1, L: (list1[:L], list1[L:])"}
{"original_text": "Write a function to merge two dictionaries.", "original_code": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d", "transformed_text": "Merge two dictionaries.", "transformed_code": "merge_dict = lambda d1, d2: {**d1, **d2}"}
{"original_text": "Write a function to calculate a dog's age in dog's years.", "original_code": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age", "transformed_text": "Calculate a dog's age from human years.", "transformed_code": "dog_age = lambda h_age: (h_age < 0) and exit() or (h_age <= 2) * h_age * 10.5 + (h_age > 2) * (21 + (h_age - 2) * 4)"}
{"original_text": "Write a function to split a list for every nth element.", "original_code": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]", "transformed_text": "Split a list into parts by every nth element.", "transformed_code": "list_split = lambda S, step: [S[i::step] for i in range(step)]"}
{"original_text": "Write a function to find the lateral surface area of a cube.", "original_code": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA", "transformed_text": "Find the lateral surface area of a cube.", "transformed_code": "lateralsurface_cube = lambda l: 4 * (l * l)"}
{"original_text": "Write a python function to find the sum of squares of first n odd natural numbers.", "original_code": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ", "transformed_text": "Find the sum of squares of first n odd numbers.", "transformed_code": "square_Sum = lambda n: int(n*(4*n*n-1)/3)"}
{"original_text": "Write a function to find the n'th star number.", "original_code": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ", "transformed_text": "Find the n'th star number.", "transformed_code": "find_star_num=lambda n: 6*n*(n-1)+1"}
{"original_text": "Write a function to find the ascii value of a character.", "original_code": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)", "transformed_text": "Find ascii value of a character.", "transformed_code": "ascii_value=lambda k:ord(k)"}
{"original_text": "Write a python function to find the sum of even numbers at even positions.", "original_code": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum", "transformed_text": "Find sum of even numbers at even indices.", "transformed_code": "sum_even_and_even_index = lambda arr, n: sum(arr[i] for i in range(0, n, 2) if arr[i] % 2 == 0)"}
{"original_text": "Write a python function to find the sum of fifth power of first n even natural numbers.", "original_code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ", "transformed_text": "Find the sum of fifth powers of first n even numbers.", "transformed_code": "even_Power_Sum = lambda n: sum((2*i)**5 for i in range(1, n+1))"}
{"original_text": "Write a function to perfom the rear element extraction from list of tuples records.", "original_code": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ", "transformed_text": "Extract the last element from each tuple in a list.", "transformed_code": "rear_extract = lambda test_list: [lis[-1] for lis in test_list]"}
{"original_text": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "original_code": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ", "transformed_text": "Subtract elements of two tuples by index.", "transformed_code": "substract_elements = lambda tup1, tup2: tuple(map(lambda i, j: i - j, tup1, tup2))"}
{"original_text": "Write a python function to find sum of even index binomial coefficients.", "original_code": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ", "transformed_text": "Find sum of even index binomial coefficients.", "transformed_code": "even_binomial_Coeff_Sum = lambda n: 1 << (n - 1)"}
{"original_text": "Write a python function to find the position of the last removed element from the given array.", "original_code": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1", "transformed_text": "Find the last position of a removed element in an array.", "transformed_code": "get_Position=lambda a,n,m:next((i+1 for i in range(n-1,-1,-1) if a[i]>(a[i]//m+(a[i]%m!=0))),-1)"}
{"original_text": "Write a function to find the volume of a cylinder.", "original_code": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume", "transformed_text": "Calculate the volume of a cylinder.", "transformed_code": "volume_cylinder=lambda r,h:3.1415*r*r*h"}
{"original_text": "Write a function to filter a dictionary based on values.", "original_code": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result", "transformed_text": "Filter a dictionary by values.", "transformed_code": "dict_filter = lambda d, n: {k: v for k, v in d.items() if v >= n}"}
{"original_text": "Write a function to find the element count that occurs before the record in the given tuple.", "original_code": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ", "transformed_text": "Find the count of elements before the first tuple in a given tuple.", "transformed_code": "count_first_elements = lambda t: next((i for i, e in enumerate(t) if isinstance(e, tuple)), len(t))"}
{"original_text": "Write a function to find the nth decagonal number.", "original_code": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ", "transformed_text": "Find the nth decagonal number.", "transformed_code": "is_num_decagonal = lambda n: 4 * n * n - 3 * n"}
{"original_text": "Write a function to search an element in the given array by using sequential search.", "original_code": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos", "transformed_text": "Find an element in the array using a sequential search.", "transformed_code": "sequential_search = lambda dlist, item: (any(dlist[i] == item for i in range(len(dlist))), dlist.index(item) if item in dlist else -1)"}
{"original_text": "Write a python function to check if the elements of a given list are unique or not.", "original_code": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True", "transformed_text": "Check if list elements are unique.", "transformed_code": "all_unique = lambda lst: len(lst) == len(set(lst))"}
{"original_text": "Write a function to substaract two lists using map and lambda function.", "original_code": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)", "transformed_text": "Subtract two lists using map and lambda.", "transformed_code": "sub_list = lambda nums1, nums2: list(map(lambda x, y: x - y, nums1, nums2))"}
{"original_text": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.", "original_code": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True", "transformed_text": "Create function to verify digit frequency against values.", "transformed_code": "validate = lambda n: all((n // 10**i) % 10 <= i for i in range(10) if (n := sum((n // 10**j) % 10 for j in range(10))) > 0)"}
{"original_text": "Write a function to check whether all items of a list are equal to a given string.", "original_code": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element", "transformed_text": "Check if all items in a list match a given string.", "transformed_code": "check_element=lambda lst, el: all(v==el for v in lst)"}
{"original_text": "Write a function that matches a string that has an a followed by two to three 'b'.", "original_code": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "transformed_text": "Create a function to find strings with 'a' followed by 2-3 'b'.", "transformed_code": "import re\ntext_match = lambda text: 'Found a match!' if re.search('ab{2,3}', text) else 'Not matched!'"}
{"original_text": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "original_code": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far", "transformed_text": "Find largest sum of contiguous subarray in a repeated array.", "transformed_code": "max_sub_array_sum_repeated = lambda a, n, k: max(sum(a[i%n] for i in range(n*k)) if (sum := 0) >= 0 else 0 for j in range(k))"}
{"original_text": "Write a python function to find the sum of squares of first n even natural numbers.", "original_code": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)", "transformed_text": "Find the sum of squares of the first n even numbers.", "transformed_code": "square_Sum = lambda n: int(2*n*(n+1)*(2*n+1)/3)"}
{"original_text": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "original_code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element", "transformed_text": "Count elements with modular inverse under prime p in an array.", "transformed_code": "modular_inverse = lambda arr, N, P: sum(1 for i in range(N) if (arr[i] * arr[i]) % P == 1)"}
{"original_text": "Write a python function to calculate the number of odd days in a given year.", "original_code": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ", "transformed_text": "Calculate odd days in a year.", "transformed_code": "odd_Days=lambda N:(N-N>>2+(N//100)-(N//400)+((N>>2)*2))%7"}
{"original_text": "Write a function to find the list of lists with maximum length.", "original_code": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)", "transformed_text": "Find lists with the maximum length.", "transformed_code": "max_length = lambda list1: (max(len(x) for x in list1), max(list1, key=len))"}
{"original_text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "original_code": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]", "transformed_text": "Find ways to paint a fence with n posts using k colors.", "transformed_code": "count_no_of_ways = lambda n, k: dp := [0] * (n + 1), (dp[1], dp[2]) := (k, k * k), [dp[i := i + 1] := ((k - 1) * (dp[i - 1] + dp[i - 2])) % 1000000007 for i in range(3, n + 1)], dp[n]"}
{"original_text": "Write a python function to find quotient of two numbers.", "original_code": "def find(n,m):  \r\n    q = n//m \r\n    return (q)", "transformed_text": "Find the quotient of two numbers.", "transformed_code": "find = lambda n, m: n // m"}
{"original_text": "Write a function to find the third side of a right angled triangle.", "original_code": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s", "transformed_text": "Find the third side of a right triangle.", "transformed_code": "import math; otherside_rightangle=lambda w,h: math.sqrt(w**2 + h**2)"}
{"original_text": "Write a function to find the maximum value in a given heterogeneous list.", "original_code": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)", "transformed_text": "Find the maximum value in a heterogeneous list.", "transformed_code": "max_val = lambda lst: max(i for i in lst if isinstance(i, int))"}
{"original_text": "Write a function to return the sum of all divisors of a number.", "original_code": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)", "transformed_text": "Calculate the sum of all divisors of a number", "transformed_code": "sum_div = lambda n: sum([i for i in range(1, n) if n % i == 0])"}
{"original_text": "Write a python function to count inversions in an array.", "original_code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ", "transformed_text": "Count inversions in an array.", "transformed_code": "get_Inv_Count = lambda arr, n: sum(1 for i in range(n) for j in range(i + 1, n) if arr[i] > arr[j])"}
{"original_text": "Write a function to flatten a given nested list structure.", "original_code": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ", "transformed_text": "Flatten a nested list into a single list.", "transformed_code": "flatten_list = lambda lst: (r := [], stack := [list(lst)]) or ([(r.append(n) if not isinstance(n, list) else stack.append(list(n))) for c in iter(lambda: stack.pop(), []) for n in c] and r.reverse() or r)"}
{"original_text": "Write a function to find the nested list elements which are present in another list.", "original_code": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result", "transformed_text": "Find common elements in nested lists.", "transformed_code": "intersection_nested_lists = lambda l1, l2: [[n for n in lst if n in l1] for lst in l2]"}
{"original_text": "Write a function to calculate the maximum aggregate from the list of tuples.", "original_code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])", "transformed_text": "Calculate maximum sum from a list of tuples.", "transformed_code": "from collections import defaultdict; max_aggregate = lambda stdata: max((temp := defaultdict(int).update({name: temp[name] + marks for name, marks in stdata}), temp.items()), key=lambda x: x[1])"}
{"original_text": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "original_code": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ", "transformed_text": "Find the count of binary sequences with equal bit sums.", "transformed_code": "count_binary_seq = lambda n: sum((1 * (nCr := 1) * (nCr := (nCr * (n + 1 - r)) / r)) for r in range(1, n + 1)) + 1"}
{"original_text": "Write a function to find the depth of a dictionary.", "original_code": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0", "transformed_text": "Find the depth of a dictionary.", "transformed_code": "dict_depth = lambda d: 1 + max(map(dict_depth, d.values()), default=0) if isinstance(d, dict) else 0"}
{"original_text": "Write a python function to find the most significant bit number which is also a set bit.", "original_code": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)", "transformed_text": "Find the highest set bit of a number.", "transformed_code": "set_Bit_Number = lambda n: (1 << (n.bit_length() - 1)) if n else 0"}
{"original_text": "Write a python function to check whether the count of inversion of two types are same or not.", "original_code": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True", "transformed_text": "Check if two types have the same count of inversions.", "transformed_code": "solve = lambda a, n: all(max(a[j-1] for j in range(1, n)) <= a[j] for j in range(1, n))"}
{"original_text": "Write a python function to find element at a given index after number of rotations.", "original_code": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ", "transformed_text": "Find element at index after rotations.", "transformed_code": "find_element = lambda arr, ranges, rotations, index: arr[index if (left := ranges[rotations - 1][0]) > index else index - 1] if (index := next((ranges[i][1] if (left <= index <= right := ranges[i][1]) else index for i in range(rotations - 1, -1, -1)), index)) else arr[index]"}
{"original_text": "Write a function to match two words from a list of words starting with letter 'p'.", "original_code": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()", "transformed_text": "Find pairs of words starting with 'p' from a list.", "transformed_code": "import re; start_withp = lambda words: [(m.groups()) for w in words if (m := re.match(r'(P\\w+)\\W(P\\w+)', w))]"}
{"original_text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "original_code": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]", "transformed_text": "Find maximum sum of increasing subsequence including a specified element.", "transformed_code": "max_sum_increasing_subseq = lambda a, n, index, k: [[a[i]+a[0] if a[i]>a[0] else a[i] for i in range(n)] for n in range(1, n) for i in range(n) for j in range(n) if a[j]>a[i] and j>i and (dp[i][j] := max(dp[i-1][i]+a[j], dp[i-1][j]))]"}
{"original_text": "Write a function to get a colon of a tuple.", "original_code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon", "transformed_text": "Get a colon from a tuple.", "transformed_code": "colon_tuplex = lambda tuplex, m, n: (tuplex[:m] + [tuplex[m] + [n]] + tuplex[m+1:])"}
{"original_text": "Write a function to find the specified number of largest products from two given lists.", "original_code": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result", "transformed_text": "Find largest products from two lists.", "transformed_code": "large_product = lambda nums1, nums2, N: sorted(x*y for x in nums1 for y in nums2, reverse=True)[:N]"}
{"original_text": "Write a python function to find the maximum of two numbers.", "original_code": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ", "transformed_text": "Find the maximum of two numbers.", "transformed_code": "maximum = lambda a, b: a if a >= b else b"}
{"original_text": "Write a function to convert a given string to a tuple.", "original_code": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result", "transformed_text": "Convert a string to a tuple.", "transformed_code": "string_to_tuple = lambda str1: tuple(x for x in str1 if not x.isspace())"}
{"original_text": "Write a python function to set the left most unset bit.", "original_code": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ", "transformed_text": "Set the left most unset bit in a number.", "transformed_code": "set_left_most_unset_bit = lambda n: n if not (n & (n + 1)) else n | (1 << max([i for i in range(n.bit_length()) if not (n & (1 << i))]))"}
{"original_text": "Write a function to find the volume of a cone.", "original_code": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume", "transformed_text": "Calculate the cone's volume.", "transformed_code": "volume_cone = lambda r, h: (1/3) * math.pi * r * r * h"}
{"original_text": "Write a python function to print positive numbers in a list.", "original_code": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ", "transformed_text": "Print positive numbers from a list.", "transformed_code": "pos_nos = lambda lst: [num for num in lst if num >= 0]"}
{"original_text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "original_code": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)", "transformed_text": "Find maximum sum from non-adjacent numbers in a 2 x n grid.", "transformed_code": "max_sum_rectangular_grid = lambda grid, n: (incl := max(grid[0][0], grid[1][0]), excl := 0, [incl := excl + max(grid[0][i], grid[1][i]) for i in range(1, n) if (excl_new := max(excl, incl), excl := excl_new)]) or max(excl, incl)"}
{"original_text": "Write a python function to find the first maximum length of even word.", "original_code": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ", "transformed_text": "Find the longest even-length word.", "transformed_code": "find_max_len_even = lambda s: max((s[start:end] for start, end in ((i - length, i) for i in range(len(s) + 1) for length in range(i + 1) if s[start:end].strip() and len(s[start:end]) % 2 == 0)), key=len, default='-1')"}
{"original_text": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "original_code": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ", "transformed_text": "Find the last index of a number in a sorted array.", "transformed_code": "find_last_occurrence = lambda A, x: (result := -1, left, right := 0, len(A) - 1, exec(\"while left <= right: mid = (left + right) // 2; (result := mid if x == A[mid] else result); left, right = (mid + 1, right) if x == A[mid] else (left, mid - 1) if x < A[mid] else (left, mid + 1)\") or result)[-1]"}
{"original_text": "Write a function to reflect the modified run-length encoding from a list.", "original_code": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]", "transformed_text": "Create a function for modified run-length encoding from a list.", "transformed_code": "from itertools import groupby; modified_encode = lambda alist: [lambda el: [len(el), el[0]] if len(el)>1 else el[0] for key, group in groupby(alist)]"}
{"original_text": "Write a python function to find the maximum volume of a cuboid with given sum of sides.", "original_code": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ", "transformed_text": "Find maximum volume of a cuboid with given side sum.", "transformed_code": "max_volume = lambda s: max(i * j * (s - i - j) for i in range(1, s) for j in range(1, s))"}
{"original_text": "Write a function to find all five characters long word in the given string by using regex.", "original_code": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))", "transformed_text": "Find all five-letter words in the string using regex.", "transformed_code": "import re; find_long_word = lambda text: re.findall(r'\\b\\w{5}\\b', text)"}
{"original_text": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "original_code": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares", "transformed_text": "Calculate the difference between squared sum and sum of squares for first n numbers.", "transformed_code": "sum_difference = lambda n: (sum(range(1, n+1)) ** 2) - sum(num ** 2 for num in range(1, n+1))"}
{"original_text": "Write a function to find the demlo number for the given number.", "original_code": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t", "transformed_text": "Find the demlo number for a given number.", "transformed_code": "find_demlo = lambda s: ''.join(map(str, range(1, len(s)+1))) + ''.join(map(str, range(len(s)-1, 0, -1)))"}
{"original_text": "Write a function to find all index positions of the minimum values in a given list.", "original_code": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result", "transformed_text": "Find positions of minimum values in a list.", "transformed_code": "position_min = lambda list1: [i for i, j in enumerate(list1) if j == min(list1)]"}
{"original_text": "Write a function to re-arrange the given array in alternating positive and negative items.", "original_code": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr", "transformed_text": "Rearrange the array with alternating positive and negative values.", "transformed_code": "right_rotate = lambda arr, n, out_of_place, cur: (arr.__setitem__(out_of_place, arr[cur]), [arr.__setitem__(i, arr[i - 1]) for i in range(cur, out_of_place, -1)], arr)[-1]; re_arrange = lambda arr, n: (out_of_place := -1, [right_rotate(arr, n, out_of_place := index if (out_of_place >= 0) and ((arr[index] >= 0 and arr[out_of_place] < 0) or (arr[index] < 0 and arr[out_of_place] >= 0)) else out_of_place, index) if out_of_place != -1 else (out_of_place := index if (arr[index] >= 0 and index % 2 == 0) or (arr[index] < 0 and index % 2 == 1) else out_of_place) for index in range(n)], arr)[-1]"}
{"original_text": "Write a function to extract the sum of alternate chains of tuples.", "original_code": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ", "transformed_text": "Extract sums from alternating tuples.", "transformed_code": "sum_of_alternates = lambda t: (sum(t[i] for i in range(len(t)) if i % 2), sum(t[i] for i in range(len(t)) if i % 2 == 0))"}
{"original_text": "Write a python function to find the minimum number of squares whose sum is equal to a given number.", "original_code": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;", "transformed_text": "Find the minimum squares that sum to a number.", "transformed_code": "get_Min_Squares = lambda n: n if n <= 3 else min(n, 1 + min(get_Min_Squares(n - x * x) for x in range(1, n + 1) if x * x <= n))"}
{"original_text": "Write a function to get the word with most number of occurrences in the given strings list.", "original_code": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ", "transformed_text": "Find the word with the highest occurrences in a list of strings.", "transformed_code": "from collections import defaultdict; most_occurrences = lambda lst: max((lambda temp: {temp[wrd]: wrd for sub in lst for wrd in sub.split()})(), key=lambda x: x[0])[1]"}
{"original_text": "Write a function to print check if the triangle is isosceles or not.", "original_code": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False", "transformed_text": "Determine if a triangle is isosceles.", "transformed_code": "check_isosceles = lambda x, y, z: x == y or y == z or z == x"}
{"original_text": "Write a function to rotate a given list by specified number of items to the left direction.", "original_code": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result", "transformed_text": "Rotate a list to the left by a specified number.", "transformed_code": "rotate_left = lambda list1, m, n: list1[m:] + list1[:n]"}
{"original_text": "Write a python function to count negative numbers in a list.", "original_code": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ", "transformed_text": "Count negative numbers in a list.", "transformed_code": "neg_count = lambda lst: sum(1 for num in lst if num <= 0)"}
{"original_text": "Write a function to find all three, four, five characters long words in the given string by using regex.", "original_code": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))", "transformed_text": "Find words with three to five characters in a string using regex.", "transformed_code": "import re\nfind_char = lambda text: re.findall(r'\\b\\w{3,5}\\b', text)"}
{"original_text": "Write a python function to count unset bits of a given number.", "original_code": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ", "transformed_text": "Count unset bits in a number.", "transformed_code": "count_unset_bits = lambda n: sum(1 for x in range(1, n+1) if (x & n) == 0)"}
{"original_text": "Write a function to count character frequency of a given string.", "original_code": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict", "transformed_text": "Count character frequency in a string.", "transformed_code": "char_frequency = lambda str1: {n: str1.count(n) for n in set(str1)}"}
{"original_text": "Write a python function to sort a list according to the second element in sublist.", "original_code": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ", "transformed_text": "Sort a list by the second element of each sublist.", "transformed_code": "sorted_list = sorted(sub_li, key=lambda x: x[1])"}
{"original_text": "Write a python function to check whether the triangle is valid or not if sides are given.", "original_code": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ", "transformed_text": "Check if triangle sides are valid.", "transformed_code": "check_Validity = lambda a, b, c: not (a + b <= c or a + c <= b or b + c <= a)"}
{"original_text": "Write a function to find the sum of arithmetic progression.", "original_code": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total", "transformed_text": "Find the sum of an arithmetic progression.", "transformed_code": "ap_sum = lambda a,n,d: (n * (2 * a + (n - 1) * d)) / 2"}
{"original_text": "Write a function to check whether the given month name contains 28 days or not.", "original_code": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False", "transformed_text": "Check if the month is February for 28 days.", "transformed_code": "check_monthnum = lambda month: month == 'February'"}
{"original_text": "Write a function that matches a word at the end of a string, with optional punctuation.", "original_code": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'", "transformed_text": "Match a word at the end of a string with punctuation.", "transformed_code": "import re; text_match_word = lambda text: 'Found a match!' if re.search('\\w+\\S*$', text) else 'Not matched!'"}
{"original_text": "Write a python function to count the number of substrings with same first and last characters.", "original_code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ", "transformed_text": "Count substrings where first and last characters are the same.", "transformed_code": "count_substrings = lambda s: sum(1 for i in range(len(s)) for j in range(1, len(s) - i + 1) if s[i] == s[i + j - 1])"}
{"original_text": "Write a python function to find the maximum occuring divisor in an interval.", "original_code": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2", "transformed_text": "Find maximum divisor in a range.", "transformed_code": "find_Divisor = lambda x, y: y if x == y else 2"}
{"original_text": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.", "original_code": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])", "transformed_text": "Find the sum of the three smallest positive numbers in a list.", "transformed_code": "sum_three_smallest_nums = lambda lst: sum(sorted(x for x in lst if x > 0)[:3])"}
{"original_text": "Write a function to convert the given set into ordered tuples.", "original_code": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)", "transformed_text": "Convert a set into ordered tuples.", "transformed_code": "set_to_tuple = lambda s: tuple(sorted(s))"}
{"original_text": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "original_code": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])", "transformed_text": "Find the smallest range including elements from all arrays.", "transformed_code": "from heapq import heappop, heappush\nfind_minimum_range = lambda l: (lambda p, pq, high: (lambda: (lambda: (high, low, j, i, d): p if j == len(l[i]) - 1 else (heappush(pq, Node(l[i][j + 1], i, j + 1)), high := max(high, l[i][j + 1]), (low, high)))(heappop(pq).value, heappop(pq).list_num, heappop(pq).index) for _ in iter(int, 1))())(p, pq, [heappush(pq, Node(l[i][0], i, 0)) for i in range(len(l))], high) if high == max(high, l[i][0]) for i in range(len(l)))(-float('inf'), (0, float('inf')), [], -float('inf'))"}
{"original_text": "Write a function to calculate the number of digits and letters in a string.", "original_code": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)", "transformed_text": "Count digits and letters in a string.", "transformed_code": "dig_let = lambda s: (sum(c.isalpha() for c in s), sum(c.isdigit() for c in s))"}
{"original_text": "Write a python function to find number of elements with odd factors in a given range.", "original_code": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ", "transformed_text": "Find elements with odd factors in a range.", "transformed_code": "count_Odd_Squares=lambda n,m:int(m**0.5)-int((n-1)**0.5)"}
{"original_text": "Write a function to find the difference between two consecutive numbers in a given list.", "original_code": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "transformed_text": "Find the difference between consecutive numbers in a list.", "transformed_code": "diff_consecutivenums = lambda nums: [b-a for a, b in zip(nums[:-1], nums[1:])]"}
{"original_text": "Write a function to find entringer number e(n, k).", "original_code": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)", "transformed_text": "Find the entringer number e(n, k).", "transformed_code": "zigzag=lambda n,k:1if(n==0and k==0)else 0if k==0else zigzag(n,k-1)+zigzag(n-1,n-k)"}
{"original_text": "Write a python function to count the number of squares in a rectangle.", "original_code": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6", "transformed_text": "Count squares in a rectangle.", "transformed_code": "count_Squares = lambda m, n: (n * (n + 1) * (3 * max(m, n) - n + 1)) // 6)"}
{"original_text": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "original_code": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ", "transformed_text": "Count sequences with non-negative prefix sums from given values.", "transformed_code": "bin_coff = lambda n, r: (val := 1, r := r if r <= (n - r) else n - r, [val := val * (n - i) // (i + 1) for i in range(r)], val)[-1]; find_ways = lambda M: (n := M // 2, a := bin_coff(2 * n, n), b := a // (n + 1), b)[-1]"}
{"original_text": "Write a python function to check whether the given string is a binary string or not.", "original_code": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ", "transformed_text": "Create a function to verify if a string is binary.", "transformed_code": "check = lambda s: 'Yes' if set(s) <= {'0', '1'} else 'No'"}
{"original_text": "Write a python function to minimize the length of the string by removing occurrence of only one character.", "original_code": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ", "transformed_text": "Reduce string length by removing one character.", "transformed_code": "minimum_Length = lambda s: len(s) - max([s.count(c) for c in set(s)])"}
{"original_text": "Write a python function to find the first element occurring k times in a given array.", "original_code": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1", "transformed_text": "Find the first element that appears k times in an array.", "transformed_code": "first_Element = lambda arr, n, k: next((x for x in arr if arr.count(x) == k), -1)"}
{"original_text": "Write a python function to check whether all the characters in a given string are unique.", "original_code": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;", "transformed_text": "Check if all characters in a string are unique", "transformed_code": "unique_Characters = lambda s: len(s) == len(set(s))"}
{"original_text": "Write a function to remove a specified column from a given nested list.", "original_code": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1", "transformed_text": "Remove a column from a nested list.", "transformed_code": "remove_column = lambda list1, n: [row[:n] + row[n+1:] for row in list1]"}
{"original_text": "Write a function to find t-nth term of arithemetic progression.", "original_code": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn", "transformed_text": "Find the t-nth term of an arithmetic progression.", "transformed_code": "tn_ap = lambda a, n, d: a + (n - 1) * d"}
{"original_text": "Write a python function to count the number of rectangles in a circle of radius r.", "original_code": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ", "transformed_text": "Count rectangles in a circle with radius r.", "transformed_code": "count_Rectangles = lambda r: sum(1 for a in range(1, 2 * r) for b in range(1, 2 * r) if a * a + b * b <= (2 * r) ** 2)"}
{"original_text": "Write a function to find the third angle of a triangle using two angles.", "original_code": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n", "transformed_text": "Find the third angle of a triangle with two angles.", "transformed_code": "find_angle = lambda a, b: 180 - (a + b)"}
{"original_text": "Write a function to find the maximum element of all the given tuple records.", "original_code": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ", "transformed_text": "Find the maximum in a tuple of records.", "transformed_code": "find_max = lambda test_list: max(int(j) for i in test_list for j in i)"}
{"original_text": "Write a function to find modulo division of two lists using map and lambda function.", "original_code": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)", "transformed_text": "Find modulo of two lists using map and lambda.", "transformed_code": "moddiv_list = lambda nums1, nums2: list(map(lambda x, y: x % y, nums1, nums2))"}
{"original_text": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.", "original_code": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "transformed_text": "Check if one root of a quadratic equation is double the other.", "transformed_code": "Check_Solution = lambda a,b,c: \"Yes\" if 2*b*b == 9*a*c else \"No\""}
{"original_text": "Write a function to find the n\u2019th carol number.", "original_code": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2", "transformed_text": "Find the nth carol number.", "transformed_code": "get_carol = lambda n: ((2**n) - 1) ** 2 - 2"}
{"original_text": "Write a function to remove empty lists from a given list of lists.", "original_code": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty", "transformed_text": "Remove empty lists from a list of lists.", "transformed_code": "remove_empty = lambda list1: [x for x in list1 if x]"}
{"original_text": "Write a python function to find the item with maximum occurrences in a given list.", "original_code": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "transformed_text": "Find the item that appears most in a list.", "transformed_code": "max_occurrences = lambda nums: max(set(nums), key=nums.count)"}
{"original_text": "Write a function to add the k elements to each element in the tuple.", "original_code": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ", "transformed_text": "Add K to each element in a tuple.", "transformed_code": "add_K_element = lambda test_list, K: [tuple(j + K for j in sub) for sub in test_list]"}
{"original_text": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "original_code": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ", "transformed_text": "Determine flips needed for alternating binary string.", "transformed_code": "make_flip = lambda ch: '1' if ch == '0' else '0'; get_flip_with_starting_char = lambda s, e: sum(s[i] != e for i in range(len(s))) + (e := make_flip(e)); min_flip_to_make_string_alternate = lambda s: min(get_flip_with_starting_char(s, '0'), get_flip_with_starting_char(s, '1'))"}
{"original_text": "Write a python function to count the number of digits of a given number.", "original_code": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count", "transformed_text": "Count the digits of a number.", "transformed_code": "count_Digit = lambda n: len(str(n)) if n else 0"}
{"original_text": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.", "original_code": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "transformed_text": "Find the largest product of adjacent numbers in a list.", "transformed_code": "adjacent_num_product=lambda nums:max(a*b for a,b in zip(nums, nums[1:]))"}
{"original_text": "Write a function to check if a binary tree is balanced or not.", "original_code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False", "transformed_text": "Check if a binary tree is balanced.", "transformed_code": "get_height = lambda root: 0 if root is None else max(get_height(root.left), get_height(root.right)) + 1\nis_tree_balanced = lambda root: True if root is None else abs(get_height(root.left) - get_height(root.right)) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right)"}
{"original_text": "Write a function to repeat the given tuple n times.", "original_code": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ", "transformed_text": "Create a function that repeats a tuple n times.", "transformed_code": "repeat_tuples = lambda test_tup, N: (test_tup,) * N"}
{"original_text": "Write a function to find the lateral surface area of cuboid", "original_code": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA", "transformed_text": "Find lateral surface area of a cuboid", "transformed_code": "lateralsurface_cuboid = lambda l, w, h: 2 * h * (l + w)"}
{"original_text": "Write a function to sort a tuple by its float element.", "original_code": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort", "transformed_text": "Sort a tuple by its float element.", "transformed_code": "lambda price: sorted(price, key=lambda x: float(x[1]), reverse=True)"}
{"original_text": "Write a function to find the smallest missing element in a sorted array.", "original_code": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)", "transformed_text": "Find the smallest missing element in a sorted array.", "transformed_code": "smallest_missing = lambda A, left, right: left if left > right else smallest_missing(A, (left + (right - left) // 2) + 1, right) if A[left + (right - left) // 2] == left + (right - left) // 2 else smallest_missing(A, left, (left + (right - left) // 2) - 1)"}
{"original_text": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "original_code": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result", "transformed_text": "Sort a list of elements in ascending order using heap queue.", "transformed_code": "import heapq as hq; heap_assending = lambda nums: [hq.heappop(nums) for _ in range(len(nums))] and hq.heapify(nums)"}
{"original_text": "Write a function to find the volume of a cuboid.", "original_code": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume", "transformed_text": "Find the volume of a cuboid.", "transformed_code": "volume_cuboid = lambda l,w,h: l*w*h"}
{"original_text": "Write a function to print all permutations of a given string including duplicates.", "original_code": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list", "transformed_text": "Print all permutations of a string with duplicates.", "transformed_code": "permute_string = lambda s: [''] if len(s) == 0 else [s[j:j+1] + p for p in permute_string(s[1:]) for j in range(len(s))]"}
{"original_text": "Write a function to round the given number to the nearest multiple of a specific number.", "original_code": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)", "transformed_text": "Round a number to the nearest multiple of another number.", "transformed_code": "round_num = lambda n,m: (n // m) * m + (m if n - (n // m) * m > (n // m) * m + m - n else 0)"}
{"original_text": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "original_code": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)", "transformed_text": "Remove duplicate tuple elements and replace them with a custom value.", "transformed_code": "remove_replica = lambda t: tuple(ele if ele not in (s:=set()) and not s.add(ele) else 'MSP' for ele in t)"}
{"original_text": "Write a python function to remove all occurrences of a character in a given string.", "original_code": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ", "transformed_text": "Remove all instances of a character from a string.", "transformed_code": "remove_Char = lambda s, c: ''.join([x for x in s if x != c])"}
{"original_text": "Write a python function to shift last element to first position in the given list.", "original_code": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list", "transformed_text": "Move the last element of the list to the front.", "transformed_code": "move_first = lambda lst: [lst[-1]] + lst[:-1]"}
{"original_text": "Write a function to find the surface area of a cuboid.", "original_code": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA", "transformed_text": "Calculate surface area of a cuboid.", "transformed_code": "surfacearea_cuboid = lambda l, w, h: 2 * (l * w + l * h + w * h)"}
{"original_text": "Write a function to generate a two-dimensional array.", "original_code": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n", "transformed_text": "Generate a two-dimensional array.", "transformed_code": "multi_list = lambda rownum, colnum: [[row * col for col in range(colnum)] for row in range(rownum)]"}
{"original_text": "Write a function to sort a list of lists by a given index of the inner list.", "original_code": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result", "transformed_text": "Sort a list of lists by an index.", "transformed_code": "from operator import itemgetter; index_on_inner_list = lambda list_data, index_no: sorted(list_data, key=itemgetter(index_no))"}
{"original_text": "Write a function to find the number of rotations in a circularly sorted array.", "original_code": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1", "transformed_text": "Find the number of rotations in a circularly sorted array.", "transformed_code": "find_rotation_count = lambda A: ((left, right) := (0, len(A) - 1), (left <= right and (A[left] <= A[right] and left or (mid := (left + right) // 2, next := (mid + 1) % len(A), prev := (mid - 1 + len(A)) % len(A), (A[mid] <= A[next] and A[mid] <= A[prev] and mid or (A[mid] <= A[right] and (right := mid - 1) or (A[mid] >= A[left] and (left := mid + 1))))))))) or -1"}
{"original_text": "Write a python function to toggle all odd bits of a given number.", "original_code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "transformed_text": "Toggle odd bits of a number.", "transformed_code": "toggle_odd_bits = lambda n: n ^ sum((1 << i) for i in range(n.bit_length()) if i % 2 == 1)"}
{"original_text": "Write a python function to find the frequency of the smallest value in a given array.", "original_code": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "transformed_text": "Find frequency of the smallest value in an array.", "transformed_code": "frequency_Of_Smallest = lambda n, arr: sum(1 for x in arr if x == min(arr))"}
{"original_text": "Write a function to find the n'th perrin number using recursion.", "original_code": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)", "transformed_text": "Find the n'th perrin number using recursion", "transformed_code": "get_perrin = lambda n: 3 if n == 0 else 0 if n == 1 else 2 if n == 2 else get_perrin(n - 2) + get_perrin(n - 3)"}
{"original_text": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "original_code": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap", "transformed_text": "Find minimum swaps for balancing brackets in a string.", "transformed_code": "swap_count = lambda s: sum(max(0, (c := (s.count('['), s.count(']'))[0] - s.count(']')) + (s[:i].count('[') - (s[:i].count(']') if s[i] == ']' else 0)) - c) for i in range(len(s)))"}
{"original_text": "Write a python function to check whether the hexadecimal number is even or odd.", "original_code": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ", "transformed_text": "Check if a hexadecimal number is even or odd.", "transformed_code": "even_or_odd = lambda N: \"Even\" if N[-1] in '02468ACE' else \"Odd\""}
{"original_text": "Write a python function to find the highest power of 2 that is less than or equal to n.", "original_code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ", "transformed_text": "Find the largest power of 2 less than or equal to n.", "transformed_code": "highest_Power_of_2 = lambda n: max(i for i in range(n + 1) if (i & (i - 1)) == 0)"}
{"original_text": "Write a function to find the n'th lucas number.", "original_code": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "transformed_text": "Find the n'th lucas number.", "transformed_code": "find_lucas = lambda n: 2 if n == 0 else 1 if n == 1 else find_lucas(n - 1) + find_lucas(n - 2)"}
{"original_text": "Write a function to insert a given string at the beginning of all items in a list.", "original_code": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string", "transformed_text": "Insert a string at the start of each list item.", "transformed_code": "add_string = lambda lst, s: [s + i for i in lst]"}
{"original_text": "Write a function to convert more than one list to nested dictionary.", "original_code": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result", "transformed_text": "Convert multiple lists into a nested dictionary.", "transformed_code": "convert = lambda l1, l2, l3: [{x: {y: z}} for x, y, z in zip(l1, l2, l3)]"}
{"original_text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "original_code": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]", "transformed_text": "Find maximum sum using the function f(n) = max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n).", "transformed_code": "get_max_sum = lambda n: (lambda res: [res.append(0), res.append(1), [res.append(max(i, (res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5]))), i := i + 1][0] for i in range(2, n + 1)], res[n]])(list())"}
{"original_text": "Write a function to find the list with maximum length using lambda function.", "original_code": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)", "transformed_text": "Find the longest list from a collection.", "transformed_code": "max_length_list = lambda input_list: (max(len(x) for x in input_list), max(input_list, key=len))"}
{"original_text": "Write a function to check if given tuple is distinct or not.", "original_code": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ", "transformed_text": "Check if tuple contains distinct elements.", "transformed_code": "check_distinct = lambda t: len(t) == len(set(t))"}
{"original_text": "Write a python function to find the first non-repeated character in a given string.", "original_code": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None", "transformed_text": "Find the first non-repeated character in a string.", "transformed_code": "first_non_repeating_character = lambda s: next((c for c in s if s.count(c) == 1), None)"}
{"original_text": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "original_code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ", "transformed_text": "Check if a string starts and ends with the same character using regex.", "transformed_code": "import re\ncheck_char = lambda s: 'Valid' if re.search(r'^[a-z]$|^([a-z]).*\\1$', s) else 'Invalid'"}
{"original_text": "Write a function to find the median of three specific numbers.", "original_code": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median", "transformed_text": "Find the median of three numbers.", "transformed_code": "median_numbers = lambda a,b,c: (a if (b<a<c) or (c<a<b) else b if (a<b<c) or (c<b<a) else c)"}
{"original_text": "Write a function to compute the sum of digits of each number of a given list.", "original_code": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "transformed_text": "Compute the sum of digits in a list.", "transformed_code": "sum_of_digits = lambda nums: sum(int(el) for n in nums for el in str(n) if el.isdigit())"}
{"original_text": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "original_code": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "transformed_text": "Perform bitwise xor on two tuples.", "transformed_code": "bitwise_xor = lambda t1, t2: tuple(a ^ b for a, b in zip(t1, t2))"}
{"original_text": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "original_code": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)", "transformed_text": "Get frequency of unique tuples from the list.", "transformed_code": "extract_freq = lambda lst: len(set(tuple(sorted(x)) for x in lst))"}
{"original_text": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "original_code": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "transformed_text": "Perform index-wise addition of elements in two nested tuples.", "transformed_code": "add_nested_tuples = lambda t1, t2: tuple(tuple(a + b for a, b in zip(x, y)) for x, y in zip(t1, t2))"}
{"original_text": "Write a function to compute the value of ncr%p.", "original_code": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ", "transformed_text": "Compute n choose r modulo p.", "transformed_code": "ncr_modp = lambda n, r, p: (lambda C: [1] + [((C[j] := (C[j] + C[j-1]) % p) if j > 0 else C[j]) for j in range(r+1) for i in range(1, n+1)])[-1])( [0] * (r + 1))"}
{"original_text": "Write a function to check if a url is valid or not using regex.", "original_code": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False", "transformed_text": "Check if a URL is valid using regex.", "transformed_code": "import re; is_valid_URL = lambda url: bool(re.search(r'((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)', url)) if url else False"}
{"original_text": "Write a python function to find the minimum of two numbers.", "original_code": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ", "transformed_text": "Find the minimum of two numbers.", "transformed_code": "minimum = lambda a, b: a if a <= b else b"}
{"original_text": "Write a function to check whether an element exists within a tuple.", "original_code": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False", "transformed_text": "Create a function to check element existence in a tuple.", "transformed_code": "check_tuplex = lambda tuplex, tuple1: tuple1 in tuplex"}
{"original_text": "Write a python function to find the parity of a given number.", "original_code": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ", "transformed_text": "Find the parity of a number.", "transformed_code": "find_parity = lambda x: 'Odd Parity' if x & 1 else 'Even Parity'"}
{"original_text": "Write a function to create the next bigger number by rearranging the digits of a given number.", "original_code": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False", "transformed_text": "Make the next bigger number by rearranging given digits.", "transformed_code": "rearrange_bigger = lambda n: int(''.join([y] + sorted(z)) if (z := list(str(n)))[(i := next(i for i in range(len(z)-2,-1,-1) if z[i] < z[i+1])):]) and (y := min(filter(lambda x: x > z[i], z[i:]))) and (z.remove(y)) else False)"}
{"original_text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "original_code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs", "transformed_text": "Find k pairs from two arrays.", "transformed_code": "import heapq\nk_smallest_pairs=lambda n1,n2,k:((lambda q, p: (lambda f: (p.append((n1[i], n2[j])) or f(i,j+1) or (p.append((n1[i+1],n2[0])) if j==0 else None) for _ in range(k)))(*(heapq.heappop(q) for _ in range(len(q))) if len(q)>0 else (None,None))) if p else []))([],[])(lambda i,j: (q:=heapq.heappush(q,[n1[i]+n2[j],i,j])) if i<len(n1) and j<len(n2) else None)(0,0)"}
{"original_text": "Write a function to find the minimum product from the pairs of tuples within a given list.", "original_code": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min", "transformed_text": "Find the minimum product of tuples in a list.", "transformed_code": "min_product_tuple = lambda list1: min(abs(x * y) for x, y in list1)"}
{"original_text": "Write a function to find the minimum value in a given heterogeneous list.", "original_code": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val", "transformed_text": "Find the minimum in a list of mixed values.", "transformed_code": "min_val = lambda lv: min(i for i in lv if isinstance(i, int))"}
{"original_text": "Write a function to convert the given snake case string to camel case string by using regex.", "original_code": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "transformed_text": "Convert snake case to camel case using regex.", "transformed_code": "import re; snake_to_camel = lambda word: ''.join(x.capitalize() or '_' for x in word.split('_'))"}
{"original_text": "Write a python function to remove odd numbers from a given list.", "original_code": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l", "transformed_text": "Remove odd numbers from a list.", "transformed_code": "remove_odd = lambda l: [x for x in l if x % 2 == 0]"}
{"original_text": "Write a function to extract the nth element from a given list of tuples.", "original_code": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result", "transformed_text": "Extract the nth element from a list of tuples.", "transformed_code": "extract_nth_element = lambda list1, n: [x[n] for x in list1]"}
{"original_text": "Write a python function to check whether the value exists in a sequence or not.", "original_code": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0", "transformed_text": "Check if a value exists in a sequence.", "transformed_code": "overlapping = lambda list1, list2: any(x in list2 for x in list1)"}
{"original_text": "Write a python function to find a pair with highest product from a given array of integers.", "original_code": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ", "transformed_text": "Find pairs in an array with the highest product.", "transformed_code": "max_Product = lambda arr: (max((arr[i], arr[j]) for i in range(len(arr)) for j in range(i + 1, len(arr))),) if len(arr) > 1 else 'No pairs exists')"}
{"original_text": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "original_code": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]", "transformed_text": "Find maximum sum by recursively dividing a number into three parts.", "transformed_code": "MAX=1000000; breakSum=lambda n: (lambda dp: [0]*(n+1) or dp[0:=0] or dp[1:=1] or [dp.__setitem__(i,max(dp[int(i/2)]+dp[int(i/3)]+dp[int(i/4)],i)) for i in range(2,n+1)]) and dp[n])(dp=[0]*(n+1))"}
{"original_text": "Write a function to find common first element in given list of tuple.", "original_code": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ", "transformed_text": "Find common first elements in a list of tuples.", "transformed_code": "group_tuples = lambda Input: [tuple(values) for values in {elem[0]: out[elem[0]].extend(elem[1:]) if elem[0] in out else out.setdefault(elem[0], list(elem)) for elem in Input}.values()]"}
{"original_text": "Write a python function to find the sublist having maximum length.", "original_code": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList", "transformed_text": "Find the longest sublist in a list", "transformed_code": "Find_Max = lambda lst: max(lst, key=len)"}
{"original_text": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "original_code": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum", "transformed_text": "Round numbers in a list and multiply the sum by the list's length.", "transformed_code": "round_and_sum=lambda lst:sum(map(round,lst))*len(lst)"}
{"original_text": "Write a python function to find the cube sum of first n even natural numbers.", "original_code": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum", "transformed_text": "Find the cube sum of the first n even numbers.", "transformed_code": "cube_sum = lambda n: sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"original_text": "Write a function to concatenate each element of tuple by the delimiter.", "original_code": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ", "transformed_text": "Concatenate tuple elements using a delimiter.", "transformed_code": "concatenate_tuple = lambda t: '-'.join(map(str, t))"}
{"original_text": "Write a python function to find the average of cubes of first n natural numbers.", "original_code": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ", "transformed_text": "Calculate the average of cubes for the first n natural numbers.", "transformed_code": "find_average_of_cube = lambda n: round(sum(i**3 for i in range(1, n + 1)) / n, 6)"}
{"original_text": "Write a function to solve gold mine problem.", "original_code": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ", "transformed_text": "Write function to solve gold mine problem", "transformed_code": "get_maxgold = lambda gold, m, n: (lambda goldTable: (max(goldTable[row][col] := gold[row][col] + max(goldTable[row][col+1] if col < n-1 else 0, goldTable[row-1][col+1] if row > 0 and col < n-1 else 0, goldTable[row+1][col+1] if row < m-1 and col < n-1 else 0) for row in range(m) for col in range(n-1, -1, -1)), max(goldTable[i][0] for i in range(m))))([[0] * n for _ in range(m)])"}
{"original_text": "Write a function to extract only the rear index element of each string in the given tuple.", "original_code": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ", "transformed_text": "Extract the last character from each string in the tuple.", "transformed_code": "extract_rear = lambda t: [s[-1] for s in t]"}
{"original_text": "Write a function to count the number of sublists containing a particular element.", "original_code": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr", "transformed_text": "Count sublists containing a specific element.", "transformed_code": "count_element_in_list = lambda list1, x: sum(1 for i in list1 if x in i)"}
{"original_text": "Write a function to filter odd numbers using lambda function.", "original_code": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums", "transformed_text": "Filter odd numbers using a lambda.", "transformed_code": "odd_nums = list(filter(lambda x: x%2 != 0, nums))"}
{"original_text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "original_code": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "transformed_text": "Convert date from yyyy-mm-dd to dd-mm-yyyy using regex.", "transformed_code": "import re; change_date_format = lambda dt: re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"}
{"original_text": "Write a function to sort the given array by using shell sort.", "original_code": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list", "transformed_text": "Sort the array using shell sort.", "transformed_code": "shell_sort = lambda my_list: (lambda g: (my_list := my_list[:], [(my_list := (lambda: (my_list[j := j - g] := my_list[j - g], my_list[j] := current_item) or my_list[j])(my_list[i], j := i)[-1] for j in range(g, len(my_list))], [g //= 2 for g in [len(my_list) // 2]])[-1]))(g))(my_list), my_list"}
{"original_text": "Write a function to extract the elementwise and tuples from the given two tuples.", "original_code": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "transformed_text": "Extract elementwise tuples from two input tuples.", "transformed_code": "and_tuples = lambda t1, t2: tuple(a & b for a, b in zip(t1, t2))"}
{"original_text": "Write a function to find the directrix of a parabola.", "original_code": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix", "transformed_text": "Find the directrix of a parabola.", "transformed_code": "parabola_directrix = lambda a, b, c: c - (b * b + 1) * 4 * a"}
{"original_text": "Write a function that takes two lists and returns true if they have at least one common element.", "original_code": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result", "transformed_text": "Return true if two lists have a common element.", "transformed_code": "common_element = lambda list1, list2: any(x in list2 for x in list1)"}
{"original_text": "Write a function to find the median of a trapezium.", "original_code": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median", "transformed_text": "Find the median of a trapezium.", "transformed_code": "median_trapezium = lambda base1, base2: 0.5 * (base1 + base2)"}
{"original_text": "Write a function to check whether the entered number is greater than the elements of the given array.", "original_code": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')", "transformed_text": "Check if the number is greater than the array elements.", "transformed_code": "check_greater = lambda arr, number: 'Yes' if number > max(arr) else 'No'"}
{"original_text": "Write a function that matches a string that has an a followed by one or more b's.", "original_code": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n", "transformed_text": "Create a function to find patterns in a string.", "transformed_code": "import re\ntext_match_one = lambda text: 'Found a match!' if re.search('ab+', text) else 'Not matched!'"}
{"original_text": "Write a python function to find the last digit of a given number.", "original_code": "def last_Digit(n) :\r\n    return (n % 10) ", "transformed_text": "Find the last digit of a number.", "transformed_code": "last_Digit = lambda n: n % 10"}
{"original_text": "Write a python function to print negative numbers in a list.", "original_code": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ", "transformed_text": "Print negative numbers from a list.", "transformed_code": "lambda list1: [num for num in list1 if num < 0]"}
{"original_text": "Write a function to remove odd characters in a string.", "original_code": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2", "transformed_text": "Remove odd characters from a string.", "transformed_code": "remove_odd = lambda s: ''.join(s[i] for i in range(len(s)) if i % 2 == 1)"}
{"original_text": "Write a function to count bidirectional tuple pairs.", "original_code": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ", "transformed_text": "Count pairs of bidirectional tuples.", "transformed_code": "count_bidirectional = lambda test_list: sum(1 for idx in range(len(test_list)) for iidx in range(idx + 1, len(test_list)) if test_list[iidx][0] == test_list[idx][1] == test_list[iidx][1])"}
{"original_text": "Write a function to convert a list of multiple integers into a single integer.", "original_code": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x", "transformed_text": "Convert a list of integers to a single integer.", "transformed_code": "multiple_to_single = lambda L: int(''.join(map(str, L)))"}
{"original_text": "Write a function to find all adverbs and their positions in a given sentence.", "original_code": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))", "transformed_text": "Find adverbs and their positions in a sentence.", "transformed_code": "find_adverb_position = lambda text: [(m.start(), m.end(), m.group(0)) for m in re.finditer(r'\\w+ly', text)]"}
{"original_text": "Write a function to find the surface area of a cube.", "original_code": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea", "transformed_text": "Find the surface area of a cube.", "transformed_code": "surfacearea_cube = lambda l: 6*l*l"}
{"original_text": "Write a function to find the ration of positive numbers in an array of integers.", "original_code": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "transformed_text": "Find the ratio of positive numbers in an integer array.", "transformed_code": "positive_count = lambda nums: round(sum(1 for x in nums if x > 0) / len(nums), 2)"}
{"original_text": "Write a python function to find the largest negative number from the given list.", "original_code": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max", "transformed_text": "Find the largest negative number in a list.", "transformed_code": "largest_neg = lambda lst: max(x for x in lst if x < 0)"}
{"original_text": "Write a function to trim each tuple by k in the given tuple list.", "original_code": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ", "transformed_text": "Trim each tuple in the list by k.", "transformed_code": "trim_tuple = lambda test_list, K: [tuple(ele[K:len(ele)-K]) for ele in test_list]"}
{"original_text": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "original_code": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "transformed_text": "Perform element-wise multiplication of two tuples.", "transformed_code": "index_multiplication = lambda t1, t2: tuple(tuple(a * b for a, b in zip(x, y)) for x, y in zip(t1, t2))"}
{"original_text": "Write a python function to count the occurence of all elements of list in a tuple.", "original_code": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ", "transformed_text": "Count occurrences of list elements in a tuple.", "transformed_code": "from collections import Counter; count_Occurrence = lambda tup, lst: sum(item in lst for item in tup)"}
{"original_text": "Write a function to find cubes of individual elements in a list using lambda function.", "original_code": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums", "transformed_text": "Find cubes of elements in a list using lambda.", "transformed_code": "cube_nums = lambda nums: list(map(lambda x: x ** 3, nums))"}
{"original_text": "Write a function to calculate the sum of perrin numbers.", "original_code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum", "transformed_text": "Calculate the sum of Perrin numbers.", "transformed_code": "cal_sum = lambda n: (3 if n == 0 else 3 if n == 1 else 5 if n == 2 else sum(3 + (lambda a, b, c, n: sum((a := b, b := c, c := a + b)[2] for _ in range(n - 2)))(3, 0, 2, n)))"}
{"original_text": "Write a python function to check whether the triangle is valid or not if 3 points are given.", "original_code": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ", "transformed_text": "Check if three points form a valid triangle", "transformed_code": "check_Triangle=lambda x1,y1,x2,y2,x3,y3: 'No' if (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))==0 else 'Yes'"}
{"original_text": "Write a function to extract specified size of strings from a give list of string values.", "original_code": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result", "transformed_text": "Extract strings of specific length from a list.", "transformed_code": "extract_string = lambda str, l: [e for e in str if len(e) == l]"}
{"original_text": "Write a function to remove all whitespaces from the given string using regex.", "original_code": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))", "transformed_text": "Remove all whitespace from a string using regex.", "transformed_code": "import re; remove_whitespaces = lambda text1: re.sub(r'\\s+', '', text1)"}
{"original_text": "Write a function that gives loss amount if the given amount has loss else return none.", "original_code": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None", "transformed_text": "Get loss amount if sale is less than cost.", "transformed_code": "loss_amount = lambda actual_cost, sale_amount: (sale_amount - actual_cost) if sale_amount > actual_cost else None"}
{"original_text": "Write a python function to find the sum of even factors of a number.", "original_code": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ", "transformed_text": "Find the sum of even number factors.", "transformed_code": "import math; sumofFactors = lambda n: (0 if n % 2 else reduce(lambda r, i: r * (1 + (1 + n) if n >= 2 else 1), (curr_sum:=1, curr_term:=1) if (count:=0) or all(n := n // i for i in range(2, int(math.sqrt(n)) + 1) if n % i == 0 and (count := count + 1) and (curr_sum := (0 if i == 2 and count == 1 else curr_sum + (curr_term := curr_term * i))))))"}
{"original_text": "Write a function that matches a word containing 'z'.", "original_code": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "transformed_text": "Find a word containing 'z'.", "transformed_code": "import re; text_match_wordz = lambda text: 'Found a match!' if re.search('\\w*z.\\w*', text) else 'Not matched!'"}
{"original_text": "Write a function to check whether the given month number contains 31 days or not.", "original_code": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False", "transformed_text": "Check if a month has 31 days.", "transformed_code": "check_days = lambda month: month in [1, 3, 5, 7, 8, 10, 12]"}
{"original_text": "Write a function to reverse strings in a given list of string values.", "original_code": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result", "transformed_text": "Create a function to reverse a list of strings.", "transformed_code": "reverse_string_list=lambda lst:[x[::-1]for x in lst]"}
{"original_text": "Write a python function to find the sublist having minimum length.", "original_code": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList", "transformed_text": "Find sublist with minimum length.", "transformed_code": "Find_Min = lambda lst: min(lst)"}
{"original_text": "Write a function to find the area of a rectangle.", "original_code": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area", "transformed_text": "Calculate the rectangle's area.", "transformed_code": "rectangle_area=lambda l,b: l*b"}
{"original_text": "Write a function to remove uppercase substrings from a given string by using regex.", "original_code": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)", "transformed_text": "Remove uppercase substrings from a string using regex.", "transformed_code": "import re; remove_uppercase = lambda s: re.sub('[A-Z]', '', s)"}
{"original_text": "Write a python function to get the first element of each sublist.", "original_code": "def Extract(lst): \r\n    return [item[0] for item in lst] ", "transformed_text": "Get the first element from each sublist.", "transformed_code": "Extract = lambda lst: [item[0] for item in lst]"}
{"original_text": "Write a python function to count the upper case characters in a given string.", "original_code": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr", "transformed_text": "Count upper case characters in a string.", "transformed_code": "upper_ctr = lambda s: sum(1 for c in s if 'A' <= c <= 'Z')"}
{"original_text": "Write a function to find all possible combinations of the elements of a given list.", "original_code": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result", "transformed_text": "Find all combinations from a list.", "transformed_code": "combinations_list = lambda lst: [[]] if not lst else combinations_list(lst[1:]) + [el for el in combinations_list(lst[1:])] + [[lst[0]] + el for el in combinations_list(lst[1:])]"}
{"original_text": "Write a function to find the maximum product subarray of the given array.", "original_code": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far", "transformed_text": "Find the maximum product from the subarray.", "transformed_code": "max_subarray_product = lambda arr: (lambda n, m, i, f: (m := max(m, (m := m * arr[i]) if arr[i] > 0 else 1 if arr[i] == 0 else (m, m := f * arr[i] if (f := m) >= 0 else 1), f := 1 if arr[i] > 0 else f)(i := i + 1) and i < n) or (0 if not f and not m else m))(len(arr), 0, 0, 0)"}
{"original_text": "Write a function to check if all values are same in a dictionary.", "original_code": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result", "transformed_text": "Check if all dictionary values are the same.", "transformed_code": "check_value = lambda d, n: all(x == n for x in d.values())"}
{"original_text": "Write a function to drop empty items from a given dictionary.", "original_code": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1", "transformed_text": "Remove empty items from a dictionary.", "transformed_code": "drop_empty = lambda d: {k: v for k, v in d.items() if v is not None}"}
{"original_text": "Write a function to find the peak element in the given array.", "original_code": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ", "transformed_text": "Find the peak element in an array.", "transformed_code": "find_peak = lambda arr, n: (lambda f, low, high: f(f, low, high))(lambda self, low, high: ((mid := low + (high - low) // 2), mid)[0], (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]) and mid or (mid > 0 and arr[mid - 1] > arr[mid] and self(self, low, mid - 1) or self(self, mid + 1, high)))(arr, 0, n - 1))"}
{"original_text": "Write a python function to convert decimal number to octal number.", "original_code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)", "transformed_text": "Convert decimal to octal.", "transformed_code": "decimal_to_Octal = lambda deciNum: (lambda octalNum, countval: (lambda f: f(f, deciNum))(lambda f, n: (n==0 and octalNum or f(f, n//8, octalNum + (n % 8) * countval, countval * 10))))(0, 1))()"}
{"original_text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "original_code": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)", "transformed_text": "Find the maximum product of an increasing subsequence in an array.", "transformed_code": "max_product = lambda arr, n: max(arr[i] if i == 0 else max(arr[j] * arr[i] for j in range(i) if arr[i] > arr[j]) for i in range(n))"}
{"original_text": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "original_code": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]", "transformed_text": "Find maximum profit from k stock transactions.", "transformed_code": "max_profit=lambda price,k:([[0 if i==0 or j==0 else max(max(final_profit[i][j-1], max(price[j]-price[x]+final_profit[i-1][x] for x in range(j))) for j in range(len(price))) for i in range(k+1)] for j in range(len(price)))])"}
{"original_text": "Write a function to find the pairwise addition of the elements of the given tuples.", "original_code": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "transformed_text": "Find pairwise addition of elements in tuples.", "transformed_code": "add_pairwise = lambda t: tuple(i + j for i, j in zip(t, t[1:]))"}
{"original_text": "Write a python function to find remainder of array multiplication divided by n.", "original_code": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ", "transformed_text": "Find remainder of product of array divided by n.", "transformed_code": "find_remainder = lambda arr, lens, n: reduce(lambda mul, x: (mul * (x % n)) % n, arr, 1) % n"}
{"original_text": "Write a python function to check whether the given list contains consecutive numbers or not.", "original_code": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ", "transformed_text": "Check if the list has consecutive numbers", "transformed_code": "check_Consecutive = lambda l: sorted(l) == list(range(min(l), max(l)+1))"}
{"original_text": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "original_code": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)", "transformed_text": "Find intersection of tuples in two lists.", "transformed_code": "tuple_intersection = lambda l1, l2: set(map(sorted, l1)) & set(map(sorted, l2))"}
{"original_text": "Write a function to replace characters in a string.", "original_code": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2", "transformed_text": "Create a function that swaps characters in a string.", "transformed_code": "replace_char = lambda str1, ch, newch: str1.replace(ch, newch)"}
{"original_text": "Write a function to sort counter by value.", "original_code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter", "transformed_text": "Sort counter by value.", "transformed_code": "from collections import Counter; sort_counter=lambda dict1: Counter(dict1).most_common()"}
{"original_text": "Write a python function to find the sum of the largest and smallest value in a given array.", "original_code": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum", "transformed_text": "Find sum of largest and smallest values in an array.", "transformed_code": "big_sum = lambda nums: max(nums) + min(nums)"}
{"original_text": "Write a python function to convert the given string to lower case.", "original_code": "def is_lower(string):\r\n  return (string.lower())", "transformed_text": "Convert the string to lowercase.", "transformed_code": "is_lower = lambda s: s.lower()"}
{"original_text": "Write a function to remove lowercase substrings from a given string.", "original_code": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result", "transformed_text": "Remove lowercase letters from a string.", "transformed_code": "import re; remove_lowercase = lambda str1: re.sub('[a-z]', '', str1)"}
{"original_text": "Write a python function to find the first digit of a given number.", "original_code": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ", "transformed_text": "Find the first digit of a number.", "transformed_code": "first_Digit = lambda n: int(n) if n < 10 else first_Digit(n / 10)"}
{"original_text": "Write a python function to find the maximum occurring character in a given string.", "original_code": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch", "transformed_text": "Find the character that appears most frequently in a string.", "transformed_code": "get_max_occuring_char = lambda str1: max(str1, key=str1.count)"}
{"original_text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "original_code": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])", "transformed_text": "Determine subset with given sum from a set.", "transformed_code": "is_subset_sum = lambda s, n, sm: sm == 0 or (n > 0 and (is_subset_sum(s, n - 1, sm) or (s[n - 1] <= sm and is_subset_sum(s, n - 1, sm - s[n - 1]))))"}
{"original_text": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "original_code": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ", "transformed_text": "Find sequences of uppercase followed by lowercase letters in a string.", "transformed_code": "import re\nmatch = lambda text: 'Yes' if re.search('[A-Z][a-z]+$', text) else 'No'"}
{"original_text": "Write a python function to find the first natural number whose factorial is divisible by x.", "original_code": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ", "transformed_text": "Find the first natural number with a factorial divisible by x.", "transformed_code": "first_Factorial_Divisible_Number = lambda x: next(i for i in range(1, x) if (fact := (fact * i if (i > 1) else 1)) % x == 0)"}
{"original_text": "Write a function to remove the matching tuples from the given two tuples.", "original_code": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ", "transformed_text": "Remove matching tuples from two lists.", "transformed_code": "remove_matching_tuple = lambda l1, l2: [x for x in l1 if x not in l2]"}
{"original_text": "Write a function to find the largest palindromic number in the given array.", "original_code": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1", "transformed_text": "Find the largest palindrome in the array.", "transformed_code": "is_palindrome = lambda n: (lambda d: all((n // d == n % 10) and (n := (n % d) // 10) and (d //= 100) for d in iter(lambda: d * 10, 1))) (1))\nlargest_palindrome = lambda A, n: next((A[i] for i in range(n - 1, -1, -1) if is_palindrome(A[i])), -1)"}
{"original_text": "Write a function to compute binomial probability for the given number.", "original_code": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ", "transformed_text": "Compute binomial probability for a given number.", "transformed_code": "nCr = lambda n, r: (1 if r == 0 else nCr(n, r-1) * n / r) if r <= n/2 else (1 if n-r == 0 else nCr(n, n-r) * n / (n-r))\nbinomial_probability = lambda n, k, p: nCr(n, k) * p**k * (1-p)**(n-k)"}
{"original_text": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "original_code": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup", "transformed_text": "Sort a list of tuples by the last element.", "transformed_code": "sort_tuple = lambda tup: sorted(tup, key=lambda x: x[-1])"}
{"original_text": "Write a function to find the area of a pentagon.", "original_code": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area", "transformed_text": "Calculate pentagon area.", "transformed_code": "area_pentagon = lambda a: (math.sqrt(5*(5+2*math.sqrt(5)))*a**2)/4.0"}
{"original_text": "Write a python function to find the frequency of the largest value in a given array.", "original_code": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "transformed_text": "Find the frequency of the largest value in an array.", "transformed_code": "frequency_Of_Largest = lambda n, arr: sum(1 for x in arr if x == max(arr))"}
{"original_text": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "original_code": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ", "transformed_text": "Extract symmetric pairs from a list of tuples.", "transformed_code": "extract_symmetric = lambda test_list: {(a, b) for a, b in set(test_list) & {(b, a) for a, b in test_list} if a < b}"}
{"original_text": "Write a function to find the sum of geometric progression series.", "original_code": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total", "transformed_text": "Find the sum of a geometric series.", "transformed_code": "import math; sum_gp = lambda a, n, r: (a * (1 - math.pow(r, n))) / (1 - r)"}
{"original_text": "Write a function to search an element in the given array by using binary search.", "original_code": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found", "transformed_text": "Find an element in the array using binary search.", "transformed_code": "binary_search = lambda lst, item: any(item == lst[(first := (first := 0) + (last := len(lst)-1)) // 2] and (last := mid - 1 if item < lst[mid] else mid + 1) for mid in iter(int, 1))"}
{"original_text": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "original_code": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons", "transformed_text": "Create a function to generate hexagon coordinates in a grid.", "transformed_code": "import math\ncalculate_polygons = lambda sx, sy, ex, ey, r: [(sx + (r * math.cos(math.radians(60 * i))), sy + (r * math.sin(math.radians(60 * i)))) for i in range(6)]"}
{"original_text": "Write a function to convert the given binary tuple to integer.", "original_code": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ", "transformed_text": "Convert binary tuple to integer.", "transformed_code": "binary_to_integer = lambda tup: int(''.join(map(str, tup)), 2)"}
{"original_text": "Write a function to remove lowercase substrings from a given string by using regex.", "original_code": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)", "transformed_text": "Remove lowercase letters from a string using regex.", "transformed_code": "import re\nremove_lowercase = lambda str1: re.sub('[a-z]', '', str1)"}
{"original_text": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "original_code": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums", "transformed_text": "Find smallest integers in a list using heap queue.", "transformed_code": "import heapq as hq; heap_queue_smallest=lambda nums,n:hq.nsmallest(n, nums)"}
{"original_text": "Write a function to find the surface area of a cone.", "original_code": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA", "transformed_text": "Calculate the surface area of a cone.", "transformed_code": "surfacearea_cone = lambda r, h: math.pi * r * (r + (r**2 + h**2)**0.5)"}
{"original_text": "Write a python function to find gcd of two positive integers.", "original_code": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd", "transformed_text": "Find gcd of two positive integers", "transformed_code": "gcd = lambda x, y: y if x % y == 0 else next(k for k in range(y//2, 0, -1) if x % k == 0 and y % k == 0)"}
{"original_text": "Write a function to find the diameter of a circle.", "original_code": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter", "transformed_text": "Find circle diameter from radius.", "transformed_code": "diameter_circle=lambda r:2*r"}
{"original_text": "Write a function to concatenate all elements of the given list into a string.", "original_code": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ", "transformed_text": "Concatenate all elements in a list into a single string.", "transformed_code": "concatenate_elements = lambda lst: ' '.join(lst)"}
{"original_text": "Write a python function to find common divisor between two numbers in a given pair.", "original_code": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result", "transformed_text": "Find common divisors of two numbers.", "transformed_code": "ngcd=lambda x,y:(max(i for i in range(1,min(x,y)+1) if x%i==0 and y%i==0))\nnum_comm_div=lambda x,y:len([i for i in range(1,int(ngcd(x,y)**0.5)+1) if ngcd(x,y)%i==0])*2 - (1 if i==ngcd(x,y)//i else 0)"}
{"original_text": "Write a python function to find remainder of two numbers.", "original_code": "def find(n,m):\r\n  r = n%m\r\n  return (r)", "transformed_text": "Find the remainder of two numbers.", "transformed_code": "find = lambda n, m: n % m"}
{"original_text": "Write a function to add consecutive numbers of a given list.", "original_code": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "transformed_text": "Create a function to sum adjacent numbers in a list.", "transformed_code": "add_consecutive_nums = lambda nums: [b+a for a, b in zip(nums[:-1], nums[1:])]"}
{"original_text": "Write a python function to find the cube sum of first n natural numbers.", "original_code": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum", "transformed_text": "Find the cube sum of first n natural numbers.", "transformed_code": "sum_Of_Series = lambda n: sum(i**3 for i in range(1, n + 1))"}
{"original_text": "Write a function to move all zeroes to the end of the given array.", "original_code": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A", "transformed_text": "Move zeroes to the end of an array.", "transformed_code": "re_order = lambda A: [A[k := (k + 1) if i else k] if i else 0 for i in A for k in [0]]"}
{"original_text": "Write a function to calculate the permutation coefficient of given p(n, k).", "original_code": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ", "transformed_text": "Calculate the permutation coefficient for given values n and k.", "transformed_code": "permutation_coefficient = lambda n, k: (P := [[0] * (k + 1) for _ in range(n + 1)], [P[i].__setitem__(j, 1 if j == 0 else P[i - 1][j] + (j * P[i - 1][j - 1]) if j > 0 else 0) for j in range(min(i, k) + 1)] for i in range(n + 1)), P[n][k])[-1]"}
{"original_text": "Write a function to remove specific words from a given list.", "original_code": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  ", "transformed_text": "Remove specified words from a list.", "transformed_code": "remove_words = lambda list1, removewords: [word for word in list1 if word not in removewords]"}
{"original_text": "Write a function to check if the common elements between two given lists are in the same order or not.", "original_code": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2", "transformed_text": "Check if common elements in two lists are in the same order.", "transformed_code": "same_order = lambda l1, l2: [e for e in l1 if e in set(l1) & set(l2)] == [e for e in l2 if e in set(l1) & set(l2)]"}
{"original_text": "Write a python function to find the average of odd numbers till a given odd number.", "original_code": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ", "transformed_text": "Find average of odd numbers up to a given odd number.", "transformed_code": "average_Odd = lambda n: (\"Invalid Input\") if n % 2 == 0 else sum(range(n, 0, -2)) // ((n + 1) // 2)"}
{"original_text": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "original_code": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]", "transformed_text": "Find subsequences with product less than k in a non-negative array.", "transformed_code": "no_of_subsequences = lambda arr, k: (lambda dp: (dp[k][len(arr)], [dp[i][j] := dp[i][j - 1] + (dp[i // arr[j - 1]][j - 1] + 1 if arr[j - 1] <= i else 0) for i in range(1, k + 1) for j in range(1, len(arr) + 1)], dp)[0])( [[0] * (len(arr) + 1) for _ in range(k + 1)]) )"}
{"original_text": "Write a python function to find minimum sum of factors of a given number.", "original_code": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum", "transformed_text": "Find minimum sum of factors of a number.", "transformed_code": "find_Min_Sum=lambda num:sum(i for i in range(2,num+1) if num%i==0 and (num:=num//i)) or num"}
{"original_text": "Write a function to count the element frequency in the mixed nested tuple.", "original_code": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) ", "transformed_text": "Count frequencies of elements in a nested tuple.", "transformed_code": "flatten = lambda t: (x for tup in t for x in flatten(tup) if isinstance(tup, tuple) else [tup])\ncount_element_freq = lambda t: {ele: sum(1 for _ in flatten(t) if ele == e) for e in set(flatten(t))}"}
{"original_text": "Write a function to convert tuple into list by adding the given string after every element.", "original_code": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) ", "transformed_text": "Convert a tuple to a list by adding a string after each element.", "transformed_code": "add_str = lambda test_tup, K: [ele for sub in test_tup for ele in (sub, K)]"}
{"original_text": "Write a function to find the summation of tuple elements in the given tuple list.", "original_code": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) ", "transformed_text": "Find the sum of elements in a tuple list.", "transformed_code": "sum_elements = lambda test_tup: sum(test_tup)"}
{"original_text": "Write a function to check if there is a subset with sum divisible by m.", "original_code": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]", "transformed_text": "Check for a subset with a sum divisible by m.", "transformed_code": "modular_sum = lambda arr, n, m: n > m or (DP := [False] * m) and any((DP[j] := True, (DP[(j + arr[i]) % m] := True) if (DP[(j + arr[i]) % m] == False) else None)[0] for i in range(n) for j in range(m) if DP[0] or (temp := [False] * m) and (DP[arr[i] % m] := True)) and [temp[j] and (DP[j] := True) for j in range(m)]) and DP[0]"}
{"original_text": "Write a function to sort a list of elements using radix sort.", "original_code": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums", "transformed_text": "Sort elements using radix sort.", "transformed_code": "radix_sort = lambda nums: (lambda placement=1, max_digit=max(nums): [nums := [i for b in (buckets := [[] for _ in range(10)]) for i in b] and (placement := placement * 10) for _ in iter(int, max_digit) if placement < max_digit])()"}
{"original_text": "Write a python function to find the largest postive number from the given list.", "original_code": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max", "transformed_text": "Find the largest positive number in a list.", "transformed_code": "largest_pos = lambda lst: max(x for x in lst if x > 0)"}
{"original_text": "Write a function to find the square root of a perfect number.", "original_code": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root ", "transformed_text": "Find the square root of a perfect number.", "transformed_code": "sqrt_root = lambda num: num ** 0.5"}
{"original_text": "Write a function to calculate volume of a tetrahedron.", "original_code": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)", "transformed_text": "Calculate tetrahedron volume.", "transformed_code": "volume_tetrahedron = lambda num: round(num ** 3 / (6 * math.sqrt(2)), 2)"}
{"original_text": "Write a function to find the lcm of the given array elements.", "original_code": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm ", "transformed_text": "Find the lcm of all elements in an array.", "transformed_code": "find_lcm = lambda a, b: a * b // (lambda g: b if a % b == 0 else find_lcm(b, a % b))(b)\nget_lcm = lambda l: reduce(find_lcm, l)"}
{"original_text": "Write a function to print check if the triangle is scalene or not.", "original_code": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False", "transformed_text": "Check if a triangle is scalene.", "transformed_code": "check_scalene = lambda x, y, z: x != y and y != z and z != x"}
{"original_text": "Write a function to find the longest bitonic subsequence for the given array.", "original_code": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum", "transformed_text": "Find the longest bitonic subsequence in an array.", "transformed_code": "lbs = lambda arr: (lambda n, lis: (lambda lds: (max(lis[i] + lds[i] - 1 for i in range(n))))(lds))(lis))(len(arr), [1 for _ in range(len(arr) + 1)])"}
{"original_text": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.", "original_code": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  ", "transformed_text": "Create a function to validate string criteria.", "transformed_code": "check_string = lambda s: [m(s) for m in [lambda s: any(x.isupper() for x in s) or '1 upper case.', lambda s: any(x.islower() for x in s) or '1 lower case.', lambda s: any(x.isdigit() for x in s) or '1 number.', lambda s: len(s) >= 7 or 'Atleast 8 chars.'] if m(s) != True] or ['Valid string.']"}
{"original_text": "Write a function to find the sum of maximum increasing subsequence of the given array.", "original_code": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max", "transformed_text": "Find the sum of the largest increasing subsequence in an array.", "transformed_code": "max_sum_increasing_subsequence = lambda arr, n: max(sum(arr[i] for i in range(j+1)) for j in range(n) if all(arr[i] < arr[j] for i in range(j)))"}
{"original_text": "Write a python function to check whether two given lines are parallel or not.", "original_code": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]", "transformed_text": "Check if two lines are parallel.", "transformed_code": "parallel_lines = lambda l1, l2: l1[0] / l1[1] == l2[0] / l2[1]"}
{"original_text": "Write a python function to capitalize first and last letters of each word of a given string.", "original_code": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  ", "transformed_text": "Capitalize the first and last letters of each word in a string.", "transformed_code": "capitalize = lambda s: ' '.join(w[:-1] + w[-1].upper() for w in s.title().split())"}
{"original_text": "Write a function to find all pairs in an integer array whose sum is equal to a given number.", "original_code": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count", "transformed_text": "Find pairs in an array that sum to a specific number.", "transformed_code": "get_pairs_count = lambda arr, n, sum: sum(1 for i in range(n) for j in range(i + 1, n) if arr[i] + arr[j] == sum)"}
{"original_text": "Write a function to find the list of lists with minimum length.", "original_code": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     ", "transformed_text": "Find lists with the minimum length.", "transformed_code": "min_length = lambda list1: (min(len(x) for x in list1), min(x for x in list1))"}
{"original_text": "Write a function to find the nth jacobsthal-lucas number.", "original_code": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]", "transformed_text": "Find the nth jacobsthal-lucas number.", "transformed_code": "jacobsthal_lucas=lambda n:(lambda dp:[2,1]+[dp.append(dp[-1]+2*dp[-2]) for i in range(2,n+1)],dp)[1][-1]"}
{"original_text": "Write a function to find the ration of negative numbers in an array of integers.", "original_code": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "transformed_text": "Find ratio of negative integers in an array.", "transformed_code": "negative_count = lambda nums: round(sum(1 for x in nums if x < 0) / len(nums), 2)"}
{"original_text": "Write a function to find minimum number of coins that make a given value.", "original_code": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res ", "transformed_text": "Find minimum coins for a value.", "transformed_code": "import sys; min_coins = lambda coins, m, V: 0 if V == 0 else min(min_coins(coins, m, V - coins[i]) + 1 for i in range(m) if coins[i] <= V) if any(coins[i] <= V for i in range(m)) else sys.maxsize"}
{"original_text": "Write a function to check if the two given strings are permutations of each other.", "original_code": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True", "transformed_text": "Check if two strings are permutations of each other.", "transformed_code": "check_permutation=lambda str1,str2:sorted(str1)==sorted(str2)"}
{"original_text": "Write a function to remove particular data type elements from the given tuple.", "original_code": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) ", "transformed_text": "Remove specific data type elements from a tuple.", "transformed_code": "remove_datatype = lambda t, d: [e for e in t if not isinstance(e, d)]"}
{"original_text": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.", "original_code": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)", "transformed_text": "Find pattern in string and get its start and end positions.", "transformed_code": "import re; search_literal = lambda pattern, text: (m.start(), m.end()) if (m := re.search(pattern, text)) else None"}
{"original_text": "Write a function to find the top or bottom surface area of a cylinder.", "original_code": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea", "transformed_text": "Find surface area of a cylinder.", "transformed_code": "topbottom_surfacearea=lambda r: 3.1415*r*r"}
{"original_text": "Write a function to select the nth items of a list.", "original_code": "def nth_items(list,n):\r\n return list[::n]", "transformed_text": "Select nth items from a list.", "transformed_code": "nth_items = lambda lst, n: lst[::n]"}
{"original_text": "Write a python function to find the first repeated word in a given string.", "original_code": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'", "transformed_text": "Find the first repeated word in a string.", "transformed_code": "first_repeated_word = lambda str1: next((word for word in str1.split() if word in (temp := set()) or temp.add(word)), 'None')"}
{"original_text": "Write a python function to convert a given string list to a tuple.", "original_code": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result", "transformed_text": "Convert a list of strings to a tuple.", "transformed_code": "string_list_to_tuple = lambda str1: tuple(x for x in str1 if not x.isspace())"}
{"original_text": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.", "original_code": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result", "transformed_text": "Make a list of powers of numbers in bases.", "transformed_code": "basesnum_coresspondingnum = lambda bases_num, index: list(map(pow, bases_num, index))"}
{"original_text": "Write a python function to find the difference between highest and least frequencies in a given array.", "original_code": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count ", "transformed_text": "Find difference between highest and lowest frequencies in an array.", "transformed_code": "find_diff = lambda arr, n: (lambda c, mc, lc: mc - lc)([arr.sort(), 0, 0, n][1], 0, n) if arr else 0"}
{"original_text": "Write a function to find if the given number is abundant or not.", "original_code": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False", "transformed_text": "Determine if a number is abundant.", "transformed_code": "import math\nget_sum = lambda n: sum(i if n % i == 0 else 0 for i in range(1, int(math.sqrt(n)) + 1)) - n\ncheck_abundant = lambda n: get_sum(n) > n"}
{"original_text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.", "original_code": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))", "transformed_text": "Replace spaces, commas, or dots with a colon in a string.", "transformed_code": "import re; fill_spaces = lambda text: re.sub('[ ,.]', ':', text)"}
{"original_text": "Write a function to add two numbers and print number of digits of sum.", "original_code": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count", "transformed_text": "Create a function to add two numbers and count digits in the result.", "transformed_code": "count_digits=lambda n1,n2:len(str(n1+n2))"}
{"original_text": "Write a function to flatten the tuple list to a string.", "original_code": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) ", "transformed_text": "Flatten tuples in a list into a single string.", "transformed_code": "flatten_tuple = lambda test_list: ' '.join(idx for tup in test_list for idx in tup)"}
{"original_text": "Write a python function to toggle only first and last bits of a given number.", "original_code": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) ", "transformed_text": "Toggle first and last bits of a number.", "transformed_code": "toggle_F_and_L_bits = lambda n: 0 if n == 1 else n ^ ((n | n >> 1 | n >> 2 | n >> 4 | n >> 8 | n >> 16) + 1) >> 1 + 1"}
{"original_text": "Write a function to find the last occurrence of a character in a string.", "original_code": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1", "transformed_text": "Find last character position in string.", "transformed_code": "last_occurence_char = lambda s, c: max((i for i, ch in enumerate(s) if ch == c), default=None) + 1"}
{"original_text": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.", "original_code": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum", "transformed_text": "Find the sum of hamming distances for numbers from 0 to n.", "transformed_code": "Total_Hamming_Distance = lambda n: sum(n // (1 << i) for i in range(n.bit_length()))"}
{"original_text": "Write a function to find the length of the longest increasing subsequence of the given sequence.", "original_code": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum", "transformed_text": "Find the longest increasing subsequence length.", "transformed_code": "longest_increasing_subsequence = lambda arr: max([sum(arr[i] > arr[j] for j in range(i)) + 1 for i in range(len(arr))])"}
{"original_text": "Write a python function to find the sum of fifth power of first n odd natural numbers.", "original_code": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm ", "transformed_text": "Find the sum of fifth powers of first n odd numbers.", "transformed_code": "odd_Num_Sum = lambda n: sum((2*i-1)**5 for i in range(1, n+1))"}
{"original_text": "Write a python function to find the maximum element in a sorted and rotated array.", "original_code": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) ", "transformed_text": "Find maximum in a sorted and rotated array.", "transformed_code": "find_Max = lambda arr, low, high: arr[low] if high == low else arr[0] if high < low else arr[mid] if mid < high and arr[mid + 1] < arr[mid] else arr[mid - 1] if mid > low and arr[mid] < arr[mid - 1] else find_Max(arr, low, mid - 1) if arr[low] > arr[mid] else find_Max(arr, mid + 1, high) if (mid := low + (high - low) // 2) is not None else None"}
{"original_text": "Write a function to extract a specified column from a given nested list.", "original_code": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result ", "transformed_text": "Extract a column from a nested list.", "transformed_code": "extract_column = lambda list1, n: [i.pop(n) for i in list1]"}
{"original_text": "Write a python function to check whether a given sequence is linear or not.", "original_code": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\"", "transformed_text": "Check if a sequence is linear.", "transformed_code": "Seq_Linear=lambda seq:[\"Linear Sequence\",\"Non Linear Sequence\"][len(set([seq[x]-seq[x-1] for x in range(1,len(seq))]))!=1]"}
{"original_text": "Write a function to convert the given tuple to a floating-point number.", "original_code": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) ", "transformed_text": "Convert a tuple to a float.", "transformed_code": "tuple_to_float = lambda t: float('.'.join(map(str, t)))"}
{"original_text": "Write a python function to find odd numbers from a mixed list.", "original_code": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li", "transformed_text": "Find odd numbers in a list.", "transformed_code": "odds = lambda lst: [i for i in lst if i % 2 != 0]"}
{"original_text": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.", "original_code": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  ", "transformed_text": "Find the difference between the sum of cubes and the sum of natural numbers.", "transformed_code": "difference = lambda n: ((n*(n + 1))//2)*(((n*(n + 1))//2)-1)"}
{"original_text": "Write a python function to count the pairs with xor as an odd number.", "original_code": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  ", "transformed_text": "Count pairs with odd xor in the array.", "transformed_code": "find_Odd_Pair = lambda A, N: sum(1 for i in range(N) for j in range(i + 1, N) if (A[i] ^ A[j]) % 2 != 0)"}
{"original_text": "Write a function to toggle characters case in a string.", "original_code": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1", "transformed_text": "Toggle the case of characters in a string.", "transformed_code": "toggle_string = lambda s: s.swapcase()"}
{"original_text": "Write a python function to find the digit distance between two integers.", "original_code": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))", "transformed_text": "Find digit distance between two integers.", "transformed_code": "digit_distance_nums=lambda n1,n2:sum(map(int,str(abs(n1-n2))))"}
{"original_text": "Write a function to find the largest sum of contiguous subarray in the given array.", "original_code": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far", "transformed_text": "Find the largest sum of a contiguous subarray in an array.", "transformed_code": "max_sub_array_sum = lambda a: max(sum(a[i:j]) for i in range(len(a)) for j in range(i + 1, len(a) + 1))"}
{"original_text": "Write a function to find the union of elements of the given tuples.", "original_code": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) ", "transformed_text": "Find the union of elements from two tuples.", "transformed_code": "union_elements = lambda t1, t2: tuple(set(t1 + t2))"}
{"original_text": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.", "original_code": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) ", "transformed_text": "Create a function to pair elements from a tuple.", "transformed_code": "assign_elements = lambda test_list: {val: [key for key, v in test_list if v == val] for key, val in test_list}"}
{"original_text": "Write a python function to find the maximum length of sublist.", "original_code": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength ", "transformed_text": "Find maximum length of a sublist.", "transformed_code": "max_length = lambda lst: max(len(x) for x in lst)"}
{"original_text": "Write a function to extract values between quotation marks of a string.", "original_code": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))", "transformed_text": "Extract values from a string within quotation marks.", "transformed_code": "import re; extract_values = lambda text: re.findall(r'\"(.*?)\"', text)"}
{"original_text": "Write a python function to count unequal element pairs from the given array.", "original_code": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; ", "transformed_text": "Count unequal pairs in an array.", "transformed_code": "count_Pairs = lambda arr, n: sum(1 for i in range(n) for j in range(i + 1, n) if arr[i] != arr[j])"}
{"original_text": "Write a python function to split a string into characters.", "original_code": "def split(word): \r\n    return [char for char in word] ", "transformed_text": "Split a string into its characters.", "transformed_code": "split = lambda word: [char for char in word]"}
{"original_text": "Write a function to get the sum of a non-negative integer.", "original_code": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))", "transformed_text": "Get the sum of digits in a non-negative integer.", "transformed_code": "sum_digits = lambda n: 0 if n == 0 else n % 10 + sum_digits(n // 10)"}
{"original_text": "Write a function to check whether a specified list is sorted or not.", "original_code": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result", "transformed_text": "Check if a list is sorted.", "transformed_code": "issort_list = lambda list1: all(list1[i] <= list1[i+1] for i in range(len(list1)-1))"}
{"original_text": "Write a function to create a list of empty dictionaries.", "original_code": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list", "transformed_text": "Create a list of empty dictionaries.", "transformed_code": "empty_list = lambda length: [{} for _ in range(length)]"}
{"original_text": "Write a function to sort each sublist of strings in a given list of lists.", "original_code": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result", "transformed_text": "Sort each list of strings in a given list.", "transformed_code": "sort_sublists = lambda lst: list(map(sorted, lst))"}
{"original_text": "Write a function to remove words from a given list of strings containing a character or string.", "original_code": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list", "transformed_text": "Remove words containing specified characters from a list.", "transformed_code": "remove_words = lambda list1, charlist: [' '.join(word for word in line.split() if not any(phrase in word for phrase in charlist)) for line in list1]"}
{"original_text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.", "original_code": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]", "transformed_text": "Find maximum sum of disjoint pairs in an integer array with limit k.", "transformed_code": "max_sum_pair_diff_lessthan_K = lambda arr, N, K: (lambda dp: (arr.sort(), [dp.__setitem__(i, dp[i-1]), dp[i].__setitem__(i, max(dp[i], (dp[i-2] + arr[i] + arr[i-1]) if i >= 2 else (arr[i] + arr[i-1])) if arr[i] - arr[i-1] < K else dp[i])][0] for i in range(1, N)], dp[-1])[1])([0] * N)"}
{"original_text": "Write a python function to remove two duplicate numbers from a given number of lists.", "original_code": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]", "transformed_text": "Remove duplicates from a list of numbers.", "transformed_code": "two_unique_nums = lambda nums: [i for i in nums if nums.count(i)==1]"}
{"original_text": "Write a python function to calculate the product of the unique numbers of a given list.", "original_code": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p", "transformed_text": "Calculate the product of unique numbers in a list.", "transformed_code": "unique_product = lambda lst: eval('*'.join(map(str, set(lst))))"}
{"original_text": "Write a function to find the surface area of a cylinder.", "original_code": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea", "transformed_text": "Calculate the cylinder's surface area.", "transformed_code": "surfacearea_cylinder=lambda r,h:(2*3.1415*r**2)+(2*3.1415*r*h)"}
{"original_text": "Write a python function to find nth number in a sequence which is not a multiple of a given number.", "original_code": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) ", "transformed_text": "Find the nth non-multiple of a given number in a range.", "transformed_code": "count_no = lambda A, N, L, R: next(i for count, i in enumerate(range(L, R + 1), 1) if i % A != 0 and count == N)"}
{"original_text": "Write a python function to check whether an array is subarray of another or not.", "original_code": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; ", "transformed_text": "Check if one array is a subarray of another.", "transformed_code": "is_sub_array = lambda A, B: any(A[i:i+len(B)] == B for i in range(len(A) - len(B) + 1))"}
{"original_text": "Write a python function to find the last digit in factorial of a given number.", "original_code": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0", "transformed_text": "Find the last digit of a factorial.", "transformed_code": "last_Digit_Factorial = lambda n: 1 if n == 0 else n if n <= 2 else 6 if n == 3 else 4 if n == 4 else 0"}
{"original_text": "Write a function to interleave lists of the same length.", "original_code": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result", "transformed_text": "Interleave three lists of equal length.", "transformed_code": "interleave_lists = lambda list1, list2, list3: [el for pair in zip(list1, list2, list3) for el in pair]"}
{"original_text": "Write a function to find the dissimilar elements in the given two tuples.", "original_code": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) ", "transformed_text": "Find unique elements in two tuples.", "transformed_code": "find_dissimilar = lambda t1, t2: tuple(set(t1) ^ set(t2))"}
{"original_text": "Write a function to extract the even elements in the nested mixed tuple.", "original_code": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) ", "transformed_text": "Extract even numbers from a mixed nested tuple.", "transformed_code": "extract_even = lambda t: tuple(x for e in t for x in extract_even(e) if isinstance(e, tuple) or (x % 2 == 0))"}
{"original_text": "Write a python function to find the surface area of the square pyramid.", "original_code": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) ", "transformed_text": "Find the surface area of a square pyramid.", "transformed_code": "surface_Area = lambda b, s: 2 * b * s + b ** 2"}
{"original_text": "Write a function to check if a dictionary is empty or not.", "original_code": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True", "transformed_text": "Check if a dictionary is empty.", "transformed_code": "my_dict = lambda dict1: not bool(dict1)"}
{"original_text": "Write a function for nth catalan number.", "original_code": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num", "transformed_text": "Calculate the nth Catalan number.", "transformed_code": "catalan_number = lambda num: 1 if num <= 1 else sum(catalan_number(i) * catalan_number(num - i - 1) for i in range(num))"}
{"original_text": "Write a function to find all adverbs and their positions in a given sentence by using regex.", "original_code": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))", "transformed_text": "Find adverbs and their positions using regex.", "transformed_code": "import re; find_adverbs = lambda text: ['%d-%d: %s' % (m.start(), m.end(), m.group(0)) for m in re.finditer(r'\\w+ly', text)]"}
{"original_text": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.", "original_code": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items", "transformed_text": "Find the n most expensive items from a dataset.", "transformed_code": "expensive_items = lambda items, n: heapq.nlargest(n, items, key=lambda s: s['price'])"}
{"original_text": "Write a python function to split the array and add the first part to the end.", "original_code": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) ", "transformed_text": "Split the array and move the first part to the end.", "transformed_code": "split_Arr = lambda a, n, k: a[k:] + a[:k]"}
{"original_text": "Write a function to convert a list to a tuple.", "original_code": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex", "transformed_text": "Convert a list into a tuple.", "transformed_code": "list_tuple = lambda listx: tuple(listx)"}
{"original_text": "Write a python function to find the difference between largest and smallest value in a given array.", "original_code": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff", "transformed_text": "Find difference between largest and smallest values in an array.", "transformed_code": "big_diff = lambda nums: max(nums) - min(nums)"}
{"original_text": "Write a function to find perfect squares between two given numbers.", "original_code": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists", "transformed_text": "Find perfect squares between two numbers.", "transformed_code": "perfect_squares = lambda a, b: [i for i in range(a, b+1) if (int(i**0.5)**2) == i]"}
{"original_text": "Write a function to convert polar coordinates to rectangular coordinates.", "original_code": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)", "transformed_text": "Convert polar to rectangular coordinates.", "transformed_code": "polar_rect = lambda x, y: (cmath.polar(complex(x, y)), cmath.rect(2, cmath.pi))"}
{"original_text": "Write a python function to interchange the first and last elements in a list.", "original_code": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList ", "transformed_text": "Interchange the first and last elements of a list.", "transformed_code": "swap_List = lambda newList: newList.__setitem__(0, newList[-1]) or newList.__setitem__(-1, newList[0]) or newList"}
{"original_text": "Write a python function to find sum of product of binomial co-efficients.", "original_code": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); ", "transformed_text": "Find the sum of products of binomial coefficients.", "transformed_code": "binomial_Coeff = lambda n,k: (lambda C: [1]+[C.append(C[j]+C[j-1]) or C[j] for j in range(min(i,k),0,-1) for i in range(1,n+1)] and C[k])([0]*(k+1)); sum_Of_product = lambda n: binomial_Coeff(2*n,n-1)"}
{"original_text": "Write a function to remove leading zeroes from an ip address.", "original_code": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r", "transformed_text": "Remove leading zeroes from an IP address.", "transformed_code": "removezero_ip = lambda ip: re.sub('\\.[0]*', '.', ip)"}
{"original_text": "Write a function to find the difference of first even and odd number of a given list.", "original_code": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)", "transformed_text": "Find the difference between the first even and odd numbers in a list.", "transformed_code": "diff_even_odd = lambda list1: (next((el for el in list1 if el%2==0),-1) - next((el for el in list1 if el%2!=0),-1))"}
{"original_text": "Write a python function to count minimum number of swaps required to convert one binary string to another.", "original_code": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ", "transformed_text": "Count swaps needed to convert one binary string to another.", "transformed_code": "min_Swaps = lambda str1, str2: sum(str1[i] != str2[i] for i in range(len(str1))) // 2 if sum(str1[i] != str2[i] for i in range(len(str1))) % 2 == 0 else 'Not Possible'"}
{"original_text": "Write a function to find the size of the given tuple.", "original_code": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) ", "transformed_text": "Find the size of a tuple.", "transformed_code": "import sys; tuple_size = lambda t: sys.getsizeof(t)"}
{"original_text": "Write a function to find kth element from the given two sorted arrays.", "original_code": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]", "transformed_text": "Find the kth element from two sorted arrays.", "transformed_code": "find_kth = lambda arr1, arr2, k: sorted(arr1 + arr2)[k - 1]"}
{"original_text": "Write a function to check whether the given number is armstrong or not.", "original_code": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False", "transformed_text": "Check if a number is an armstrong number.", "transformed_code": "armstrong_number = lambda number: number == sum((int(digit) ** len(str(number))) for digit in str(number))"}
{"original_text": "Write a function to find sum and average of first n natural numbers.", "original_code": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)", "transformed_text": "Find sum and average of first n natural numbers.", "transformed_code": "sum_average = lambda n: (sum(range(1, n + 1)), sum(range(1, n + 1)) / n)"}
{"original_text": "Write a python function to check whether the given number is even or not using bitwise operator.", "original_code": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; ", "transformed_text": "Create a function to check if a number is even.", "transformed_code": "is_Even = lambda n: n & 1 == 0"}
{"original_text": "Write a function to find the longest chain which can be formed from the given set of pairs.", "original_code": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max", "transformed_text": "Find the longest chain from pairs.", "transformed_code": "Pair = lambda a, b: {'a': a, 'b': b}; max_chain_length = lambda arr, n: max([sum(arr[i]['a'] > arr[j]['b'] for j in range(i)) + 1 for i in range(n)])"}
{"original_text": "Write a python function to find the first repeated character in a given string.", "original_code": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\"", "transformed_text": "Find the first repeated character in a string.", "transformed_code": "first_repeated_char = lambda s: next((c for i,c in enumerate(s) if s[:i+1].count(c) > 1), 'None')"}
{"original_text": "Write a function to get a lucid number smaller than or equal to n.", "original_code": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics", "transformed_text": "Get the largest lucid number less than or equal to n.", "transformed_code": "get_ludic = lambda n: [i for i in range(1, n + 1) if all(i % j for j in range(2, int(i**0.5) + 1))]"}
{"original_text": "Write a function to reverse words in a given string.", "original_code": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))", "transformed_text": "Reverse the words in a string.", "transformed_code": "reverse_words = lambda s: ' '.join(reversed(s.split()))"}
{"original_text": "Write a function to check if the given integer is a prime number.", "original_code": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False", "transformed_text": "Check if an integer is prime.", "transformed_code": "prime_num = lambda num: num > 1 and all(num % i != 0 for i in range(2, num // 2 + 1))"}
{"original_text": "Write a function to convert degrees to radians.", "original_code": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian", "transformed_text": "Create a function that converts degrees to radians.", "transformed_code": "import math; radian_degree = lambda degree: degree * (math.pi / 180)"}
{"original_text": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "original_code": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)", "transformed_text": "Find the pattern location in a string using regex.", "transformed_code": "import re; find_literals = lambda text, pattern: (m := re.search(pattern, text)).re.pattern, m.start(), m.end()"}
{"original_text": "Write a python function to find nth bell number.", "original_code": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] ", "transformed_text": "Find nth bell number", "transformed_code": "bell_Number=lambda n:[[1 if j==0 else 0 for j in range(n+1)] for i in range(n+1)]"}
{"original_text": "Write a python function to find minimum possible value for the given periodic function.", "original_code": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B", "transformed_text": "Find minimum value for a periodic function.", "transformed_code": "floor_Min = lambda A, B, N: (A * max(B - 1, N)) // B"}
{"original_text": "Write a python function to remove the k'th element from a given list.", "original_code": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]", "transformed_text": "Remove the k'th element from a list.", "transformed_code": "remove_kth_element = lambda list1, L: list1[:L-1] + list1[L:]"}
{"original_text": "Write a function to find the maximum of nth column from the given tuple list.", "original_code": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) ", "transformed_text": "Find maximum value in the nth column of a tuple list.", "transformed_code": "max_of_nth = lambda test_list, N: max(sub[N] for sub in test_list)"}
{"original_text": "Write a python function to merge the first and last elements separately in a list of lists.", "original_code": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] ", "transformed_text": "Merge first and last elements in a list of lists.", "transformed_code": "merge = lambda lst: [list(ele) for ele in zip(*lst)]"}
{"original_text": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "original_code": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) ", "transformed_text": "Find maximum values from tuples in a list.", "transformed_code": "maximum_value = lambda test_list: [(key, max(lst)) for key, lst in test_list]"}
{"original_text": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "original_code": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)", "transformed_text": "Find the cumulative sum of values in a tuple list.", "transformed_code": "cumulative_sum = lambda lst: sum(map(sum, lst))"}
{"original_text": "Write a function to find average value of the numbers in a given tuple of tuples.", "original_code": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result", "transformed_text": "Find average values from tuples.", "transformed_code": "average_tuple = lambda nums: [sum(x) / len(x) for x in zip(*nums)]"}
{"original_text": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "original_code": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) ", "transformed_text": "Perform modulo on elements of two tuples.", "transformed_code": "tuple_modulo = lambda t1, t2: tuple(a % b for a, b in zip(t1, t2))"}
{"original_text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "original_code": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2", "transformed_text": "Calculate jumps needed to reach a point (d, 0) from the origin.", "transformed_code": "min_Jumps = lambda a, b, d: (d + max(a, b) - 1) / max(a, b) if d >= max(a, b) else 0 if d == 0 else 1 if d == min(a, b) else 2"}
{"original_text": "Write a function to divide two lists using map and lambda function.", "original_code": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)", "transformed_text": "Divide two lists using map and lambda.", "transformed_code": "lambda nums1, nums2: list(map(lambda x, y: x / y, nums1, nums2))"}
{"original_text": "Write a function to move all the numbers in it to the given string.", "original_code": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) ", "transformed_text": "Move all numbers to the end of the string.", "transformed_code": "move_num = lambda s: ''.join(c for c in s if not c.isdigit()) + ''.join(c for c in s if c.isdigit())"}
{"original_text": "Write a function to find the largest subset where each pair is divisible.", "original_code": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)", "transformed_text": "Find the largest divisible subset.", "transformed_code": "largest_subset = lambda a, n: max([(dp := [1] + [0] * (n - 1)) and [dp.__setitem__(i, 1 + max([dp[j] for j in range(i + 1, n) if a[j] % a[i] == 0 or a[i] % a[j] == 0]), None) for i in range(n - 2, -1, -1)]) and dp[n - 1] for _ in [0]])"}
{"original_text": "Write a function to increment the numeric values in the given strings by k.", "original_code": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res ", "transformed_text": "Increment numeric values in strings by k.", "transformed_code": "increment_numerics = lambda test_list, K: [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]"}
{"original_text": "Write a function to find the median of two sorted arrays of same size.", "original_code": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2", "transformed_text": "Find median of two sorted arrays.", "transformed_code": "get_median = lambda arr1, arr2, n: (m1 := m2 := -1, i := j := count := 0, [(count := count + 1, (m1 := m2, m2 := arr2[0]) if i == n else (m1 := m2, m2 := arr1[0]) if j == n else (m1 := m2, m2 := arr1[i], i := i + 1) if arr1[i] <= arr2[j] else (m1 := m2, m2 := arr2[j], j := j + 1))[3] for _ in range(n + 1)], (m1 + m2) / 2)[-1]"}
{"original_text": "Write a function to find the n-th power of individual elements in a list using lambda function.", "original_code": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums", "transformed_text": "Find the power of each number in a list.", "transformed_code": "nth_nums = lambda nums, n: list(map(lambda x: x ** n, nums))"}
{"original_text": "Write a python function to convert the given string to upper case.", "original_code": "def is_upper(string):\r\n  return (string.upper())", "transformed_text": "Convert string to upper case.", "transformed_code": "is_upper = lambda s: s.upper()"}
{"original_text": "Write a python function to interchange first and last elements in a given list.", "original_code": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList ", "transformed_text": "Interchange the first and last elements of a list.", "transformed_code": "swap_List = lambda newList: (newList.__setitem__(0, newList[-1]), newList.__setitem__(-1, newList[0]), newList)[-1]"}
{"original_text": "Write a python function to find the largest triangle that can be inscribed in the semicircle.", "original_code": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r ", "transformed_text": "Find the largest triangle in a semicircle.", "transformed_code": "triangle_area = lambda r: -1 if r < 0 else r * r"}
{"original_text": "Write a python function to find the smallest missing number from the given array.", "original_code": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) ", "transformed_text": "Find the smallest missing number in an array.", "transformed_code": "find_First_Missing=lambda a,s,e: e+1 if s>e else s if s!=a[s] else find_First_Missing(a,(s+e)//2+1,e) if a[(s+e)//2]==(s+e)//2 else find_First_Missing(a,s,(s+e)//2)"}
{"original_text": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "original_code": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)", "transformed_text": "Replace spaces in a string with '%20'.", "transformed_code": "MAX=1000; replace_spaces=lambda s: ''.join(s.strip().replace(' ', '%20') if len(s)<=MAX else '-1')"}
{"original_text": "Write a python function to find even numbers from a mixed list.", "original_code": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li", "transformed_text": "Find even numbers in a mixed list.", "transformed_code": "evens = lambda lst: [i for i in lst if i % 2 == 0]"}
{"original_text": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "original_code": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) ", "transformed_text": "Extract adjacent coordinates from a given tuple.", "transformed_code": "adjac = lambda ele, sub=[]: (yield sub) if not ele else (yield from [idx for j in range(ele[0] - 1, ele[0] + 2) for idx in adjac(ele[1:], sub + [j])]); get_coordinates = lambda test_tup: list(adjac(test_tup))"}
{"original_text": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "original_code": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)", "transformed_text": "Replace whitespaces with underscores and vice versa in a string.", "transformed_code": "import re\nreplace_spaces=lambda text:text.replace(' ','_').replace('_',' ')"}
{"original_text": "Write a python function to move all zeroes to the end of the given list.", "original_code": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)", "transformed_text": "Move all zeroes to the end of the list.", "transformed_code": "move_zero = lambda num_list: [i for i in num_list if i != 0] + [0] * num_list.count(0)"}
{"original_text": "Write a python function to find the sum of xor of all pairs of numbers in the given array.", "original_code": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans ", "transformed_text": "Find the sum of xor for all number pairs in the array.", "transformed_code": "pair_OR_Sum = lambda arr, n: sum(arr[i] ^ arr[j] for i in range(n) for j in range(i + 1, n))"}
{"original_text": "Write a python function to find the sum of fourth power of first n even natural numbers.", "original_code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; ", "transformed_text": "Find sum of fourth powers of first n even numbers.", "transformed_code": "even_Power_Sum = lambda n: sum((2*i)**4 for i in range(1, n + 1))"}
{"original_text": "Write a function to push all values into a heap and then pop off the smallest values one at a time.", "original_code": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]", "transformed_text": "Sort values using a heap and remove the smallest ones.", "transformed_code": "import heapq as hq; heap_sort = lambda it: [hq.heappop(hq.heapify([])) for _ in it]"}
{"original_text": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.", "original_code": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "transformed_text": "Check if quadratic roots are reciprocal.", "transformed_code": "Check_Solution = lambda a, b, c: \"Yes\" if a == c else \"No\""}
{"original_text": "Write a function to check whether the given amount has no profit and no loss", "original_code": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False", "transformed_text": "Check if amount has no profit and no loss", "transformed_code": "noprofit_noloss = lambda actual_cost, sale_amount: sale_amount == actual_cost"}
{"original_text": "Write a function to calculate wind chill index.", "original_code": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))", "transformed_text": "Calculate wind chill index.", "transformed_code": "wind_chill = lambda v,t: int(round(13.12 + 0.6215*t - 11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16), 0))"}
{"original_text": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "original_code": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))", "transformed_text": "Filter names that start with an uppercase letter and sum their lengths.", "transformed_code": "sum_len = lambda names: sum(len(name) for name in names if name[0].isupper())"}
{"original_text": "Write a function to remove the parenthesis area in a string.", "original_code": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "transformed_text": "Remove text inside parentheses from a string.", "transformed_code": "import re; remove_parenthesis = lambda items: [re.sub(r' ?\\([^)]+\\)', '', item) for item in items]"}
{"original_text": "Write a function to find the nth nonagonal number.", "original_code": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) ", "transformed_text": "Find the nth nonagonal number.", "transformed_code": "is_nonagonal=lambda n:int(n*(7*n-5)/2)"}
{"original_text": "Write a function to remove similar rows from the given tuple matrix.", "original_code": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) ", "transformed_text": "Remove duplicate rows from a tuple matrix.", "transformed_code": "remove_similar_row = lambda test_list: set(sorted([tuple(sorted(set(sub))) for sub in test_list]))"}
{"original_text": "Write a function that matches a word containing 'z', not at the start or end of the word.", "original_code": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "transformed_text": "Create a function to find 'z' in the middle of a word.", "transformed_code": "import re; text_match_wordz_middle = lambda text: 'Found a match!' if re.search('\\Bz\\B', text) else 'Not matched!'"}
{"original_text": "Write a python function to reverse an array upto a given position.", "original_code": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) ", "transformed_text": "Reverse an array up to a position.", "transformed_code": "reverse = lambda input, k: input[k-1::-1] + input[k:]"}
{"original_text": "Write a function to find the product of it\u2019s kth index in the given tuples.", "original_code": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) ", "transformed_text": "Find the product at the kth index of tuples.", "transformed_code": "get_product = lambda val: eval('1') * eval('*'.join(map(str, val)))\nfind_k_product = lambda test_list, K: get_product([sub[K] for sub in test_list])"}
{"original_text": "Write a python function to count number of cubes of size k in a cube of size n.", "original_code": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No", "transformed_text": "Count cubes of size k in a cube of size n.", "transformed_code": "No_of_cubes = lambda N, K: pow((N - K + 1), 3)"}
{"original_text": "Write a function to split a string at uppercase letters.", "original_code": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))", "transformed_text": "Create a function that splits a string at uppercase letters.", "transformed_code": "import re; split_upperstring = lambda text: re.findall('[A-Z][^A-Z]*', text)"}
{"original_text": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.", "original_code": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))", "transformed_text": "Exchange every n-th value with the (n+1)th value in a list.", "transformed_code": "exchange_elements = lambda lst: list(zip(*[iter(lst)]*2))"}
{"original_text": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.", "original_code": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "transformed_text": "Calculate the sum of numbers in a list within a given range.", "transformed_code": "sum_Range_list = lambda nums, m, n: sum(nums[m:n+1])"}
{"original_text": "Write a python function to check whether the given two arrays are equal or not.", "original_code": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True", "transformed_text": "Check if two arrays are equal.", "transformed_code": "are_Equal = lambda arr1, arr2: sorted(arr1) == sorted(arr2)"}
{"original_text": "Write a function to check if one tuple is a subset of another tuple.", "original_code": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) ", "transformed_text": "Check if one tuple is contained in another.", "transformed_code": "check_subset = lambda t1, t2: set(t2).issubset(t1)"}
{"original_text": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "original_code": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))", "transformed_text": "Flatten a tuple matrix into a list of columns.", "transformed_code": "matrix_to_list = lambda test_list: list(zip(*[ele for sub in test_list for ele in sub]))"}
{"original_text": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.", "original_code": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d", "transformed_text": "Group key-value pairs into a dictionary of lists.", "transformed_code": "from collections import defaultdict; grouping_dictionary = lambda l: (d := defaultdict(list), [d[k].append(v) for k, v in l], d)[-1]"}
{"original_text": "Write a function to find the perimeter of a rectangle.", "original_code": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter", "transformed_text": "Calculate the perimeter of a rectangle.", "transformed_code": "rectangle_perimeter=lambda l,b: 2*(l+b)"}
{"original_text": "Write a python function to find the sum of fifth power of n natural numbers.", "original_code": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm ", "transformed_text": "Find the sum of fifth powers of first n natural numbers.", "transformed_code": "fifth_Power_Sum = lambda n: sum(i**5 for i in range(1, n+1))"}
{"original_text": "Write a python function to find the minimum sum of absolute differences of two arrays.", "original_code": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum", "transformed_text": "Find minimum sum of absolute differences between two arrays.", "transformed_code": "find_Min_Sum = lambda a, b, n: sum(abs(x - y) for x, y in zip(sorted(a), sorted(b)))"}
{"original_text": "Write a python function to find the first digit in factorial of a given number.", "original_code": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) ", "transformed_text": "Find the first digit in a number's factorial.", "transformed_code": "import math; first_Digit = lambda n: (lambda f: math.floor(f))(reduce(lambda x, y: x * y, range(2, n + 1), 1) // 10**(len(str(f)) - 1))"}
{"original_text": "Write a function to find the item with maximum occurrences in a given list.", "original_code": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "transformed_text": "Find the item that appears most in a list.", "transformed_code": "max_occurrences = lambda lst: max(set(lst), key=lst.count)"}
{"original_text": "Write a python function to print duplicants from a list of integers.", "original_code": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated ", "transformed_text": "Find duplicates in a list of integers.", "transformed_code": "Repeat=lambda x:[i for i in set(x) if x.count(i)>1]"}
{"original_text": "Write a python function to choose points from two ranges such that no point lies in both the ranges.", "original_code": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)", "transformed_text": "Choose points from two ranges, ensuring no overlap.", "transformed_code": "find_Points = lambda l1, r1, l2, r2: (min(l1, l2) if l1 != l2 else -1, max(r1, r2) if r1 != r2 else -1)"}
{"original_text": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "original_code": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]", "transformed_text": "Find maximum sum without three consecutive elements.", "transformed_code": "max_sum_of_three_consecutive = lambda arr, n: (lambda sum: (sum[0], sum[1] := arr[0], arr[0] + arr[1]) if n >= 2 else 0, (sum[2] := max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) if n > 2 else 0, [sum.append(max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3])) for i in range(3, n)] and sum[n-1]) ([])"}
{"original_text": "Write a function to sort a list in a dictionary.", "original_code": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict", "transformed_text": "Sort a list in a dictionary.", "transformed_code": "sorted_dict = lambda dict1: {x: sorted(y) for x, y in dict1.items()}"}
{"original_text": "Write a function to find the largest possible value of k such that k modulo x is y.", "original_code": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) ", "transformed_text": "Find largest k where k modulo x equals y.", "transformed_code": "find_max_val = lambda n, x, y: max((k for k in range(n + 1) if k % x == y), default=-1)"}
{"original_text": "Write a python function to find the average of even numbers till a given even number.", "original_code": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count ", "transformed_text": "Find the average of even numbers up to a given number.", "transformed_code": "average_Even = lambda n: (\"Invalid Input\") if n % 2 != 0 else sum(range(2, n+1, 2)) // (n // 2)"}
{"original_text": "Write a python function to shift first element to the end of given list.", "original_code": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)", "transformed_text": "Move the first element of the list to the end.", "transformed_code": "move_last = lambda num_list: num_list[1:] + num_list[:1]"}
{"original_text": "Write a function to count occurrence of a character in a string.", "original_code": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count", "transformed_text": "Count occurrences of a character in a string.", "transformed_code": "count_char = lambda string, char: sum(1 for i in string if i == char)"}
{"original_text": "Write a python function to count number of vowels in the string.", "original_code": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n", "transformed_text": "Count vowels in a string", "transformed_code": "count_vowels = lambda s, v: len([c for c in s if c in v])"}
{"original_text": "Write a python function to replace multiple occurence of character by single.", "original_code": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string ", "transformed_text": "Replace multiple occurrences of a character with a single one.", "transformed_code": "import re; replace = lambda s, c: re.sub(c + '{2,}', c, s)"}
{"original_text": "Write a function to check whether the given ip address is valid or not using regex.", "original_code": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") ", "transformed_text": "Check if the IP address is valid using regex.", "transformed_code": "import re\nis_valid_ip = lambda ip: 'Valid IP address' if re.search(r'^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$', ip) else 'Invalid IP address'"}
{"original_text": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.", "original_code": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False", "transformed_text": "Check if numbers are in a decreasing order.", "transformed_code": "decreasing_trend = lambda nums: sorted(nums) == nums"}
{"original_text": "Write a python function to set the right most unset bit.", "original_code": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) ", "transformed_text": "Set the rightmost unset bit in a number.", "transformed_code": "get_Pos_Of_Right_most_Set_Bit = lambda n: int(math.log2(n & -n) + 1); set_Right_most_Unset_Bit = lambda n: 1 if n == 0 else n if (n & (n + 1)) == 0 else (1 << (get_Pos_Of_Right_most_Set_Bit(~n) - 1)) | n"}
{"original_text": "Write a function to find maximum of three numbers.", "original_code": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum", "transformed_text": "Find the maximum of three numbers.", "transformed_code": "max_of_three = lambda a, b, c: max(a, b, c)"}
{"original_text": "Write a python function to convert a list of multiple integers into a single integer.", "original_code": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) ", "transformed_text": "Create a function to merge integers from a list into one.", "transformed_code": "convert = lambda lst: int(''.join(map(str, lst)))"}
{"original_text": "Write a function to remove duplicate words from a given string using collections module.", "original_code": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result", "transformed_text": "Remove duplicate words from a string.", "transformed_code": "remove_duplicate=lambda s:' '.join(dict.fromkeys(s.split()))"}
{"original_text": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "original_code": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums", "transformed_text": "Create a function that adds two integers and returns 20 if in range.", "transformed_code": "sum_nums = lambda x, y, m, n: 20 if x + y in range(m, n) else x + y"}
{"original_text": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "original_code": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))", "transformed_text": "Remove non-alphanumeric characters from a string using regex.", "transformed_code": "import re; remove_extra_char = lambda text1: re.sub('[\\W_]+', '', text1)"}
{"original_text": "Write a function to check if the triangle is valid or not.", "original_code": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False", "transformed_text": "Check if a triangle is valid.", "transformed_code": "validity_triangle = lambda a,b,c: a + b + c == 180"}
{"original_text": "Write a python function to remove spaces from a given string.", "original_code": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1", "transformed_text": "Remove spaces from a string.", "transformed_code": "remove_spaces = lambda str1: str1.replace(' ', '')"}
{"original_text": "Write a function to access dictionary key\u2019s element by index.", "original_code": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]", "transformed_text": "Access dictionary element by index.", "transformed_code": "access_key = lambda d, k: list(d)[k]"}
{"original_text": "Write a python function to check whether a sequence of numbers has an increasing trend or not.", "original_code": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False", "transformed_text": "Check if numbers increase.", "transformed_code": "increasing_trend = lambda nums: sorted(nums) == nums"}
{"original_text": "Write a python function to find the smallest prime divisor of a number.", "original_code": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; ", "transformed_text": "Find the smallest prime divisor of a number", "transformed_code": "smallest_Divisor = lambda n: 2 if n % 2 == 0 else next(i for i in range(3, int(n**0.5)+1, 2) if n % i == 0) or n"}
{"original_text": "Write a function to multiply two lists using map and lambda function.", "original_code": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)", "transformed_text": "Multiply two lists using map and lambda.", "transformed_code": "lambda nums1, nums2: list(map(lambda x, y: x * y, nums1, nums2))"}
{"original_text": "Write a python function to check whether the given number can be represented by sum of two squares or not.", "original_code": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False", "transformed_text": "Check if a number can be expressed as the sum of two squares.", "transformed_code": "sum_square = lambda n: any((i*i + j*j == n) for i in range(1, int(n**0.5)+1) for j in range(1, int(n**0.5)+1))"}
{"original_text": "Write a python function to count occurences of a character in a repeated string.", "original_code": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  ", "transformed_text": "Count character occurrences in a repeated string.", "transformed_code": "count_Char = lambda s,x: sum(1 for i in s * (10 // len(s)) + s[:10 % len(s)] if i == x)"}
{"original_text": "Write a python function to find sum of prime numbers between 1 to n.", "original_code": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum", "transformed_text": "Find sum of prime numbers up to n.", "transformed_code": "sum_Of_Primes = lambda n: sum(i for i in range(2, n + 1) if all(i % p != 0 for p in range(2, int(i**0.5) + 1)))"}
{"original_text": "Write a function to find the frequency of each element in the given list.", "original_code": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) ", "transformed_text": "Find the frequency of elements in a list.", "transformed_code": "from collections import defaultdict; freq_element = lambda test_tup: str(dict((res:=defaultdict(int), [res[ele] += 1 for ele in test_tup], res)[-1]))"}
{"original_text": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "original_code": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)", "transformed_text": "Find the gcd of two integers using recursion.", "transformed_code": "recur_gcd = lambda a, b: a if b == 0 else recur_gcd(b, a % b)"}
{"original_text": "Write a function to get the length of a complex number.", "original_code": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length", "transformed_text": "Get the length of a complex number.", "transformed_code": "len_complex=lambda a,b:abs(complex(a,b))"}
{"original_text": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "original_code": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]", "transformed_text": "Find minimum jumps to reach end of an array.", "transformed_code": "min_jumps = lambda arr, n: (lambda jumps: (jumps[0], [jumps.append(float('inf')) for _ in range(1, n)], [(jumps.__setitem__(i, min(jumps[i], jumps[j] + 1)) for j in range(i) if i <= j + arr[j] and jumps[j] != float('inf')) for i in range(1, n)], jumps[n-1])[3]) if (n and arr[0]) else float('inf'))(jumps := [0])"}
{"original_text": "Write a function to multiply consecutive numbers of a given list.", "original_code": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "transformed_text": "Multiply pairs of consecutive numbers in a list.", "transformed_code": "mul_consecutive_nums = lambda nums: [b*a for a, b in zip(nums[:-1], nums[1:])]"}
{"original_text": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "original_code": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n", "transformed_text": "Group first elements by second elements in a tuple list.", "transformed_code": "from itertools import groupby; group_element = lambda test_list: {k: [x[0] for x in g] for k, g in groupby(sorted(test_list, key=lambda x: x[1]), key=lambda x: x[1])}"}
{"original_text": "Write a python function to find the last two digits in factorial of a given number.", "original_code": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) ", "transformed_text": "Find last two digits of a number's factorial.", "transformed_code": "last_Two_Digits = lambda N: 1 if N < 10 else (reduce(lambda f, i: (f * i) % 100, range(1, N + 1), 1))"}
{"original_text": "Write a function to remove multiple spaces in a string by using regex.", "original_code": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))", "transformed_text": "Remove extra spaces from a string using regex.", "transformed_code": "import re; remove_multiple_spaces = lambda text1: re.sub(' +', ' ', text1)"}
{"original_text": "Write a function to extract unique values from the given dictionary values.", "original_code": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res", "transformed_text": "Extract unique values from a dictionary.", "transformed_code": "extract_unique = lambda d: list(sorted({ele for v in d.values() for ele in v}))"}
{"original_text": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "original_code": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "transformed_text": "Check if elements in the second tuple are greater than those in the first.", "transformed_code": "check_greater = lambda t1, t2: all(x < y for x, y in zip(t1, t2))"}
{"original_text": "Write a function to zip two given lists of lists.", "original_code": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result", "transformed_text": "Zip two lists together.", "transformed_code": "zip_list = lambda l1, l2: list(map(list.__add__, l1, l2))"}
{"original_text": "Write a function to find number of even elements in the given list using lambda function.", "original_code": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even", "transformed_text": "Count even numbers in a list using a lambda function.", "transformed_code": "lambda array_nums: len(list(filter(lambda x: x % 2 == 0, array_nums)))"}
{"original_text": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.", "original_code": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n", "transformed_text": "Sort dictionary items by the product of tuple keys.", "transformed_code": "sort_dict_item = lambda d: {k: d[k] for k in sorted(d, key=lambda x: x[1] * x[0])}"}
{"original_text": "Write a python function to find the minimum number of swaps required to convert one binary string to another.", "original_code": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ", "transformed_text": "Find minimum swaps to convert one binary string to another.", "transformed_code": "min_Swaps = lambda str1, str2: sum(str1[i] != str2[i] for i in range(len(str1))) // 2 if sum(str1[i] != str2[i] for i in range(len(str1))) % 2 == 0 else 'Not Possible'"}
{"original_text": "Write a function to count the number of elements in a list which are within a specific range.", "original_code": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr", "transformed_text": "Count elements in a list within a range.", "transformed_code": "count_range_in_list = lambda li, min, max: sum(min <= x <= max for x in li)"}
{"original_text": "Write a function to find the equilibrium index of the given array.", "original_code": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1", "transformed_text": "Find the equilibrium index of an array.", "transformed_code": "equilibrium_index = lambda arr: next((i for i, num in enumerate(arr) if (left_sum := sum(arr[:i])) == (total_sum := sum(arr) - sum(arr[:i]))), -1)"}
{"original_text": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "original_code": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans", "transformed_text": "Find minimum removals for a range constraint.", "transformed_code": "find_ind = lambda key, i, n, k, arr: next((mid for start, end in ((i + 1, n - 1),) for mid in range(start, end) if arr[mid] - key <= k), -1);\nremovals = lambda arr, n, k: (ans := n - 1, arr.sort(), [ans := min(ans, n - (j - i + 1)) for i in range(n) if (j := find_ind(arr[i], i, n, k, arr)) != -1], ans)[-1]"}
{"original_text": "Write a function to check whether the given key is present in the dictionary or not.", "original_code": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False", "transformed_text": "Check if a key exists in a dictionary.", "transformed_code": "is_key_present = lambda d, x: x in d"}
{"original_text": "Write a function to calculate the harmonic sum of n-1.", "original_code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))", "transformed_text": "Calculate harmonic sum for n-1.", "transformed_code": "harmonic_sum = lambda n: 1 if n < 2 else 1 / n + harmonic_sum(n - 1)"}
{"original_text": "Write a function to sort a list of lists by length and value.", "original_code": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1", "transformed_text": "Sort a list of lists by their lengths and values.", "transformed_code": "sort_sublists = lambda lst: sorted(lst, key=lambda x: (len(x), x))"}
{"original_text": "Write a function to find whether an array is subset of another array.", "original_code": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t", "transformed_text": "Find if one array is a subset of another.", "transformed_code": "is_subset = lambda arr1, arr2: all(x in arr1 for x in arr2)"}
{"original_text": "Write a python function to count the total set bits from 1 to n.", "original_code": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  ", "transformed_text": "Count total set bits from 1 to n.", "transformed_code": "count_Set_Bits = lambda n: sum((n // 2) + (n % (1 << i)) * ((n // (1 << i)) & 1) for i in range(n.bit_length()))"}
{"original_text": "Write a python function to convert a string to a list.", "original_code": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li ", "transformed_text": "Convert a string into a list.", "transformed_code": "Convert = lambda string: list(string.split())"}
{"original_text": "Write a function to count unique keys for each value present in the tuple.", "original_code": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) ", "transformed_text": "Count unique keys for each value in the tuple.", "transformed_code": "get_unique = lambda test_list: {k: len(set(v)) for k, v in defaultdict(list, ((sub[1], sub[0]) for sub in test_list)).items()}"}
{"original_text": "Write a function to access the initial and last data of the given tuple record.", "original_code": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) ", "transformed_text": "Get first and last elements of the tuple.", "transformed_code": "front_and_rear = lambda t: (t[0], t[-1])"}
{"original_text": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.", "original_code": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False", "transformed_text": "Check if product of even and odd digits is equal.", "transformed_code": "product_Equal = lambda n: n >= 10 and (lambda o, e: o == e)(*(lambda p=1, q=1: (p:=p*(n%10), n:=(n//10), n<1 or (q:=q*(n%10), n:=(n//10), n<1) and (p, q))[2:] for _ in iter(int, 1) if n > 0))())"}
{"original_text": "Write a function to remove duplicates from a list of lists.", "original_code": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate", "transformed_text": "Remove duplicates from a list.", "transformed_code": "remove_duplicate = lambda list1: list(list1 for list1,_ in itertools.groupby(sorted(list1)))"}
{"original_text": "Write a function to check if the given tuple contains all valid values or not.", "original_code": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) ", "transformed_text": "Check if tuple has all valid values.", "transformed_code": "check_valid = lambda t: not any(not e for e in t)"}
{"original_text": "Write a python function to count the number of distinct power of prime factor of given number.", "original_code": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count ", "transformed_text": "Count distinct prime power factors of a number.", "transformed_code": "count_Fac = lambda n: sum(1 for i in range(2, int(n**0.5) + 1) if (n := n // i) % i == 0) + (1 if n > 1 else 0)"}
{"original_text": "Write a function to convert the given string of integers into a tuple.", "original_code": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) ", "transformed_text": "Convert a string of integers to a tuple.", "transformed_code": "str_to_tuple = lambda test_str: tuple(map(int, test_str.split(', ')))"}
{"original_text": "Write a function to find the perimeter of a rombus.", "original_code": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "transformed_text": "Find the perimeter of a rhombus.", "transformed_code": "rombus_perimeter = lambda a: 4 * a"}
{"original_text": "Write a function to calculate the standard deviation.", "original_code": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean", "transformed_text": "Calculate standard deviation from a list of numbers.", "transformed_code": "import math\nsd_calc = lambda data: 0.0 if len(data) <= 1 else math.sqrt(sum((float(el) - (mean := sum(map(float, data)) / len(data)))**2 for el in data) / (len(data)-1))\navg_calc = lambda ls: sum(map(float, ls)) / len(ls) if len(ls) > 1 else ls[0]"}
{"original_text": "Write a function to create a list taking alternate elements from another given list.", "original_code": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result ", "transformed_text": "Create a list from alternate elements of the given list.", "transformed_code": "alternate_elements = lambda list1: list1[::2]"}
{"original_text": "Write a function that matches a string that has an a followed by zero or more b's.", "original_code": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "transformed_text": "Create a function to match a string containing 'a' followed by any number of 'b's.", "transformed_code": "import re\ntext_match = lambda text: 'Found a match!' if re.search('ab*?', text) else 'Not matched!'"}
{"original_text": "Write a function to add a dictionary to the tuple.", "original_code": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) ", "transformed_text": "Add dictionary to tuple.", "transformed_code": "add_dict_to_tuple = lambda t, d: tuple(list(t) + [d])"}
{"original_text": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.", "original_code": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)", "transformed_text": "Find the maximum average path in a given square matrix.", "transformed_code": "M=100;maxAverageOfPath=lambda c,N: ((dp:=[0]*(N+1)for _ in range(N+1)),dp[0][0]=c[0][0],[dp[i][0]:=dp[i-1][0]+c[i][0]for i in range(1,N)], [dp[0][j]:=dp[0][j-1]+c[0][j]for j in range(1,N)], [(dp[i][j]:=max(dp[i-1][j],dp[i][j-1])+c[i][j]for i in range(1,N)for j in range(1,N))]) or dp[N-1][N-1]/(2*N-1)"}
{"original_text": "Write a function to filter the height and width of students which are stored in a dictionary.", "original_code": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    ", "transformed_text": "Filter students by height and width in a dictionary.", "transformed_code": "filter_data = lambda students, h, w: {k: s for k, s in students.items() if s[0] >= h and s[1] >= w}"}
{"original_text": "Write a function to count the same pair in two given lists using map function.", "original_code": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result", "transformed_text": "Count matching pairs in two lists using map.", "transformed_code": "from operator import eq\ncount_same_pair = lambda nums1, nums2: sum(map(eq, nums1, nums2))"}
{"original_text": "Write a function to calculate the sum of all digits of the base to the specified power.", "original_code": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])", "transformed_text": "Calculate the sum of digits from a base raised to a power.", "transformed_code": "power_base_sum = lambda base, power: sum(int(i) for i in str(pow(base, power)))"}
{"original_text": "Write a function to extract values between quotation marks of the given string by using regex.", "original_code": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))", "transformed_text": "Extract values from a string within quotation marks.", "transformed_code": "import re; extract_quotation = lambda text1: re.findall(r'\"(.*?)\"', text1)"}
{"original_text": "Write a function to multiply the adjacent elements of the given tuple.", "original_code": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "transformed_text": "Multiply adjacent elements in a tuple.", "transformed_code": "multiply_elements = lambda t: tuple(i * j for i, j in zip(t, t[1:]))"}
{"original_text": "Write a function to remove all characters except letters and numbers using regex", "original_code": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result", "transformed_text": "Remove non-letter and non-digit characters using regex", "transformed_code": "import re\nremove_char = lambda S: re.sub('[\\W_]+', '', S)"}
{"original_text": "Write a function to sum elements in two lists.", "original_code": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list", "transformed_text": "Create a function that adds two lists element-wise.", "transformed_code": "sum_list = lambda lst1, lst2: [lst1[i] + lst2[i] for i in range(len(lst1))]"}
{"original_text": "Write a function to add two lists using map and lambda function.", "original_code": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)", "transformed_text": "Add two lists using map and lambda.", "transformed_code": "add_list = lambda nums1, nums2: list(map(lambda x, y: x + y, nums1, nums2))"}
{"original_text": "Write a function to remove consecutive duplicates of a given list.", "original_code": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] ", "transformed_text": "Remove consecutive duplicates from a list.", "transformed_code": "from itertools import groupby; consecutive_duplicates = lambda nums: [key for key, group in groupby(nums)]"}
{"original_text": "Write a function to find the lateral surface area of a cone.", "original_code": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA", "transformed_text": "Calculate the lateral surface area of a cone.", "transformed_code": "lateralsurface_cone = lambda r, h: math.pi * r * math.sqrt(r * r + h * h)"}
{"original_text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "original_code": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r", "transformed_text": "Replace spaces, commas, and dots with a colon.", "transformed_code": "replace_specialchar = lambda text: re.sub('[ ,.]', ':', text)"}
{"original_text": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "original_code": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result", "transformed_text": "Find the index of the first occurrence of a number in a sorted array.", "transformed_code": "find = lambda A, x: (result := next((i for i, v in enumerate(A) if v == x), -1)) or result"}
{"original_text": "Write a python function to find sum of products of all possible subarrays.", "original_code": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)", "transformed_text": "Find the sum of products of all subarrays.", "transformed_code": "sum_Of_Subarray_Prod = lambda arr, n: sum(arr[i]*(1 + sum(arr[j] for j in range(i, n))) for i in range(n-1, -1, -1))"}
{"original_text": "Write a python function to toggle bits of the number except the first and the last bit.", "original_code": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ", "transformed_text": "Toggle bits in a number, excluding the first and last bits.", "transformed_code": "toggle_middle_bits = lambda n: 1 if n == 1 else n ^ (lambda n: n | ((n >> 1) | (n >> 2) | (n >> 4) | (n >> 8) | (n >> 16)) >> 1 ^ 1)(n)"}
{"original_text": "Write a function to locate the left insertion point for a specified value in sorted order.", "original_code": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i", "transformed_text": "Find the position to insert a value in sorted order.", "transformed_code": "import bisect; left_insertion = lambda a, x: bisect.bisect_left(a, x)"}
{"original_text": "Write a function to check whether the given string is starting with a vowel or not using regex.", "original_code": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") ", "transformed_text": "Check if a string starts with a vowel using regex.", "transformed_code": "import re\ncheck_str = lambda s: 'Valid' if re.match('^[aeiouAEIOU]', s) else 'Invalid'"}
{"original_text": "Write a function to calculate the geometric sum of n-1.", "original_code": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "transformed_text": "Calculate the geometric sum for n-1.", "transformed_code": "geometric_sum = lambda n: 0 if n < 0 else 1 / (2 ** n) + geometric_sum(n - 1)"}
{"original_text": "Write a python function to find the index of smallest triangular number with n digits.", "original_code": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); ", "transformed_text": "Find index of smallest triangular number with n digits.", "transformed_code": "import math; find_Index=lambda n: round(math.sqrt(2 * 10**(n - 1)));"}
{"original_text": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "original_code": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) ", "transformed_text": "Convert a tuple to a dictionary with key-value pairs.", "transformed_code": "tuple_to_dict = lambda test_tup: dict(test_tup[i:i+2] for i in range(0, len(test_tup), 2))"}
{"original_text": "Write a python function to check whether all the characters are same or not.", "original_code": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True", "transformed_text": "Create a function to check if all characters are the same.", "transformed_code": "all_Characters_Same = lambda s: all(c == s[0] for c in s)"}
{"original_text": "Write a function to caluclate the area of a tetrahedron.", "original_code": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area", "transformed_text": "Calculate tetrahedron area.", "transformed_code": "import math; area_tetrahedron = lambda side: math.sqrt(3) * (side ** 2)"}
{"original_text": "Write a function to rotate a given list by specified number of items to the right direction.", "original_code": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result", "transformed_text": "Rotate a list to the right by a given number of items.", "transformed_code": "rotate_right = lambda lst, m: lst[-m:] + lst[:-m]"}
{"original_text": "Write a function to check if the given tuple has any none value or not.", "original_code": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) ", "transformed_text": "Check for any None values in the tuple.", "transformed_code": "check_none = lambda test_tup: any(ele is None for ele in test_tup)"}
{"original_text": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "original_code": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "transformed_text": "Find numbers in a range divisible by their digits.", "transformed_code": "divisible_by_digits = lambda startnum, endnum: [n for n in range(startnum, endnum+1) if all(n % int(x) == 0 for x in str(n) if int(x) != 0)]"}
{"original_text": "Write a function to find area of a sector.", "original_code": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea", "transformed_text": "Calculate the area of a sector.", "transformed_code": "sector_area = lambda r, a: (22/7 * r**2 * a / 360) if a < 360 else None"}
{"original_text": "Write a function to find the longest common subsequence for the given three string sequence.", "original_code": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]", "transformed_text": "Find the longest common subsequence of three strings.", "transformed_code": "lcs_of_three = lambda X, Y, Z, m, n, o: [[[0]* (o+1) for _ in range(n+1)] for _ in range(m+1)] if i == 0 or j == 0 or k == 0 else L[i-1][j-1][k-1]+1 if X[i-1] == Y[j-1] == Z[k-1] else max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) for i in range(m+1) for j in range(n+1) for k in range(o+1)]"}
{"original_text": "Write a function to put spaces between words starting with capital letters in a given string by using regex.", "original_code": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "transformed_text": "Add spaces before capital letters in a string.", "transformed_code": "import re; capital_words_spaces = lambda s: re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", s)"}
{"original_text": "Write a function to sort a given list of strings of numbers numerically.", "original_code": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result", "transformed_text": "Sort a list of numeric strings.", "transformed_code": "sort_numeric_strings = lambda nums_str: sorted(map(int, nums_str))"}
{"original_text": "Write a function to add the given tuple to the given list.", "original_code": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) ", "transformed_text": "Add a tuple to a list.", "transformed_code": "add_tuple = lambda lst, tup: lst + tup"}
{"original_text": "Write a function to check if the given array represents min heap or not.", "original_code": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child", "transformed_text": "Check if the array is a min heap.", "transformed_code": "check_min_heap = lambda arr, i: (2 * i + 2 > len(arr)) or (arr[i] <= arr[2 * i + 1] and check_min_heap(arr, 2 * i + 1) and ((2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] and check_min_heap(arr, 2 * i + 2))))"}
{"original_text": "Write a function to find the nth jacobsthal number.", "original_code": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]", "transformed_text": "Find the nth jacobsthal number.", "transformed_code": "jacobsthal_num = lambda n: (lambda dp: [dp.append(0) if i == 0 else dp.append(1) if i == 1 else dp.append(dp[i - 1] + 2 * dp[i - 2]) for i in range(n + 1)])([])"}
{"original_text": "Write a function to find minimum k records from tuple list.", "original_code": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) ", "transformed_text": "Get minimum k records from a list of tuples.", "transformed_code": "min_k = lambda test_list, K: sorted(test_list, key=lambda x: x[1])[:K]"}
{"original_text": "Write a function to find common index elements from three lists.", "original_code": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result", "transformed_text": "Find common elements at the same indexes in three lists.", "transformed_code": "extract_index_list = lambda l1, l2, l3: [m for m, n, o in zip(l1, l2, l3) if m == n == o]"}
{"original_text": "Write a function to find the second smallest number in a list.", "original_code": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] ", "transformed_text": "Find the second smallest number in a list.", "transformed_code": "second_smallest = lambda numbers: sorted(set(numbers))[1] if len(numbers)>1 else None"}
{"original_text": "Write a function that matches a string that has an a followed by zero or one 'b'.", "original_code": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "transformed_text": "Find a string with an a followed by an optional b.", "transformed_code": "import re; text_match_zero_one = lambda text: 'Found a match!' if re.search('ab?', text) else 'Not matched!'"}
{"original_text": "Write a function to count the pairs of reverse strings in the given string list.", "original_code": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)", "transformed_text": "Count reverse string pairs in a list.", "transformed_code": "count_reverse_pairs = lambda test_list: sum(1 for idx in range(len(test_list)) for idxn in range(idx, len(test_list)) if test_list[idxn] == ''.join(reversed(test_list[idx])))"}
{"original_text": "Write a function to count number of unique lists within a list.", "original_code": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "transformed_text": "Count unique lists in a list.", "transformed_code": "unique_sublists = lambda list1: {a: sum(b) for a, b in {tuple(l): [] for l in list1}.items()}"}
{"original_text": "Write a function to check a decimal with a precision of 2.", "original_code": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)", "transformed_text": "Create a function to validate decimals up to two places.", "transformed_code": "is_decimal = lambda num: bool(re.search(r'^[0-9]+(\\.[0-9]{1,2})?$', num))"}
{"original_text": "Write a python function to check whether an array contains only one distinct element or not.", "original_code": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')", "transformed_text": "Check if an array has only one unique element.", "transformed_code": "unique_Element = lambda arr: 'YES' if len(set(arr)) == 1 else 'NO'"}
{"original_text": "Write a function to caluclate arc length of an angle.", "original_code": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength", "transformed_text": "Calculate arc length for a given angle.", "transformed_code": "arc_length = lambda d, a: (22/7 * d * a / 360) if a < 360 else None"}
{"original_text": "Write a function to check whether the given month number contains 30 days or not.", "original_code": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False", "transformed_text": "Check if a month has 30 days.", "transformed_code": "check_month = lambda month: month in {4, 6, 9, 11}"}
{"original_text": "Write a python function to find the minimum difference between any two elements in a given array.", "original_code": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff ", "transformed_text": "Find minimum difference between two elements in an array.", "transformed_code": "find_Min_Diff = lambda arr, n: min(arr[i+1] - arr[i] for i in range(n-1) if arr[i+1] - arr[i] > 0)"}
{"original_text": "Write a python function to count numeric values in a given string.", "original_code": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr", "transformed_text": "Count numeric values in a string.", "transformed_code": "number_ctr = lambda s: sum(c.isdigit() for c in s)"}
{"original_text": "Write a function to find nth polite number.", "original_code": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "transformed_text": "Find nth polite number.", "transformed_code": "import math; is_polite = lambda n: int(n + 1 + math.log(n + math.log(n, 2), 2))"}
{"original_text": "Write a function to iterate over all pairs of consecutive items in a given list.", "original_code": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp", "transformed_text": "Create a function to get consecutive pairs from a list.", "transformed_code": "pair_wise = lambda l1: [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]"}
{"original_text": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.", "original_code": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count", "transformed_text": "Count pairs with a specific sum.", "transformed_code": "get_pairs_count = lambda arr, n, total: sum(1 for i in range(n) for j in range(i + 1, n) if arr[i] + arr[j] == total)"}
{"original_text": "Write a python function to check for odd parity of a given number.", "original_code": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False", "transformed_text": "Check if a number has odd parity.", "transformed_code": "check_odd_parity = lambda x: (bin(x).count('1') % 2 == 1)"}
{"original_text": "Write a python function to get the difference between two lists.", "original_code": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n ", "transformed_text": "Get the difference of two lists.", "transformed_code": "Diff = lambda li1, li2: list(set(li1) - set(li2)) + list(set(li2) - set(li1))"}
{"original_text": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "original_code": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm ", "transformed_text": "Find sum of fourth powers of first n odd numbers.", "transformed_code": "odd_Num_Sum = lambda n: sum((2*i-1)**4 for i in range(1, n+1))"}
{"original_text": "Write a function to check if the given expression is balanced or not.", "original_code": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack", "transformed_text": "Check if the expression is balanced.", "transformed_code": "check_expression = lambda exp: False if len(exp) & 1 else (lambda stack: all((stack.append(ch) if ch in '({[' else not stack and (top := stack.pop()) and (top == '(' and ch == ')') or (top == '{' and ch == '}') or (top == '[' and ch == ']')) for ch in exp)) or not stack)([]))"}
{"original_text": "Write a function to remove all the words with k length in the given string.", "original_code": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) ", "transformed_text": "Remove words of specified length from a string.", "transformed_code": "remove_length = lambda s, k: ' '.join(ele for ele in s.split() if len(ele) != k)"}
{"original_text": "Write a function to find the occurrence and position of the substrings within a string.", "original_code": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)", "transformed_text": "Find occurrences and positions of substrings in a string.", "transformed_code": "import re; occurance_substring=lambda text,pattern:[(m.group(), m.start(), m.end()) for m in re.finditer(pattern, text)]"}
{"original_text": "Write a function to check if the string is a valid email address or not using regex.", "original_code": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") ", "transformed_text": "Check email validity using regex.", "transformed_code": "import re; check_email = lambda email: \"Valid Email\" if re.search('^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$', email) else \"Invalid Email\""}
{"original_text": "Write a python function to check whether every odd index contains odd numbers of a given list.", "original_code": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "transformed_text": "Check if odd indices have odd numbers in a list.", "transformed_code": "odd_position = lambda nums: all(nums[i] % 2 == i % 2 for i in range(len(nums)))"}
{"original_text": "Write a function to count those characters which have vowels as their neighbors in the given string.", "original_code": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) ", "transformed_text": "Count characters next to vowels in a string.", "transformed_code": "count_vowels = lambda s: sum(1 for i in range(len(s)) if s[i] not in 'aeiou' and (s[i-1] in 'aeiou' or s[i+1] in 'aeiou')) + (s[0] not in 'aeiou' and s[1] in 'aeiou') + (s[-1] not in 'aeiou' and s[-2] in 'aeiou')"}
{"original_text": "Write a python function to find the sum of non-repeated elements in a given array.", "original_code": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum", "transformed_text": "Find the sum of unique numbers in an array.", "transformed_code": "find_Sum = lambda arr: sum(set(arr))"}
{"original_text": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "original_code": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]", "transformed_text": "Pack consecutive duplicates into sublists.", "transformed_code": "from itertools import groupby; pack_consecutive_duplicates = lambda list1: [list(group) for key, group in groupby(list1)]"}
{"original_text": "Write a function to count the number of unique lists within a list.", "original_code": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "transformed_text": "Count unique lists in a list.", "transformed_code": "unique_sublists = lambda lst: {tuple(l): lst.count(l) for l in set(map(tuple, lst))}"}
{"original_text": "Write a function to find the combinations of sums with tuples in the given tuple list.", "original_code": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) ", "transformed_text": "Find sums of tuples in the list.", "transformed_code": "from itertools import combinations; find_combinations = lambda test_list: [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]"}
{"original_text": "Write a python function to check whether the count of divisors is even or odd.", "original_code": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") ", "transformed_text": "Check if the number of divisors is even or odd.", "transformed_code": "import math; count_Divisors = lambda n: 'Even' if sum(1 + (n // i != i) for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0) % 2 == 0 else 'Odd'"}
{"original_text": "Write a python function to find the sum of all odd length subarrays.", "original_code": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum", "transformed_text": "Find the sum of all odd length subarrays.", "transformed_code": "Odd_Length_Sum = lambda arr: sum((((i + 1) * (len(arr) - i) + 1) // 2) * arr[i] for i in range(len(arr)))"}
{"original_text": "Write a function to convert rgb color to hsv color.", "original_code": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v", "transformed_text": "Convert RGB to HSV color.", "transformed_code": "rgb_to_hsv = lambda r, g, b: (h, s, v) for r, g, b in [r/255.0, g/255.0, b/255.0]; mx, mn, df = max((r, g, b)), min((r, g, b)), mx - mn; h = 0 if mx == mn else (60 * ((g - b) / df) + 360) % 360 if mx == r else (60 * ((b - r) / df) + 120) % 360 if mx == g else (60 * ((r - g) / df) + 240) % 360); s = 0 if mx == 0 else (df / mx) * 100; v = mx * 100"}
{"original_text": "Write a function to find the product of first even and odd number of a given list.", "original_code": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)", "transformed_text": "Find product of first even and odd numbers in a list.", "transformed_code": "mul_even_odd = lambda list1: next((el for el in list1 if el%2==0),-1) * next((el for el in list1 if el%2!=0),-1)"}
{"original_text": "Write a function to convert tuple string to integer tuple.", "original_code": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) ", "transformed_text": "Convert a tuple string into a tuple of integers.", "transformed_code": "tuple_str_int = lambda s: tuple(int(n) for n in s[1:-1].split(', '))"}
{"original_text": "Write a function to locate the right insertion point for a specified value in sorted order.", "original_code": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i", "transformed_text": "Find the insertion point for a value in sorted order.", "transformed_code": "import bisect; right_insertion = lambda a, x: bisect.bisect_right(a, x)"}
{"original_text": "Write a function that matches a string that has an a followed by three 'b'.", "original_code": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "transformed_text": "Find a string with an 'a' followed by three 'b'", "transformed_code": "import re; text_match_three = lambda text: 'Found a match!' if re.search('ab{3}', text) else 'Not matched!'"}
{"original_text": "Write a function to create a new tuple from the given string and list.", "original_code": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) ", "transformed_text": "Create a tuple from a string and a list.", "transformed_code": "new_tuple = lambda l, s: tuple(l + [s])"}
{"original_text": "Write a function to calculate the perimeter of a regular polygon.", "original_code": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter", "transformed_text": "Calculate the perimeter of a regular polygon.", "transformed_code": "perimeter_polygon = lambda s, l: s * l"}
{"original_text": "Write a python function to check whether every even index contains even numbers of a given list.", "original_code": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "transformed_text": "Check if even indices have even numbers in a list.", "transformed_code": "even_position = lambda nums: all(nums[i] % 2 == i % 2 for i in range(len(nums)))"}
{"original_text": "Write a function to remove the nested record from the given tuple.", "original_code": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) ", "transformed_text": "Remove nested tuples from a tuple.", "transformed_code": "remove_nested = lambda t: tuple(e for e in t if not isinstance(e, tuple))"}
{"original_text": "Write a python function to count the number of lists in a given number of lists.", "original_code": "def count_list(input_list): \r\n    return len(input_list)", "transformed_text": "Count lists in a list.", "transformed_code": "count_list = lambda input_list: len(input_list)"}
{"original_text": "Write a python function to find the last position of an element in a sorted array.", "original_code": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res", "transformed_text": "Find the last position of an element in a sorted array.", "transformed_code": "last = lambda arr, x, n: (lambda low, high, res: (lambda: (res := -1) or ([(res := mid, (low := mid + 1)) if arr[mid] == x else (high := mid - 1 if arr[mid] > x else low := mid + 1) for mid in iter(lambda: (low <= high), False) ]))())(0, n - 1, res))"}
{"original_text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "original_code": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "transformed_text": "Find a string with 'a' followed by anything and ending with 'b'.", "transformed_code": "import re; text_starta_endb = lambda text: 'Found a match!' if re.search('a.*?b$', text) else 'Not matched!'"}
{"original_text": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.", "original_code": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items", "transformed_text": "Find n items with the lowest price from the dataset.", "transformed_code": "cheap_items = lambda items, n: heapq.nsmallest(n, items, key=lambda s: s['price'])"}
{"original_text": "Write function to find the sum of all items in the given dictionary.", "original_code": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum", "transformed_text": "Find the total of items in a dictionary.", "transformed_code": "return_sum = lambda d: sum(d.values())"}
{"original_text": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "original_code": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)", "transformed_text": "Find the sum of odd numbers between l and r.", "transformed_code": "sum_Odd = lambda n: (n + 1) // 2 * ((n + 1) // 2);\nsum_in_Range = lambda l, r: sum_Odd(r) - sum_Odd(l - 1)"}
{"original_text": "Write a python function to find the sum of an array.", "original_code": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  ", "transformed_text": "Find the sum of an array.", "transformed_code": "sum = lambda arr: sum(arr)"}
{"original_text": "Write a python function to left rotate the bits of a given number.", "original_code": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  ", "transformed_text": "Create a function to rotate bits left in a number.", "transformed_code": "left_Rotate = lambda n, d: (n << d) | (n >> (32 - d))"}
{"original_text": "Write a function to remove all whitespaces from a string.", "original_code": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))", "transformed_text": "Remove whitespaces from a string.", "transformed_code": "remove_all_spaces = lambda text: re.sub(r'\\s+', '', text)"}
{"original_text": "Write a python function to count the number of equal numbers from three given integers.", "original_code": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))", "transformed_text": "Count equal numbers from three integers.", "transformed_code": "test_three_equal = lambda x, y, z: 0 if len(set([x, y, z])) == 3 else (4 - len(set([x, y, z])))"}
{"original_text": "Write a python function to count the number of rotations required to generate a sorted array.", "original_code": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0", "transformed_text": "Count rotations to sort an array.", "transformed_code": "count_Rotation=lambda arr,n: next((i for i in range(1,n) if arr[i]<arr[i-1]),0)"}
{"original_text": "Write a python function to check whether the given number is a perfect square or not.", "original_code": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False", "transformed_text": "Check if a number is a perfect square.", "transformed_code": "is_Perfect_Square = lambda n: any(i * i == n for i in range(1, int(n**0.5) + 1))"}
{"original_text": "Write a python function to check whether the product of numbers is even or not.", "original_code": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False", "transformed_text": "Create a function to check if the product is even.", "transformed_code": "is_Product_Even = lambda arr: any(x % 2 == 0 for x in arr)"}
{"original_text": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "original_code": "def max_sum_list(lists):\r\n return max(lists, key=sum)", "transformed_text": "Find the list with the highest sum from a list of lists.", "transformed_code": "max_sum_list = lambda lists: max(lists, key=sum)"}
{"original_text": "Write a function to find maximum run of uppercase characters in the given string.", "original_code": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)", "transformed_text": "Find maximum sequence of uppercase letters in a string.", "transformed_code": "max_run_uppercase = lambda s: max(len(r) for r in s.split() if r.isupper())"}
{"original_text": "Write a python function to find the first odd number in a given list of numbers.", "original_code": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd", "transformed_text": "Find the first odd number in a list.", "transformed_code": "first_odd = lambda nums: next((el for el in nums if el%2!=0),-1)"}
{"original_text": "Write a function to check if the given tuples contain the k or not.", "original_code": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) ", "transformed_text": "Check if tuples contain the specified value.", "transformed_code": "check_K = lambda test_tup, K: any(ele == K for ele in test_tup)"}
{"original_text": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "original_code": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "transformed_text": "Check if elements in the second tuple are smaller than the first.", "transformed_code": "check_smaller = lambda tup1, tup2: all(x > y for x, y in zip(tup1, tup2))"}
{"original_text": "Write a function to iterate over elements repeating each as many times as its count.", "original_code": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())", "transformed_text": "Iterate through elements and repeat each by its count.", "transformed_code": "from collections import Counter; count_variable = lambda a,b,c,d: list(Counter(p=a, q=b, r=c, s=d).elements())"}
{"original_text": "Write a function to check if two lists of tuples are identical or not.", "original_code": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) ", "transformed_text": "Check if two lists of tuples are identical.", "transformed_code": "check_identical = lambda lst1, lst2: lst1 == lst2"}
{"original_text": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "original_code": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))", "transformed_text": "Abbreviate 'road' to 'rd.' in a string.", "transformed_code": "import re; road_rd = lambda street: re.sub('Road$', 'Rd.', street)"}
{"original_text": "Write a function to find length of the string.", "original_code": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count", "transformed_text": "Find the length of a string.", "transformed_code": "string_length = lambda str1: sum(1 for _ in str1)"}
{"original_text": "Write a function to find the area of a rombus.", "original_code": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area", "transformed_text": "Find the area of a rhombus.", "transformed_code": "rombus_area=lambda p,q:(p*q)/2"}
{"original_text": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "original_code": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr", "transformed_text": "Sort an array of 0s, 1s, and 2s.", "transformed_code": "sort_by_dnf=lambda arr,n:(low:=mid:=0,high:=n-1,[(arr.insert(low,arr[mid]),low:=low+1,mid:=mid+1) if arr[mid]==0 else (mid:=mid+1) if arr[mid]==1 else (arr[mid],arr[high]:=arr[high],arr[mid],high:=high-1)][0] for _ in range(n) if mid<=high],arr)[-1]"}
{"original_text": "Write a function to clear the values of the given tuples.", "original_code": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) ", "transformed_text": "Clear values from the provided tuple.", "transformed_code": "clear_tuple = lambda t: ()"}
{"original_text": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "original_code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result", "transformed_text": "Find numbers divisible by m or n from a list.", "transformed_code": "div_of_nums = lambda nums, m, n: list(filter(lambda x: x % m == 0 or x % n == 0, nums))"}
{"original_text": "Write a python function to count lower case letters in a given string.", "original_code": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr", "transformed_text": "Count lower case letters in a string.", "transformed_code": "lower_ctr = lambda s: sum(1 for c in s if 'a' <= c <= 'z')"}
{"original_text": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "original_code": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n", "transformed_text": "Count consecutive duplicates in a list.", "transformed_code": "count_duplic = lambda lst: ([],[]) if not lst else ([lst[i] for i in range(len(lst)-1) if lst[i] != lst[i+1]] + [lst[-1]], [sum(1 for j in range(len(lst)) if lst[j] == lst[i]) for i in range(len(lst)) if lst[i] != lst[i+1]] + [sum(1 for j in range(len(lst)) if lst[j] == lst[-1])])"}
{"original_text": "Write a function to check whether the given month number contains 28 days or not.", "original_code": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False", "transformed_text": "Check if the month number has 28 days.", "transformed_code": "check_monthnum = lambda m: m == 2"}
{"original_text": "Write a function to merge two dictionaries into a single expression.", "original_code": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict", "transformed_text": "Merge two dictionaries into one.", "transformed_code": "merge = lambda d1, d2: dict(collections.ChainMap({}, d1, d2))"}
{"original_text": "Write a function to return true if the password is valid.", "original_code": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False", "transformed_text": "Create a function to check password validity.", "transformed_code": "import re; pass_validity = lambda p: all([6 <= len(p) <= 12, re.search(\"[a-z]\", p), re.search(\"[0-9]\", p), re.search(\"[A-Z]\", p), re.search(\"[$#@]\", p), not re.search(\"\\s\", p)])"}
{"original_text": "Write a function to check if the given string starts with a substring using regex.", "original_code": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")", "transformed_text": "Check if a string starts with a substring using regex.", "transformed_code": "import re\ncheck_substring = lambda s, sub: \"string starts with substring\" if re.match(f'\\A{re.escape(sub)}', s) else \"doesn't start with substring\""}
{"original_text": "Write a python function to remove even numbers from a given list.", "original_code": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l", "transformed_text": "Remove even numbers from a list.", "transformed_code": "remove_even = lambda l: [x for x in l if x % 2 != 0]"}
{"original_text": "Write a python function to access multiple elements of specified index from a given list.", "original_code": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result", "transformed_text": "Get elements from a list at specified indices.", "transformed_code": "access_elements = lambda nums, list_index: [nums[i] for i in list_index]"}
{"original_text": "Write a python function to find the type of triangle from the given sides.", "original_code": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") ", "transformed_text": "Find the triangle type from its sides.", "transformed_code": "check_Type_Of_Triangle = lambda a,b,c: \"Right-angled Triangle\" if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2 else \"Obtuse-angled Triangle\" if a**2 > b**2 + c**2 or b**2 > a**2 + c**2 or c**2 > a**2 + b**2 else \"Acute-angled Triangle\""}
{"original_text": "Write a function to sum a specific column of a list in a given list of lists.", "original_code": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result", "transformed_text": "Create a function to sum a column in a list of lists.", "transformed_code": "sum_column = lambda list1, C: sum(row[C] for row in list1)"}
{"original_text": "Write a function to count alphabets,digits and special charactes in a given string.", "original_code": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   ", "transformed_text": "Count characters: alphabets, digits, and specials in a string.", "transformed_code": "count = lambda s: (sum(c.isalpha() for c in s), sum(c.isdigit() for c in s), len(s) - sum(c.isalnum() for c in s))"}
{"original_text": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "original_code": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) ", "transformed_text": "Find the second most frequent string in a sequence.", "transformed_code": "from collections import Counter; second_frequent=lambda input: next(key for key, val in Counter(input).items() if val==sorted(Counter(input).values(),reverse=True)[1])"}
{"original_text": "Write a function to round up a number to specific digits.", "original_code": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)", "transformed_text": "Create a function to round a number up.", "transformed_code": "import math; round_up = lambda a, digits: round(math.ceil(a / 10**-digits) * 10**-digits, digits)"}
{"original_text": "Write a python function to count equal element pairs from the given array.", "original_code": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; ", "transformed_text": "Count pairs of equal elements in the array.", "transformed_code": "count_Pairs=lambda arr,n:sum(arr[i]==arr[j]for i in range(n)for j in range(i+1,n))"}
{"original_text": "Write a function to extract the maximum numeric value from a string by using regex.", "original_code": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)", "transformed_text": "Extract the maximum number from a string using regex.", "transformed_code": "import re; extract_max = lambda input: max(map(int, re.findall('\\d+', input)))"}
{"original_text": "Write a function to get dictionary keys as a list.", "original_code": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list", "transformed_text": "Get list of dictionary keys.", "transformed_code": "get_key = lambda d: list(d)"}
{"original_text": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "original_code": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix", "transformed_text": "Generate a square spiral matrix of squared numbers from 1 to n.", "transformed_code": "generate_matrix = lambda n: (matrix := [[0]*n for _ in range(n)], row_st := 0, row_ed := n-1, col_st := 0, col_ed := n-1, current := 1, exec('while True: break if current > n*n else (for c in range(col_st, col_ed+1): matrix[row_st][c] = current; current += 1); row_st += 1; for r in range(row_st, row_ed+1): matrix[r][col_ed] = current; current += 1; col_ed -= 1; for c in range(col_ed, col_st-1, -1): matrix[row_ed][c] = current; current += 1; row_ed -= 1; for r in range(row_ed, row_st-1, -1): matrix[r][col_st] = current; current += 1; col_st += 1'))[0]"}
{"original_text": "Write a python function to find the slope of a line.", "original_code": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  ", "transformed_text": "Find the slope of a line.", "transformed_code": "slope = lambda x1, y1, x2, y2: (y2 - y1) / (x2 - x1)"}
{"original_text": "Write a function to find length of the subarray having maximum sum.", "original_code": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)", "transformed_text": "Find the length of the subarray with the maximum sum.", "transformed_code": "max_sub_array_sum=lambda a,s:(lambda m=0,s=0,e=0:((s:=s+1,m:=max(m,x:=m+x)if m<x else m)for x in a if (x:=m):e-s+1),e))(0,0)"}
{"original_text": "Write a python function to find the cube sum of first n odd natural numbers.", "original_code": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum", "transformed_text": "Find the cube sum of the first n odd numbers.", "transformed_code": "cube_sum = lambda n: sum((2*i+1)**3 for i in range(n))"}
{"original_text": "Write a python function to find minimum number swaps required to make two binary strings equal.", "original_code": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  ", "transformed_text": "Find minimum swaps to make two binary strings equal.", "transformed_code": "min_Swaps = lambda s1, s2: (c0 := sum(s1[i] == '0' and s2[i] == '1' for i in range(len(s1))), c1 := sum(s1[i] == '1' and s2[i] == '0' for i in range(len(s1))), result := c0 // 2 + c1 // 2, result + 2 if (c0 + c1) % 2 == 0 else -1 if c0 % 2 + c1 % 2 else result)"}
{"original_text": "Write a function to sort the tuples alphabetically by the first item of each tuple.", "original_code": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup", "transformed_text": "Sort tuples by the first item.", "transformed_code": "sort_tuple = lambda tup: sorted(tup, key=lambda x: x[0])"}
{"original_text": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "original_code": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  ", "transformed_text": "Check if quadratic roots are equal and opposite.", "transformed_code": "Check_Solution = lambda a,b,c: \"Yes\" if b == 0 else \"No\""}
{"original_text": "Write a function to count the number of inversions in the given array.", "original_code": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count ", "transformed_text": "Count inversions in the array.", "transformed_code": "get_inv_count = lambda arr, n: sum(1 for i in range(n) for j in range(i + 1, n) if arr[i] > arr[j])"}
{"original_text": "Write a function to find the number which occurs for odd number of times in the given array.", "original_code": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1", "transformed_text": "Find the number that appears an odd number of times in the array.", "transformed_code": "get_odd_occurence = lambda arr: next((x for x in arr if arr.count(x) % 2 != 0), -1)"}
{"original_text": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "original_code": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]", "transformed_text": "Find the nth super ugly number using a list of primes.", "transformed_code": "import heapq\nnth_super_ugly_number = lambda n, primes: (lambda uglies:[(uglies.append(ugly) for ugly in iter(lambda: next(merged), None) if ugly != uglies[-1]) or uglies[-1])(1) for merged in [heapq.merge(*map(lambda p: (ugly * p for ugly in uglies), primes))]])"}
{"original_text": "Write a python function to find the kth element in an array containing odd elements first and then even elements.", "original_code": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; ", "transformed_text": "Find the kth element in an array of odd and then even numbers.", "transformed_code": "get_Number = lambda n, k: [(i := 0) or [(i := i + 1) or (odd := odd + 2) for odd in range(1, n + 1, 2)] + [(i := i + 1) or (even := even + 2) for even in range(2, n + 1, 2)]][k - 1]"}
{"original_text": "Write a python function to count the number of digits in factorial of a given number.", "original_code": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; ", "transformed_text": "Count digits in a number's factorial.", "transformed_code": "import math\nfind_digits = lambda n: 0 if n < 0 else 1 if n <= 1 else math.floor(n * math.log10(n / math.e) + math.log10(2 * math.pi * n) / 2) + 1"}
{"original_text": "Write a function to find the minimum number of platforms required for a railway/bus station.", "original_code": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result", "transformed_text": "Find minimum platforms needed for a station.", "transformed_code": "find_platform = lambda arr, dep, n: (sorted(arr), sorted(dep), max(sum((i:=0, j:=0, plat_needed:=1, result:=1) or [plat_needed := plat_needed + 1 if arr[i] <= dep[j] else plat_needed - 1 if arr[i] > dep[j] else plat_needed for i in range(1, n) if j < n] or result for j in range(n) if plat_needed > result))"}
{"original_text": "Write a python function to copy a list from a singleton tuple.", "original_code": "def lcopy(xs):\n  return xs[:]\n", "transformed_text": "Create a Python function to copy a list from a tuple.", "transformed_code": "lcopy = lambda xs: xs[:] "}
{"original_text": "Write a function to find the area of a trapezium.", "original_code": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area", "transformed_text": "Calculate area of a trapezium.", "transformed_code": "area_trapezium = lambda b1, b2, h: 0.5 * (b1 + b2) * h"}
{"original_text": "Write a python function to find sum of all prime divisors of a given number.", "original_code": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] ", "transformed_text": "Find sum of all prime divisors of a number.", "transformed_code": "Sum=lambda N:sum(i for i in range(2,N+1) if all(i%p for p in range(2,int(i**0.5)+1)) and N%i==0)"}
{"original_text": "Write a function to check if a triangle of positive area is possible with the given angles.", "original_code": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False", "transformed_text": "Check if angles can form a triangle.", "transformed_code": "is_triangleexists = lambda a, b, c: (a + b + c == 180 and a > 0 and b > 0 and c > 0)"}
{"original_text": "Write a python function to find sum of inverse of divisors.", "original_code": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); ", "transformed_text": "Find sum of inverse of divisors.", "transformed_code": "Sum_of_Inverse_Divisors = lambda N, Sum: round(float(Sum) / float(N), 2)"}
{"original_text": "Write a python function to remove negative numbers from a list.", "original_code": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list", "transformed_text": "Remove negative numbers from a list.", "transformed_code": "remove_negs = lambda num_list: [item for item in num_list if item >= 0]"}
{"original_text": "Write a python function to find sum of odd factors of a number.", "original_code": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res ", "transformed_text": "Find the sum of odd factors of a number.", "transformed_code": "import math; sum_of_odd_Factors = lambda n: (res := 1, (n := n // 2) if n % 2 == 0 else None, [res := res * (curr_sum := 1 + (curr_term := 1, count := 0, (curr_term := curr_term * i, curr_sum := curr_sum + curr_term)[0] while n % i == 0 and (n := n // i) and (count := count + 1)) for i in range(3, int(math.sqrt(n) + 1))] and (res := res * (1 + n) if n >= 2 else res))[0] or res)"}
{"original_text": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "original_code": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap", "transformed_text": "Convert a list to a heap using heap queue.", "transformed_code": "import heapq as hq; raw_heap=lambda x:hq.heapify(x) or x"}
{"original_text": "Write a python function to check for even parity of a given number.", "original_code": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False", "transformed_text": "Check even parity of a number.", "transformed_code": "check_even_parity = lambda x: bin(x).count('1') % 2 == 0"}
{"original_text": "Write a python function to find minimum adjacent swaps required to sort binary array.", "original_code": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count ", "transformed_text": "Find minimum adjacent swaps to sort binary array.", "transformed_code": "find_Min_Swaps = lambda arr, n: sum((noOfZeroes := [0] * n)[i] := noOfZeroes[i] + (arr[i] == 0) for i in range(n - 1, -1, -1) if arr[i] == 1 for i in range(n))"}
{"original_text": "Write a function to list out the list of given strings individually using map function.", "original_code": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result ", "transformed_text": "Use map to list each string from the provided list.", "transformed_code": "listify_list = lambda list1: list(map(list, list1))"}
{"original_text": "Write a function to count number of lists in a given list of lists and square the count.", "original_code": "def count_list(input_list): \r\n    return (len(input_list))**2", "transformed_text": "Count lists in a list and return the square of the count.", "transformed_code": "count_list = lambda input_list: len(input_list)**2"}
{"original_text": "Write a function to generate all sublists of a given list.", "original_code": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs", "transformed_text": "Generate all sublists from a list.", "transformed_code": "from itertools import combinations; sub_lists = lambda my_list: [list(x) for i in range(len(my_list)+1) for x in combinations(my_list, i)]"}
{"original_text": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "original_code": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") ", "transformed_text": "Check if a string ends with alphanumeric characters using regex.", "transformed_code": "import re; check_alphanumeric = lambda string: \"Accept\" if re.search('[a-zA-Z0-9]$', string) else \"Discard\""}
{"original_text": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "original_code": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result", "transformed_text": "Find anagrams of a string in a list using a lambda.", "transformed_code": "from collections import Counter; anagram_lambda = lambda texts, s: list(filter(lambda x: Counter(s) == Counter(x), texts))"}
{"original_text": "Write a function to find the occurrences of n most common words in a given text.", "original_code": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)", "transformed_text": "Find the most common words in text.", "transformed_code": "n_common_words = lambda text, n: list(Counter(re.findall('\\w+', text)).most_common(n))"}
{"original_text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "original_code": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans ", "transformed_text": "Find the longest sequence of consecutive integers.", "transformed_code": "find_longest_conseq_subseq = lambda arr, n: (lambda ans, count, v: (ans := 0, count := 0, v.append(arr[0]), [v.append(arr[i]) for i in range(1, n) if arr[i] != arr[i - 1]], [count := count + 1 if i > 0 and v[i] == v[i - 1] + 1 else (count := 1), ans := max(ans, count) for i in range(len(v))], ans)[-1])([], 0, [])"}
{"original_text": "Write a function to find palindromes in a given list of strings using lambda function.", "original_code": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result", "transformed_text": "Find palindromes in a list of strings using a lambda.", "transformed_code": "palindrome_lambda = lambda texts: list(filter(lambda x: x == x[::-1], texts))"}
{"original_text": "Write a function to print n-times a list using map function.", "original_code": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)", "transformed_text": "Use map to repeat a list n times.", "transformed_code": "ntimes_list = lambda nums, n: list(map(lambda x: n*x, nums))"}
{"original_text": "Write a function to check whether the given month name contains 31 days or not.", "original_code": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False", "transformed_text": "Check if the month has 31 days.", "transformed_code": "check_month = lambda month: month in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]"}
{"original_text": "Write a python function to add a minimum number such that the sum of array becomes even.", "original_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "transformed_text": "Add a number to make the sum of the array even.", "transformed_code": "min_Num = lambda arr, n: 1 if sum(x % 2 for x in arr) % 2 else 2"}
{"original_text": "Write a python function to find the length of the last word in a given string.", "original_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "transformed_text": "Find the length of the last word in a string.", "transformed_code": "length_Of_Last_Word = lambda a: len(a.strip().split()[-1])"}
{"original_text": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "original_code": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result", "transformed_text": "Remove sublists from a list outside a given range.", "transformed_code": "remove_list_range = lambda list1, leftrange, rigthrange: [i for i in list1 if min(i) >= leftrange and max(i) <= rigthrange]"}
{"original_text": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "original_code": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)", "transformed_text": "Calculate the sum of positive numbers in a list.", "transformed_code": "sum_positivenum = lambda nums: sum(filter(lambda x: x > 0, nums))"}
{"original_text": "Write a python function to check whether the given strings are rotations of each other or not.", "original_code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "transformed_text": "Check if two strings are rotations of each other.", "transformed_code": "are_Rotations = lambda s1, s2: len(s1) == len(s2) and s2 in (s1 + s1)"}
{"original_text": "Write a function to check if a nested list is a subset of another nested list.", "original_code": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) ", "transformed_text": "Check if one nested list is inside another.", "transformed_code": "check_subset = lambda list1, list2: all(map(list1.__contains__, list2))"}
{"original_text": "Write a function to solve the fibonacci sequence using recursion.", "original_code": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "transformed_text": "Create a recursive fibonacci function.", "transformed_code": "fibonacci = lambda n: 1 if n in {1, 2} else fibonacci(n - 1) + fibonacci(n - 2)"}
{"original_text": "Write a python function to check if the string is a concatenation of another string.", "original_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "transformed_text": "Check if one string can form another.", "transformed_code": "check_Concat = lambda str1, str2: len(str1) % len(str2) == 0 and all(str1[i] == str2[i % len(str2)] for i in range(len(str1)))"}
{"original_text": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "original_code": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) ", "transformed_text": "Find the minimum difference in tuple pairs.", "transformed_code": "min_difference = lambda test_list: min(abs(b - a) for a, b in test_list)"}
{"original_text": "Write a python function to find lcm of two positive integers.", "original_code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "transformed_text": "Find lcm of two positive integers.", "transformed_code": "lcm = lambda x, y: next(z for z in range(max(x, y), x*y+1) if z % x == 0 and z % y == 0)"}
{"original_text": "Write a python function to sort the given string.", "original_code": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) ", "transformed_text": "Sort the given string.", "transformed_code": "sorted_str = ''.join(sorted(str)); return sorted_str"}
{"original_text": "Write a function to check if the given tuple contains only k elements.", "original_code": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) ", "transformed_text": "Check if the tuple has only k elements.", "transformed_code": "check_tuples = lambda test_tuple, K: all(ele in K for ele in test_tuple)"}
{"original_text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "original_code": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "transformed_text": "Match a string with 'a' and ending in 'b'.", "transformed_code": "import re\ntext_match = lambda text: 'Found a match!' if re.search('a.*?b$', text) else 'Not matched!'"}
{"original_text": "Write a python function to find number of solutions in quadratic equation.", "original_code": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") ", "transformed_text": "Find solutions for a quadratic equation.", "transformed_code": "Check_Solution = lambda a,b,c: \"2 solutions\" if (b*b - 4*a*c) > 0 else \"1 solution\" if (b*b - 4*a*c) == 0 else \"No solutions\""}
{"original_text": "Write a function to find the sum of first even and odd number of a given list.", "original_code": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "transformed_text": "Find the sum of the first even and odd numbers from a list.", "transformed_code": "sum_even_odd = lambda lst: next((el for el in lst if el%2==0),-1) + next((el for el in lst if el%2!=0),-1)"}
{"original_text": "Write a function to caluclate perimeter of a parallelogram.", "original_code": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter", "transformed_text": "Calculate the perimeter of a parallelogram.", "transformed_code": "parallelogram_perimeter=lambda b,h:2*(b+h)"}
{"original_text": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "original_code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "transformed_text": "Find numbers divisible by m and n from a list.", "transformed_code": "div_of_nums = lambda nums, m, n: list(filter(lambda x: x % m == 0 and x % n == 0, nums))"}
{"original_text": "Write a python function to check whether all the bits are within a given range or not.", "original_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "transformed_text": "Check if bits are within a specified range.", "transformed_code": "all_bits_set_in_range = lambda n, l, r: (n & ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) == ((1 << r) - 1) ^ ((1 << (l - 1)) - 1))"}
{"original_text": "Write a python function to check whether the two given strings are isomorphic to each other or not.", "original_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "transformed_text": "Check if two strings are isomorphic.", "transformed_code": "is_isomorphic = lambda str1, str2: sorted([str1.index(c) for c in str1]) == sorted([str2.index(c) for c in str2])"}
{"original_text": "Write a function to add all the numbers in a list and divide it with the length of the list.", "original_code": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) ", "transformed_text": "Sum list numbers and divide by the count.", "transformed_code": "sum_num = lambda numbers: sum(numbers) / len(numbers)"}
{"original_text": "Write a python function to check whether the given number is odd or not using bitwise operator.", "original_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "transformed_text": "Check if a number is odd using bitwise operation", "transformed_code": "is_odd = lambda n: n ^ 1 == n - 1"}
{"original_text": "Write a function to substract the elements of the given nested tuples.", "original_code": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "transformed_text": "Create a function to subtract elements in nested tuples.", "transformed_code": "substract_elements = lambda t1, t2: tuple(tuple(a - b for a, b in zip(x, y)) for x, y in zip(t1, t2))"}
{"original_text": "Write a function to reverse each list in a given list of lists.", "original_code": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists ", "transformed_text": "Reverse lists in a list of lists.", "transformed_code": "reverse_list_lists = lambda lists: [sorted(l, reverse=True) for l in lists]"}
{"original_text": "Write a python function to find the index of an extra element present in one sorted array.", "original_code": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n ", "transformed_text": "Find index of an extra element in a sorted array.", "transformed_code": "find_Extra = lambda arr1, arr2, n: next((i for i in range(n) if arr1[i] != arr2[i]), n)"}
{"original_text": "Write a python function to check whether the given two numbers have same number of digits or not.", "original_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "transformed_text": "Check if two numbers have the same digit count.", "transformed_code": "same_length = lambda A, B: len(str(A)) == len(str(B))"}
{"original_text": "Write a function to remove multiple spaces in a string.", "original_code": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))", "transformed_text": "Remove extra spaces from a string.", "transformed_code": "import re; remove_spaces = lambda text: re.sub(' +', ' ', text)"}
{"original_text": "Write a python function to get the last element of each sublist.", "original_code": "def Extract(lst): \r\n    return [item[-1] for item in lst] ", "transformed_text": "Get last elements from each sublist.", "transformed_code": "Extract = lambda lst: [item[-1] for item in lst]"}
{"original_text": "Write a function to convert the given string of float type into tuple.", "original_code": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) ", "transformed_text": "Convert float string to tuple.", "transformed_code": "float_to_tuple = lambda test_str: tuple(map(float, test_str.split(', ')))"}
{"original_text": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "original_code": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]", "transformed_text": "Find maximum sum of non-adjacent subsequences.", "transformed_code": "max_sum_subseq = lambda A: (lambda n: A[0] if n == 1 else (lambda look_up: [look_up.__setitem__(0, A[0]), look_up.__setitem__(1, max(A[0], A[1]))] or [look_up.__setitem__(i, max(look_up[i - 1], look_up[i - 2] + A[i])) for i in range(2, n)]) and look_up[-1])(len(A)))(A)"}
{"original_text": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.", "original_code": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)", "transformed_text": "Sort a list by the last element of each tuple.", "transformed_code": "sort_list_last = lambda tuples: sorted(tuples, key=lambda n: n[-1])"}
{"original_text": "Write a python function to check whether the word is present in a given sentence or not.", "original_code": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False", "transformed_text": "Check if a word exists in a sentence.", "transformed_code": "is_Word_Present = lambda s, w: w in s.split()"}
{"original_text": "Write a function to extract specified number of elements from a given list, which follow each other continuously.", "original_code": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result", "transformed_text": "Extract continuous elements from a list.", "transformed_code": "extract_elements = lambda numbers, n: [i for i, j in groupby(numbers) if len(list(j)) == n]"}
{"original_text": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.", "original_code": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True", "transformed_text": "Check if an array can be sorted using only corner elements.", "transformed_code": "check = lambda arr,n: all(arr[i] <= arr[i-1] for i in range(1,n))"}
{"original_text": "Write a function where a string will start with a specific number.", "original_code": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "transformed_text": "Create a function to check if a string starts with a specific number.", "transformed_code": "import re\nmatch_num = lambda string: bool(re.match(r'^5', string))"}
{"original_text": "Write a function to find the smallest multiple of the first n numbers.", "original_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "transformed_text": "Find the smallest multiple of the first n numbers.", "transformed_code": "smallest_multiple = lambda n: n if n <= 2 else (lambda i, factors: (i := n * 2, [number for number in range(n, 1, -1) if number * 2 > n], (lambda: (i := i + n, i)[1] if any(i % a != 0 for a in factors) else (i,))()[1] if (a == factors[-1] and i % a == 0) else (i,))[1])() if (i := (n * 2)) and (factors := [number for number in range(n, 1, -1) if number * 2 > n]) else None"}
{"original_text": "Write a function to combine two dictionaries by adding values for common keys.", "original_code": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict", "transformed_text": "Combine two dictionaries by summing values of shared keys.", "transformed_code": "from collections import Counter; add_dict = lambda d1, d2: Counter(d1) + Counter(d2)"}
{"original_text": "Write a python function to count the total unset bits from 1 to n.", "original_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "transformed_text": "Count unset bits from 1 to n.", "transformed_code": "count_unset_bits = lambda n: sum(1 for i in range(1, n + 1) for temp in bin(i)[2:] if temp == '0')"}
{"original_text": "Write a function to return true if the given number is even else return false.", "original_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "transformed_text": "Return true for even numbers, false for odd.", "transformed_code": "even_num = lambda x: x % 2 == 0"}
{"original_text": "Write a python function to find the sum of squares of binomial co-efficients.", "original_code": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ", "transformed_text": "Create a function to calculate the sum of squares of binomial coefficients.", "transformed_code": "factorial = lambda start, end: prod(range(start, end + 1))\nsum_of_square = lambda n: factorial(n + 1, 2 * n) // factorial(1, n)"}
{"original_text": "Write a function to extract year, month and date from a url by using regex.", "original_code": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)", "transformed_text": "Extract year, month, and date from a URL using regex.", "transformed_code": "import re; extract_date = lambda url: re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"}
{"original_text": "Write a function to print the first n lucky numbers.", "original_code": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]", "transformed_text": "Print the first n lucky numbers.", "transformed_code": "lucky_num=lambda n:sorted(set(range(-1,n*n+9,2))-set(range(-1,n*n+9,2)[::2]))[1:n+1]"}
{"original_text": "Write a function to find the fixed point in the given array.", "original_code": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1", "transformed_text": "Find fixed point in array.", "transformed_code": "find_fixed_point = lambda arr: next((i for i in range(len(arr)) if arr[i] == i), -1)"}
{"original_text": "Write a function to find the previous palindrome of a specified number.", "original_code": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x", "transformed_text": "Find the previous palindrome for a number.", "transformed_code": "previous_palindrome = lambda num: next(x for x in range(num-1, 0, -1) if str(x) == str(x)[::-1])"}
{"original_text": "Write a function to validate a gregorian date.", "original_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "transformed_text": "Validate a gregorian date.", "transformed_code": "import datetime; check_date = lambda m, d, y: (datetime.date(int(y), int(m), int(d)), True)[0] if (m, d, y) else False"}
{"original_text": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.", "original_code": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])", "transformed_text": "Calculate maximum product of three numbers from an integer array.", "transformed_code": "maximum_product = lambda nums: max(heapq.nlargest(3, nums)[0] * heapq.nlargest(3, nums)[1] * heapq.nlargest(3, nums)[2], heapq.nlargest(3, nums)[0] * heapq.nsmallest(2, nums)[0] * heapq.nsmallest(2, nums)[1])"}
{"original_text": "Write a function to find ln, m lobb number.", "original_code": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))", "transformed_text": "Find the lobb number using a function.", "transformed_code": "lobb_num = lambda n, m: ((2 * m + 1) * binomial_coeff(2 * n, m + n) / (m + n + 1)); binomial_coeff = lambda n, k: [[1 if j == 0 or j == i else (C[i - 1][j - 1] + C[i - 1][j]) for j in range(k + 1)] for i in range(n + 1)]"}
{"original_text": "Write a function to check for a number at the end of a string.", "original_code": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "transformed_text": "Check if a string ends with a number.", "transformed_code": "import re; end_num = lambda s: bool(re.match(r'.*[0-9]$', s))"}
{"original_text": "Write a python function to check whether the given string is made up of two alternating characters or not.", "original_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "transformed_text": "Create a function to verify two alternating characters in a string.", "transformed_code": "is_Two_Alter=lambda s:all(s[i]==s[i+2]for i in range(len(s)-2))and s[0]!=s[1]"}
{"original_text": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "original_code": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result ", "transformed_text": "Rearrange positive and negative numbers in an array.", "transformed_code": "lambda array_nums: sorted(array_nums, key=lambda i: 0 if i == 0 else -1 / i)"}
{"original_text": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "original_code": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False", "transformed_text": "Find a triplet in the array that sums to a given value.", "transformed_code": "find_triplet_array = lambda A, arr_size, sum: next(((A[i], A[j], A[k]) for i in range(arr_size-2) for j in range(i+1, arr_size-1) for k in range(j+1, arr_size) if A[i] + A[j] + A[k] == sum), False)"}
{"original_text": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "original_code": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')", "transformed_text": "Find sequences of one uppercase followed by lowercase letters.", "transformed_code": "import re; text_uppercase_lowercase = lambda text: 'Found a match!' if re.search('[A-Z][a-z]+$', text) else 'Not matched!'"}
{"original_text": "Write a function to count coin change.", "original_code": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] ", "transformed_text": "Create a function to count coins.", "transformed_code": "coin_change = lambda S, m, n: (lambda table: [(table.append([1 if i == 0 else 0 for i in range(m)]), [table.__setitem__(i, [table[i - S[j]][j] if i-S[j] >= 0 else 0 + table[i][j-1] if j >= 1 else 0 for j in range(m)]) for i in range(1, n+1)])][-1] or table[n][m-1])([])"}
{"original_text": "Write a python function to multiply all items in the list.", "original_code": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "transformed_text": "Create a function to multiply all elements in a list.", "transformed_code": "multiply_list = lambda items: reduce(lambda x, y: x * y, items, 1)"}
{"original_text": "Write a function to remove all tuples with all none values in the given tuple list.", "original_code": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) ", "transformed_text": "Remove tuples with all None values from a list.", "transformed_code": "remove_tuple = lambda test_list: [sub for sub in test_list if any(ele is not None for ele in sub)]"}
{"original_text": "Write a function to perform chunking of tuples each of size n.", "original_code": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) ", "transformed_text": "Chunk tuples into smaller groups of specified size.", "transformed_code": "chunk_tuples = lambda t, n: [t[i:i+n] for i in range(0, len(t), n)]"}
{"original_text": "Write a function to find a pair with the highest product from a given array of integers.", "original_code": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   ", "transformed_text": "Find a pair with the highest product from an array.", "transformed_code": "max_product = lambda arr: (lambda x, y: (x, y) if len(arr) >= 2 else None)(max([(arr[i], arr[j]) for i in range(len(arr)) for j in range(i + 1, len(arr))], key=lambda pair: pair[0] * pair[1]))"}
{"original_text": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.", "original_code": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))", "transformed_text": "Find the length of the shortest common supersequence of two strings.", "transformed_code": "super_seq = lambda X, Y, m, n: n if not m else m if not n else 1 + super_seq(X, Y, m - 1, n - 1) if X[m - 1] == Y[n - 1] else 1 + min(super_seq(X, Y, m - 1, n), super_seq(X, Y, m, n - 1))"}
{"original_text": "Write a function to find maximum of two numbers.", "original_code": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y", "transformed_text": "Find the maximum of two numbers.", "transformed_code": "max_of_two = lambda x, y: x if x > y else y"}
{"original_text": "Write a python function to calculate the product of all the numbers of a given tuple.", "original_code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "transformed_text": "Calculate the product of numbers in a tuple.", "transformed_code": "multiple_tuple = lambda nums: eval('*'.join(map(str, nums)))"}
{"original_text": "Write a function to find n-th rencontres number.", "original_code": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))", "transformed_text": "Find n-th rencontre number.", "transformed_code": "binomial_coeffi = lambda n, k: 1 if (k == 0 or k == n) else (binomial_coeffi(n - 1, k - 1) + binomial_coeffi(n - 1, k)); rencontres_number = lambda n, m: 1 if (n == 0 and m == 0) else (0 if (n == 1 and m == 0) else ((n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0)) if (m == 0) else (binomial_coeffi(n, m) * rencontres_number(n - m, 0))))"}
{"original_text": "Write a function to calculate the height of the given binary tree.", "original_code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1", "transformed_text": "Calculate the height of a binary tree.", "transformed_code": "max_height = lambda node: 0 if node is None else max(max_height(node.left), max_height(node.right)) + 1"}
{"original_text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "original_code": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)", "transformed_text": "Convert date from yyyy-mm-dd to dd-mm-yyyy format.", "transformed_code": "change_date_format = lambda dt: re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"}
{"original_text": "Write a function to count repeated items of a tuple.", "original_code": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count", "transformed_text": "Count repeated items in a tuple.", "transformed_code": "count_tuplex = lambda tuplex, value: tuplex.count(value)"}
{"original_text": "Write a function that matches a string that has an a followed by zero or more b's by using regex.", "original_code": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')", "transformed_text": "Find strings with 'a' followed by any number of 'b's.", "transformed_code": "import re; text_match = lambda text: 'Found a match!' if re.search('ab*?', text) else 'Not matched!'"}
{"original_text": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.", "original_code": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total", "transformed_text": "Calculate the sum of cubes from 1 to n.", "transformed_code": "sum_series = lambda n: (n * (n + 1) // 2) ** 2"}
{"original_text": "Write a function to remove duplicate words from a given list of strings.", "original_code": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp", "transformed_text": "Remove duplicates from a list of strings.", "transformed_code": "remove_duplicates = lambda l: list(dict.fromkeys(l))"}
{"original_text": "Write a function to convert camel case string to snake case string by using regex.", "original_code": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "transformed_text": "Convert camel case to snake case using regex.", "transformed_code": "import re; camel_to_snake = lambda text: re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)).lower()"}
{"original_text": "Write a function to find the nth delannoy number.", "original_code": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)", "transformed_text": "Create a function that calculates the nth delannoy number.", "transformed_code": "dealnnoy_num = lambda n, m: 1 if m == 0 or n == 0 else dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"}
{"original_text": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.", "original_code": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total", "transformed_text": "Calculate the sum of squares from 1 to n.", "transformed_code": "series_sum = lambda n: (n * (n + 1) * (2 * n + 1)) // 6"}
{"original_text": "Write a function to re-arrange the given tuples based on the given ordered list.", "original_code": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) ", "transformed_text": "Rearrange tuples by the specified order.", "transformed_code": "re_arrange_tuples = lambda t, o: [(k, dict(t)[k]) for k in o]"}
{"original_text": "Write a function to count the most common character in a given string.", "original_code": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char", "transformed_text": "Count the most common character in a string.", "transformed_code": "max_char = lambda s: max(Counter(s), key=Counter(s).get)"}
{"original_text": "Write a function to find three closest elements from three sorted arrays.", "original_code": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]", "transformed_text": "Find three closest elements from three sorted arrays.", "transformed_code": "import sys; find_closet = lambda A,B,C,p,q,r: (lambda i,j,k,res_i,res_j,res_k,diff: (lambda f: f(f))(lambda f: (A[res_i],B[res_j],C[res_k]) if i<p and j<q and k<r else None) if diff==0 else (minimum:=min(A[i],min(B[j],C[k])),maximum:=max(A[i],max(B[j],C[k])),(res_i,res_j,res_k,diff:=(maximum-minimum, res_i:=i,res_j:=j,res_k:=k) if maximum-minimum<diff else (res_i,res_j,res_k,diff))(diff)) or (i:=i+1 if A[i]==minimum else j:=j+1 if B[j]==minimum else k:=k+1))) )(0,0,0,0,0,sys.maxsize))"}
{"original_text": "Write a function to sort a list of dictionaries using lambda function.", "original_code": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models", "transformed_text": "Sort a list of dictionaries by color.", "transformed_code": "sorted(lambda x: x['color'], models)"}
{"original_text": "Write a function to sort the given array by using heap sort.", "original_code": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n", "transformed_text": "Sort the array using heap sort.", "transformed_code": "heap_sort = lambda arr: (heapify(arr), [(arr[end], arr[0]) for end in range(len(arr) - 1, 0, -1) if (lambda: shift_down(arr, 0, end - 1))() or True])[0]\n\nheapify = lambda arr: [shift_down(arr, start, len(arr) - 1) for start in range(len(arr) // 2, -1, -1)]\n\nshift_down = lambda arr, start, end: (lambda f, root: f(f, root))(lambda f, root: (root * 2 + 1 <= end) and ([(child := root * 2 + 1, child := child + 1) if child + 1 <= end and arr[child] < arr[child + 1] else child][0], arr[root], arr[child] = arr[child], arr[root], root := child) if child <= end and arr[root] < arr[child] else None), root)"}
{"original_text": "Write a function to count the elements in a list until an element is a tuple.", "original_code": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "transformed_text": "Count elements in a list until a tuple is found.", "transformed_code": "count_elim = lambda num: sum(1 for n in num if not isinstance(n, tuple))"}
{"original_text": "Write a function to check if any list element is present in the given list.", "original_code": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) ", "transformed_text": "Check if an element exists in a list.", "transformed_code": "check_element = lambda test_tup, check_list: any(ele in test_tup for ele in check_list)"}
{"original_text": "Write a function to combine two given sorted lists using heapq module.", "original_code": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists", "transformed_text": "Combine two sorted lists using heapq.", "transformed_code": "from heapq import merge; combine_lists = lambda num1, num2: list(merge(num1, num2))"}
{"original_text": "Write a function to separate and print the numbers and their position of a given string.", "original_code": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()", "transformed_text": "Separate and print numbers with their positions from a string.", "transformed_code": "import re; num_position = lambda text: [m.start() for m in re.finditer('\\d+', text)]"}
{"original_text": "Write a function to convert the given tuples into set.", "original_code": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) ", "transformed_text": "Convert tuples to a set.", "transformed_code": "tuple_to_set = lambda t: set(t)"}
{"original_text": "Write a function to find the most common elements and their counts of a specified text.", "original_code": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem", "transformed_text": "Find the most common elements and their counts in the text.", "transformed_code": "from collections import Counter; most_common_elem=lambda s,a: Counter(s).most_common(a)"}
{"original_text": "Write a python function to find the length of the shortest word.", "original_code": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min", "transformed_text": "Find the shortest word length.", "transformed_code": "len_log = lambda words: min(len(word) for word in words)"}
{"original_text": "Write a function to get an item of a tuple.", "original_code": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item", "transformed_text": "Get an item from a tuple using its index.", "transformed_code": "get_item = lambda tup1, index: tup1[index]"}
{"original_text": "Write a function to sort the given tuple list basis the total digits in tuple.", "original_code": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))", "transformed_text": "Sort the tuple list by the number of digits.", "transformed_code": "sort_list = lambda test_list: test_list.sort(key=lambda tup: sum(len(str(ele)) for ele in tup)) or str(test_list)"}
{"original_text": "Write a function to display sign of the chinese zodiac for given year.", "original_code": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign", "transformed_text": "Display Chinese zodiac sign for given year.", "transformed_code": "chinese_zodiac = lambda year: ['Dragon', 'Snake', 'Horse', 'sheep', 'Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Hare'][(year - 2000) % 12]"}
{"original_text": "Write a function to find the maximum of similar indices in two lists of tuples.", "original_code": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) ", "transformed_text": "Find maximum values at similar indices in two lists of tuples.", "transformed_code": "max_similar_indices = lambda l1, l2: [(max(x[0], y[0]), max(x[1], y[1])) for x, y in zip(l1, l2)]"}
{"original_text": "Write a function to compute the value of ncr mod p.", "original_code": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] ", "transformed_text": "Compute nCr value with modulus p.", "transformed_code": "nCr_mod_p = lambda n, r, p: (lambda C: (C.append(1), [C.__setitem__(j, (C[j] + C[j-1]) % p) for j in range(min(i, r), 0, -1) for i in range(1, n + 1)], C[r])[1])([0] * (r + 1)))[0]"}
{"original_text": "Write a python function to find the minimun number of subsets with distinct elements.", "original_code": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "transformed_text": "Find minimum distinct subsets in a list.", "transformed_code": "subset = lambda ar, n: max(sum(1 for _ in g) for k, g in itertools.groupby(sorted(ar)))"}
{"original_text": "Write a function that gives profit amount if the given amount has profit else return none.", "original_code": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None", "transformed_text": "Calculate profit amount or return none if no profit.", "transformed_code": "profit_amount = lambda actual_cost, sale_amount: actual_cost - sale_amount if actual_cost > sale_amount else None"}
{"original_text": "Write a function to find out, if the given number is abundant.", "original_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "transformed_text": "Find if a number is abundant.", "transformed_code": "is_abundant = lambda n: sum(fctr for fctr in range(1, n) if n % fctr == 0) > n"}
{"original_text": "Write a function to split the given string at uppercase letters by using regex.", "original_code": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))", "transformed_text": "Split a string at uppercase letters using regex.", "transformed_code": "import re; split_list = lambda text: re.findall('[A-Z][^A-Z]*', text)"}
{"original_text": "Write a python function to get the position of rightmost set bit.", "original_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "transformed_text": "Get the position of the rightmost set bit.", "transformed_code": "get_First_Set_Bit_Pos = lambda n: int(math.log2(n & -n)) + 1"}
{"original_text": "Write a function to convert an integer into a roman numeral.", "original_code": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num", "transformed_text": "Convert integer to roman numeral.", "transformed_code": "int_to_roman = lambda num: (''.join([syb[i] * (num // val[i]) for i in range(len(val))]) if (num := num - val[i]) for i in range(12) while num > 0 else '')"}
{"original_text": "Write a python function to find the average of a list.", "original_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "transformed_text": "Find the average of a list.", "transformed_code": "average = lambda lst: sum(lst) / len(lst)"}
{"original_text": "Write a function to solve tiling problem.", "original_code": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "transformed_text": "Create a function for tiling solutions.", "transformed_code": "get_noOfways = lambda n: 0 if n == 0 else 1 if n == 1 else get_noOfways(n - 1) + get_noOfways(n - 2)"}
{"original_text": "Write a function to convert a roman numeral to an integer.", "original_code": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val", "transformed_text": "Convert roman numerals to integers.", "transformed_code": "roman_to_int = lambda s: sum(1 if s[i] == 'I' else 5 if s[i] == 'V' else 10 if s[i] == 'X' else 50 if s[i] == 'L' else 100 if s[i] == 'C' else 500 if s[i] == 'D' else 1000 for i in range(len(s)))"}
{"original_text": "Write a python function to find the sum of all even natural numbers within the range l and r.", "original_code": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ", "transformed_text": "Find the sum of all even numbers between l and r.", "transformed_code": "sum_Even = lambda l, r: (lambda n: n * (n + 1))(r // 2) - (lambda n: n * (n + 1))((l - 1) // 2)"}
{"original_text": "Write a function to calculate the discriminant value.", "original_code": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)", "transformed_text": "Calculate the discriminant value.", "transformed_code": "discriminant_value = lambda x,y,z: (\"Two solutions\", (y**2) - (4*x*z)) if (y**2 - 4*x*z) > 0 else (\"one solution\", (y**2) - (4*x*z)) if (y**2 - 4*x*z) == 0 else (\"no real solution\", (y**2) - (4*x*z))"}
{"original_text": "Write a python function to check whether the length of the word is even or not.", "original_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "transformed_text": "Check if the word length is even.", "transformed_code": "word_len = lambda s: any(len(word) % 2 == 0 for word in s.split())"}
{"original_text": "Write a function to convert camel case string to snake case string.", "original_code": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "transformed_text": "Convert camel case to snake case.", "transformed_code": "camel_to_snake = lambda text: re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)).lower()"}
{"original_text": "Write a function to remove an empty tuple from a list of tuples.", "original_code": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1", "transformed_text": "Remove empty tuples from a list.", "transformed_code": "remove_empty = lambda tuples: [t for t in tuples if t]"}
{"original_text": "Write a python function to accept the strings which contains all vowels.", "original_code": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") ", "transformed_text": "Create a function to check if a string has all vowels.", "transformed_code": "check = lambda s: 'accepted' if len(set(s) & set('AEIOUaeiou')) >= 5 else 'not accepted'"}
{"original_text": "Write a python function to find maximum possible value for the given periodic function.", "original_code": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B", "transformed_text": "Find maximum value for periodic function.", "transformed_code": "floor_Max = lambda A, B, N: (A * min(B - 1, N)) // B"}
{"original_text": "Write a function to join the tuples if they have similar initial elements.", "original_code": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) ", "transformed_text": "Join tuples with identical starting elements.", "transformed_code": "join_tuples = lambda test_list: list(map(tuple, [res.append(sub) if res and res[-1][0] == sub[0] else res.append([*sub]) for sub in test_list]))"}
{"original_text": "Write a function to find minimum of two numbers.", "original_code": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y", "transformed_text": "Find minimum of two numbers.", "transformed_code": "min_of_two = lambda x, y: x if x < y else y"}
{"original_text": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.", "original_code": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "transformed_text": "Find the maximum segments of lengths a, b, c from n.", "transformed_code": "maximum_segments = lambda n, a, b, c: (lambda dp: (dp[0] := 0, [dp.__setitem__(i + x, max(dp[i] + 1, dp[i + x])) for x in (a, b, c) if i + x <= n for i in range(n) if dp[i] != -1], dp[n])[1])( [-1] * (n + 10) ))"}
{"original_text": "Write a function to concatenate the given two tuples to a nested tuple.", "original_code": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) ", "transformed_text": "Concatenate two tuples into a nested tuple.", "transformed_code": "concatenate_nested = lambda tup1, tup2: (tup1 + tup2)"}
{"original_text": "Write a python function to left rotate the string.", "original_code": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  ", "transformed_text": "Create a function to rotate a string to the left.", "transformed_code": "left_rotate = lambda s, d: s[d:] + s[:d]"}
{"original_text": "Write a function to find the minimum total path sum in the given triangle.", "original_code": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]", "transformed_text": "Find the minimum path sum in the triangle.", "transformed_code": "min_sum_path=lambda A: (memo:=[A[-1][:]]) and [memo.append(A[i][j]+min(memo[j],memo[j+1])) for i in range(len(A)-2,-1,-1) for j in range(len(A[i]))] or memo[0]"}
