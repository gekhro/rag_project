{"text":"Write a function to find all index positions of the maximum values in a given list.","code":"def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result","transformed_text":"Find indices of maximum values in a list.","transformed_code":"position_max = lambda lst: [i for i, v in enumerate(lst) if v == max(lst)]"}
{"text":"Write a python function to find the difference between highest and least frequencies in a given array.","code":"def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count ","transformed_text":"Find difference between highest and lowest frequencies in an array.","transformed_code":"find_diff = lambda arr, n: (lambda c, mc, lc: mc - lc)([arr.sort(), 0, 0, n][1], 0, n) if arr else 0"}
{"text":"Write a function to verify validity of a string of parentheses.","code":"def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0","transformed_text":"Create a function to check if parentheses are valid.","transformed_code":"is_valid_parenthese = lambda str1: len(stack := [p for p in str1 if p in '([{']) or all(stack.pop() == {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}[p] for p in str1 if p in ')]}') and not stack"}
{"text":"Write a function to find the peak element in the given array.","code":"def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)\/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ","transformed_text":"Find the peak element in an array.","transformed_code":"find_peak = lambda arr, n: (lambda f, low, high: f(f, low, high))(lambda self, low, high: ((mid := low + (high - low) \/\/ 2), mid)[0], (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]) and mid or (mid > 0 and arr[mid - 1] > arr[mid] and self(self, low, mid - 1) or self(self, mid + 1, high)))(arr, 0, n - 1))"}
{"text":"Write a function to find the number of ways to partition a set of bell numbers.","code":"def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ","transformed_text":"Find the ways to partition a set of bell numbers.","transformed_code":"bell_number = lambda n: [[bell[i][0] if i == 0 else bell[i-1][i-1] + sum(bell[i][j-1] for j in range(i+1)) for j in range(n+1)] for i in range(n+1)][n][0]"}
{"text":"Write a function to filter odd numbers using lambda function.","code":"def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums","transformed_text":"Filter odd numbers using a lambda.","transformed_code":"odd_nums = list(filter(lambda x: x%2 != 0, nums))"}
{"text":"Write a function to perform the mathematical bitwise xor operation across the given tuples.","code":"def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ","transformed_text":"Perform bitwise xor on two tuples.","transformed_code":"bitwise_xor = lambda t1, t2: tuple(a ^ b for a, b in zip(t1, t2))"}
{"text":"Write a python function to count the number of squares in a rectangle.","code":"def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) \/\/ 6","transformed_text":"Count squares in a rectangle.","transformed_code":"count_Squares = lambda m, n: (n * (n + 1) * (3 * max(m, n) - n + 1)) \/\/ 6)"}
{"text":"Write a function to substaract two lists using map and lambda function.","code":"def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)","transformed_text":"Subtract two lists using map and lambda.","transformed_code":"sub_list = lambda nums1, nums2: list(map(lambda x, y: x - y, nums1, nums2))"}
{"text":"Write a function to print the season for the given month and day.","code":"def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season","transformed_text":"Find the season based on the month and day.","transformed_code":"month_season = lambda month, days: 'winter' if month in ('January', 'February', 'March') and not (month == 'December' and days > 20) else 'spring' if month in ('April', 'May', 'June') and not (month == 'March' and days > 19) else 'summer' if month in ('July', 'August', 'September') and not (month == 'June' and days > 20) else 'autumn'"}
{"text":"Write a function to check if the given tuple contains only k elements.","code":"def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) ","transformed_text":"Check if the tuple has only k elements.","transformed_code":"check_tuples = lambda test_tuple, K: all(ele in K for ele in test_tuple)"}
{"text":"Write a python function to check whether the given array is monotonic or not.","code":"def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ","transformed_text":"Check if the array is monotonic.","transformed_code":"is_Monotonic = lambda A: all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))"}
{"text":"Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.","code":"def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) \/\/ 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) \/\/ 2;\r\n        return Tri_up + Tri_down;","transformed_text":"Count maximum equilateral triangles in a given triangle.","transformed_code":"No_of_Triangle=lambda N,K: -1 if N<K else((N-K+1)*(N-K+2)\/\/2)+((N-2*K+1)*(N-2*K+2)\/\/2)"}
{"text":"Write a python function to check for odd parity of a given number.","code":"def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False","transformed_text":"Check if a number has odd parity.","transformed_code":"check_odd_parity = lambda x: (bin(x).count('1') % 2 == 1)"}
{"text":"Write a function to remove the matching tuples from the given two tuples.","code":"def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ","transformed_text":"Remove matching tuples from two lists.","transformed_code":"remove_matching_tuple = lambda l1, l2: [x for x in l1 if x not in l2]"}
{"text":"Write a python function to check whether a sequence of numbers has an increasing trend or not.","code":"def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False","transformed_text":"Check if numbers increase.","transformed_code":"increasing_trend = lambda nums: sorted(nums) == nums"}
{"text":"Write a python function to find the difference between sum of even and odd digits.","code":"def is_Diff(n): \r\n    return (n % 11 == 0) ","transformed_text":"Find the difference between even and odd digit sums.","transformed_code":"is_Diff = lambda n: n % 11 == 0"}
{"text":"Write a python function to count the number of equal numbers from three given integers.","code":"def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))","transformed_text":"Count equal numbers from three integers.","transformed_code":"test_three_equal = lambda x, y, z: 0 if len(set([x, y, z])) == 3 else (4 - len(set([x, y, z])))"}
{"text":"Write a python function to find minimum adjacent swaps required to sort binary array.","code":"def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count ","transformed_text":"Find minimum adjacent swaps to sort binary array.","transformed_code":"find_Min_Swaps = lambda arr, n: sum((noOfZeroes := [0] * n)[i] := noOfZeroes[i] + (arr[i] == 0) for i in range(n - 1, -1, -1) if arr[i] == 1 for i in range(n))"}
{"text":"Write a python function to count the total set bits from 1 to n.","code":"def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n \/\/ 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n \/\/ powerOf2;  \r\n        cnt += (totalPairs \/\/ 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  ","transformed_text":"Count total set bits from 1 to n.","transformed_code":"count_Set_Bits = lambda n: sum((n \/\/ 2) + (n % (1 << i)) * ((n \/\/ (1 << i)) & 1) for i in range(n.bit_length()))"}
{"text":"Write a function to find the closest smaller number than n.","code":"def closest_num(N):\r\n  return (N - 1)","transformed_text":"Find the closest number smaller than n.","transformed_code":"closest_num = lambda N: N - 1"}
{"text":"Write a function to find frequency count of list of lists.","code":"def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n","transformed_text":"Count frequency of items in a list of lists.","transformed_code":"frequency_lists = lambda list1: {num: list1.count(num) for sublist in list1 for num in sublist}"}
{"text":"Write a python function to reverse an array upto a given position.","code":"def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) ","transformed_text":"Reverse an array up to a position.","transformed_code":"reverse = lambda input, k: input[k-1::-1] + input[k:]"}
{"text":"Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .","code":"def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]","transformed_text":"Find maximum sum of increasing subsequence including a specified element.","transformed_code":"max_sum_increasing_subseq = lambda a, n, index, k: [[a[i]+a[0] if a[i]>a[0] else a[i] for i in range(n)] for n in range(1, n) for i in range(n) for j in range(n) if a[j]>a[i] and j>i and (dp[i][j] := max(dp[i-1][i]+a[j], dp[i-1][j]))]"}
{"text":"Write a function to find the volume of a cylinder.","code":"def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume","transformed_text":"Calculate the volume of a cylinder.","transformed_code":"volume_cylinder=lambda r,h:3.1415*r*r*h"}
{"text":"Write a python function to check whether an array contains only one distinct element or not.","code":"def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')","transformed_text":"Check if an array has only one unique element.","transformed_code":"unique_Element = lambda arr: 'YES' if len(set(arr)) == 1 else 'NO'"}
{"text":"Write a function to find the third angle of a triangle using two angles.","code":"def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n","transformed_text":"Find the third angle of a triangle with two angles.","transformed_code":"find_angle = lambda a, b: 180 - (a + b)"}
{"text":"Write a python function to count the number of digits in factorial of a given number.","code":"import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n \/ math.e) + math.log10(2 * math.pi * n) \/2.0)); \r\n    return math.floor(x) + 1; ","transformed_text":"Count digits in a number's factorial.","transformed_code":"import math\nfind_digits = lambda n: 0 if n < 0 else 1 if n <= 1 else math.floor(n * math.log10(n \/ math.e) + math.log10(2 * math.pi * n) \/ 2) + 1"}
{"text":"Write a function to extract unique values from the given dictionary values.","code":"def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res","transformed_text":"Extract unique values from a dictionary.","transformed_code":"extract_unique = lambda d: list(sorted({ele for v in d.values() for ele in v}))"}
{"text":"Write a function to find numbers divisible by m and n from a list of numbers using lambda function.","code":"def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result","transformed_text":"Find numbers divisible by m and n from a list.","transformed_code":"div_of_nums = lambda nums, m, n: list(filter(lambda x: x % m == 0 and x % n == 0, nums))"}
{"text":"Write a function to convert the given binary number to its decimal equivalent.","code":"def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary\/\/10\r\n        i += 1\r\n    return (decimal)","transformed_text":"Convert binary to decimal.","transformed_code":"binary_to_decimal = lambda b: sum((b \/\/ (10**i) % 10) * (2**i) for i in range(len(str(b))))"}
{"text":"Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.","code":"def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result","transformed_text":"Find top k frequent integers from sorted lists using a heap.","transformed_code":"func = lambda nums, k: (lambda d: (lambda temp: (lambda result: [result.append(key) for _ in range(k) for v, key in sorted(temp, reverse=True)] and result)([heapq.heappop(temp) for _ in range(len(temp))]))(sorted(d.items(), key=lambda x: x[1])[:k]))(collections.Counter(i for row in nums for i in row))"}
{"text":"Write a python function to remove spaces from a given string.","code":"def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1","transformed_text":"Remove spaces from a string.","transformed_code":"remove_spaces = lambda str1: str1.replace(' ', '')"}
{"text":"Write a function to find maximum of two numbers.","code":"def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y","transformed_text":"Find the maximum of two numbers.","transformed_code":"max_of_two = lambda x, y: x if x > y else y"}
{"text":"Write a python function to find the parity of a given number.","code":"def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ","transformed_text":"Find the parity of a number.","transformed_code":"find_parity = lambda x: 'Odd Parity' if x & 1 else 'Even Parity'"}
{"text":"Write a function to check if the two given strings are permutations of each other.","code":"def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True","transformed_text":"Check if two strings are permutations of each other.","transformed_code":"check_permutation=lambda str1,str2:sorted(str1)==sorted(str2)"}
{"text":"Write a function to solve tiling problem.","code":"def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);","transformed_text":"Create a function for tiling solutions.","transformed_code":"get_noOfways = lambda n: 0 if n == 0 else 1 if n == 1 else get_noOfways(n - 1) + get_noOfways(n - 2)"}
{"text":"Write a function to return the sum of all divisors of a number.","code":"def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)","transformed_text":"Calculate the sum of all divisors of a number","transformed_code":"sum_div = lambda n: sum([i for i in range(1, n) if n % i == 0])"}
{"text":"Write a function to round up a number to specific digits.","code":"import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a \/ n) * n, digits)","transformed_text":"Create a function to round a number up.","transformed_code":"import math; round_up = lambda a, digits: round(math.ceil(a \/ 10**-digits) * 10**-digits, digits)"}
{"text":"Write a python function to find sum of inverse of divisors.","code":"def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 \/float(N);  \r\n    return round(ans,2); ","transformed_text":"Find sum of inverse of divisors.","transformed_code":"Sum_of_Inverse_Divisors = lambda N, Sum: round(float(Sum) \/ float(N), 2)"}
{"text":"Write a function to find the nth newman\u2013shanks\u2013williams prime number.","code":"def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)","transformed_text":"Find the nth newman-shanks-williams prime number.","transformed_code":"newman_prime = lambda n: 1 if n < 2 else 2 * newman_prime(n - 1) + newman_prime(n - 2)"}
{"text":"Write a function to find the minimum difference in the tuple pairs of given tuples.","code":"def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) ","transformed_text":"Find the minimum difference in tuple pairs.","transformed_code":"min_difference = lambda test_list: min(abs(b - a) for a, b in test_list)"}
{"text":"Write a python function to count negative numbers in a list.","code":"def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ","transformed_text":"Count negative numbers in a list.","transformed_code":"neg_count = lambda lst: sum(1 for num in lst if num <= 0)"}
{"text":"Write a python function to check whether the triangle is valid or not if sides are given.","code":"def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ","transformed_text":"Check if triangle sides are valid.","transformed_code":"check_Validity = lambda a, b, c: not (a + b <= c or a + c <= b or b + c <= a)"}
{"text":"Write a function to push all values into a heap and then pop off the smallest values one at a time.","code":"import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]","transformed_text":"Sort values using a heap and remove the smallest ones.","transformed_code":"import heapq as hq; heap_sort = lambda it: [hq.heappop(hq.heapify([])) for _ in it]"}
{"text":"Write a python function to check whether every odd index contains odd numbers of a given list.","code":"def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))","transformed_text":"Check if odd indices have odd numbers in a list.","transformed_code":"odd_position = lambda nums: all(nums[i] % 2 == i % 2 for i in range(len(nums)))"}
{"text":"Write a function to find the second smallest number in a list.","code":"def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] ","transformed_text":"Find the second smallest number in a list.","transformed_code":"second_smallest = lambda numbers: sorted(set(numbers))[1] if len(numbers)>1 else None"}
{"text":"Write a function to find the triplet with sum of the given array","code":"def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)","transformed_text":"Find triplet in array with given sum","transformed_code":"check_triplet = lambda A, n, s, c: c == 3 and s == 0 or c < 3 and n > 0 and (check_triplet(A, n - 1, s - A[n - 1], c + 1) or check_triplet(A, n - 1, s, c))"}
{"text":"Write a function to remove the nested record from the given tuple.","code":"def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) ","transformed_text":"Remove nested tuples from a tuple.","transformed_code":"remove_nested = lambda t: tuple(e for e in t if not isinstance(e, tuple))"}
{"text":"Write a function to extract the sum of alternate chains of tuples.","code":"def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ","transformed_text":"Extract sums from alternating tuples.","transformed_code":"sum_of_alternates = lambda t: (sum(t[i] for i in range(len(t)) if i % 2), sum(t[i] for i in range(len(t)) if i % 2 == 0))"}
{"text":"Write a function to add two lists using map and lambda function.","code":"def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)","transformed_text":"Add two lists using map and lambda.","transformed_code":"add_list = lambda nums1, nums2: list(map(lambda x, y: x + y, nums1, nums2))"}
{"text":"Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.","code":"import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]","transformed_text":"Find the nth super ugly number using a list of primes.","transformed_code":"import heapq\nnth_super_ugly_number = lambda n, primes: (lambda uglies:[(uglies.append(ugly) for ugly in iter(lambda: next(merged), None) if ugly != uglies[-1]) or uglies[-1])(1) for merged in [heapq.merge(*map(lambda p: (ugly * p for ugly in uglies), primes))]])"}
{"text":"Write a function to find frequency of the elements in a given list of lists using collections module.","code":"from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result","transformed_text":"Find element frequencies in a list of lists.","transformed_code":"from collections import Counter; from itertools import chain; freq_element = lambda nums: Counter(chain.from_iterable(nums))"}
{"text":"Write a python function to check whether every even index contains even numbers of a given list.","code":"def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))","transformed_text":"Check if even indices have even numbers in a list.","transformed_code":"even_position = lambda nums: all(nums[i] % 2 == i % 2 for i in range(len(nums)))"}
{"text":"Write a python function to find the minimun number of subsets with distinct elements.","code":"def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ","transformed_text":"Find minimum distinct subsets in a list.","transformed_code":"subset = lambda ar, n: max(sum(1 for _ in g) for k, g in itertools.groupby(sorted(ar)))"}
{"text":"Write a python function to set the left most unset bit.","code":"def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ","transformed_text":"Set the left most unset bit in a number.","transformed_code":"set_left_most_unset_bit = lambda n: n if not (n & (n + 1)) else n | (1 << max([i for i in range(n.bit_length()) if not (n & (1 << i))]))"}
{"text":"Write a python function to find the first maximum length of even word.","code":"def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ","transformed_text":"Find the longest even-length word.","transformed_code":"find_max_len_even = lambda s: max((s[start:end] for start, end in ((i - length, i) for i in range(len(s) + 1) for length in range(i + 1) if s[start:end].strip() and len(s[start:end]) % 2 == 0)), key=len, default='-1')"}
{"text":"Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.","code":"def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max","transformed_text":"Find maximum subsequence length with adjacent element difference.","transformed_code":"max_len_sub = lambda arr, n: max([mls := [1] * n, [mls.__setitem__(i, mls[j] + 1) for j in range(i) if abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1] for i in range(n)], key=max)[0])"}
{"text":"Write a python function to left rotate the string.","code":"def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  ","transformed_text":"Create a function to rotate a string to the left.","transformed_code":"left_rotate = lambda s, d: s[d:] + s[:d]"}
{"text":"Write a function to remove lowercase substrings from a given string by using regex.","code":"import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)","transformed_text":"Remove lowercase letters from a string using regex.","transformed_code":"import re\nremove_lowercase = lambda str1: re.sub('[a-z]', '', str1)"}
{"text":"Write a function to drop empty items from a given dictionary.","code":"def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1","transformed_text":"Remove empty items from a dictionary.","transformed_code":"drop_empty = lambda d: {k: v for k, v in d.items() if v is not None}"}
{"text":"Write a function to count the same pair in two given lists using map function.","code":"from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result","transformed_text":"Count matching pairs in two lists using map.","transformed_code":"from operator import eq\ncount_same_pair = lambda nums1, nums2: sum(map(eq, nums1, nums2))"}
{"text":"Write a function to remove duplicate words from a given string using collections module.","code":"from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result","transformed_text":"Remove duplicate words from a string.","transformed_code":"remove_duplicate=lambda s:' '.join(dict.fromkeys(s.split()))"}
{"text":"Write a function to remove multiple spaces in a string by using regex.","code":"import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))","transformed_text":"Remove extra spaces from a string using regex.","transformed_code":"import re; remove_multiple_spaces = lambda text1: re.sub(' +', ' ', text1)"}
{"text":"Write a python function to find the maximum occurring character in a given string.","code":"def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch","transformed_text":"Find the character that appears most frequently in a string.","transformed_code":"get_max_occuring_char = lambda str1: max(str1, key=str1.count)"}
{"text":"Write a python function to find the smallest prime divisor of a number.","code":"def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; ","transformed_text":"Find the smallest prime divisor of a number","transformed_code":"smallest_Divisor = lambda n: 2 if n % 2 == 0 else next(i for i in range(3, int(n**0.5)+1, 2) if n % i == 0) or n"}
{"text":"Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.","code":"import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')","transformed_text":"Find a string with 'a' followed by anything and ending with 'b'.","transformed_code":"import re; text_starta_endb = lambda text: 'Found a match!' if re.search('a.*?b$', text) else 'Not matched!'"}
{"text":"Write a function to sort a list of elements using comb sort.","code":"def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) \/ shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums","transformed_text":"Sort a list using the comb sort algorithm.","transformed_code":"comb_sort = lambda nums: (setattr(gaps, len(nums)), exec('swapped=True;\\nwhile gaps>1 or swapped:\\n gaps=int(gaps\/shrink_fact); swapped=False; i=0;\\n while gaps+i<len(nums):\\n  swapped|=nums[i]>nums[i+gaps] and (nums.insert(i, nums.pop(i+gaps)), True)[1]; i+=1'), nums)[-1])"}
{"text":"Write a function to find the ration of zeroes in an array of integers.","code":"from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1\/n,2)","transformed_text":"Find the ratio of zeroes in a list of integers.","transformed_code":"zero_count = lambda nums: round(sum(1 for x in nums if x == 0) \/ len(nums), 2)"}
{"text":"Write a function to find the specified number of largest products from two given lists.","code":"def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result","transformed_text":"Find largest products from two lists.","transformed_code":"large_product = lambda nums1, nums2, N: sorted(x*y for x in nums1 for y in nums2, reverse=True)[:N]"}
{"text":"Write a function to check if a triangle of positive area is possible with the given angles.","code":"def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False","transformed_text":"Check if angles can form a triangle.","transformed_code":"is_triangleexists = lambda a, b, c: (a + b + c == 180 and a > 0 and b > 0 and c > 0)"}
{"text":"Write a function to convert the given string of integers into a tuple.","code":"def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) ","transformed_text":"Convert a string of integers to a tuple.","transformed_code":"str_to_tuple = lambda test_str: tuple(map(int, test_str.split(', ')))"}
{"text":"Write a python function to find the sum of fourth power of first n even natural numbers.","code":"def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; ","transformed_text":"Find sum of fourth powers of first n even numbers.","transformed_code":"even_Power_Sum = lambda n: sum((2*i)**4 for i in range(1, n + 1))"}
{"text":"Write a python function to find the surface area of the square pyramid.","code":"def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) ","transformed_text":"Find the surface area of a square pyramid.","transformed_code":"surface_Area = lambda b, s: 2 * b * s + b ** 2"}
{"text":"Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.","code":"import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ","transformed_text":"Find sequences of uppercase followed by lowercase letters in a string.","transformed_code":"import re\nmatch = lambda text: 'Yes' if re.search('[A-Z][a-z]+$', text) else 'No'"}
{"text":"Write a function to sort a list of tuples using lambda.","code":"def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks","transformed_text":"Sort a list of tuples by the second element.","transformed_code":"sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])"}
{"text":"Write a function to check if the given string starts with a substring using regex.","code":"import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")","transformed_text":"Check if a string starts with a substring using regex.","transformed_code":"import re\ncheck_substring = lambda s, sub: \"string starts with substring\" if re.match(f'\\A{re.escape(sub)}', s) else \"doesn't start with substring\""}
{"text":"Write a function to find the n\u2019th carol number.","code":"def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2","transformed_text":"Find the nth carol number.","transformed_code":"get_carol = lambda n: ((2**n) - 1) ** 2 - 2"}
{"text":"Write a python function to split the array and add the first part to the end.","code":"def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) ","transformed_text":"Split the array and move the first part to the end.","transformed_code":"split_Arr = lambda a, n, k: a[k:] + a[:k]"}
{"text":"Write a python function to count the number of rotations required to generate a sorted array.","code":"def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0","transformed_text":"Count rotations to sort an array.","transformed_code":"count_Rotation=lambda arr,n: next((i for i in range(1,n) if arr[i]<arr[i-1]),0)"}
{"text":"Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.","code":"def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) \/ r \r\n\t\tres += nCr * nCr \r\n\treturn res ","transformed_text":"Find the count of binary sequences with equal bit sums.","transformed_code":"count_binary_seq = lambda n: sum((1 * (nCr := 1) * (nCr := (nCr * (n + 1 - r)) \/ r)) for r in range(1, n + 1)) + 1"}
{"text":"Write a python function to find the first element occurring k times in a given array.","code":"def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1","transformed_text":"Find the first element that appears k times in an array.","transformed_code":"first_Element = lambda arr, n, k: next((x for x in arr if arr.count(x) == k), -1)"}
{"text":"Write a function to add the k elements to each element in the tuple.","code":"def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ","transformed_text":"Add K to each element in a tuple.","transformed_code":"add_K_element = lambda test_list, K: [tuple(j + K for j in sub) for sub in test_list]"}
{"text":"Write a python function to count number of non-empty substrings of a given string.","code":"def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) \/ 2); ","transformed_text":"Count non-empty substrings in a string.","transformed_code":"number_of_substrings = lambda s: int(len(s) * (len(s) + 1) \/ 2)"}
{"text":"Write a python function to check whether all the characters in a given string are unique.","code":"def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;","transformed_text":"Check if all characters in a string are unique","transformed_code":"unique_Characters = lambda s: len(s) == len(set(s))"}
{"text":"Write a function to zip two given lists of lists.","code":"def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result","transformed_text":"Zip two lists together.","transformed_code":"zip_list = lambda l1, l2: list(map(list.__add__, l1, l2))"}
{"text":"Write a python function to convert a list of multiple integers into a single integer.","code":"def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) ","transformed_text":"Create a function to merge integers from a list into one.","transformed_code":"convert = lambda lst: int(''.join(map(str, lst)))"}
{"text":"Write a function to calculate the maximum aggregate from the list of tuples.","code":"from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])","transformed_text":"Calculate maximum sum from a list of tuples.","transformed_code":"from collections import defaultdict; max_aggregate = lambda stdata: max((temp := defaultdict(int).update({name: temp[name] + marks for name, marks in stdata}), temp.items()), key=lambda x: x[1])"}
{"text":"Write a function to merge three dictionaries into a single expression.","code":"import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict","transformed_text":"Merge three dictionaries into one.","transformed_code":"merge_dictionaries_three = lambda d1, d2, d3: dict(collections.ChainMap({}, d1, d2, d3))"}
{"text":"Write a python function to check whether the given string is made up of two alternating characters or not.","code":"def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True","transformed_text":"Create a function to verify two alternating characters in a string.","transformed_code":"is_Two_Alter=lambda s:all(s[i]==s[i+2]for i in range(len(s)-2))and s[0]!=s[1]"}
{"text":"Write a function to check whether the entered number is greater than the elements of the given array.","code":"def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')","transformed_text":"Check if the number is greater than the array elements.","transformed_code":"check_greater = lambda arr, number: 'Yes' if number > max(arr) else 'No'"}
{"text":"Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.","code":"def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]","transformed_text":"Find ways to paint a fence with n posts using k colors.","transformed_code":"count_no_of_ways = lambda n, k: dp := [0] * (n + 1), (dp[1], dp[2]) := (k, k * k), [dp[i := i + 1] := ((k - 1) * (dp[i - 1] + dp[i - 2])) % 1000000007 for i in range(3, n + 1)], dp[n]"}
{"text":"Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.","code":"import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)","transformed_text":"Merge multiple sorted lists into one sorted list.","transformed_code":"merge_sorted = lambda *args: list(heapq.merge(*(sorted(arg) for arg in args)))"}
{"text":"Write a function to find minimum of two numbers.","code":"def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y","transformed_text":"Find minimum of two numbers.","transformed_code":"min_of_two = lambda x, y: x if x < y else y"}
{"text":"Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.","code":"from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r","transformed_text":"Generate combinations of selected colours with repetitions.","transformed_code":"combinations_colors = lambda l, n: list(combinations_with_replacement(l, n))"}
{"text":"Write a function to check if a nested list is a subset of another nested list.","code":"def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ","transformed_text":"Create a function to verify if one nested list is inside another.","transformed_code":"check_subset_list = lambda list1, list2: all(i in list1 for i in list2)"}
{"text":"Write a python function to toggle only first and last bits of a given number.","code":"def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) ","transformed_text":"Toggle first and last bits of a number.","transformed_code":"toggle_F_and_L_bits = lambda n: 0 if n == 1 else n ^ ((n | n >> 1 | n >> 2 | n >> 4 | n >> 8 | n >> 16) + 1) >> 1 + 1"}
{"text":"Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.","code":"def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares","transformed_text":"Calculate the difference between squared sum and sum of squares for first n numbers.","transformed_code":"sum_difference = lambda n: (sum(range(1, n+1)) ** 2) - sum(num ** 2 for num in range(1, n+1))"}
{"text":"Write a python function to capitalize first and last letters of each word of a given string.","code":"def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  ","transformed_text":"Capitalize the first and last letters of each word in a string.","transformed_code":"capitalize = lambda s: ' '.join(w[:-1] + w[-1].upper() for w in s.title().split())"}
{"text":"Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.","code":"import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)","transformed_text":"Replace whitespaces with underscores and vice versa in a string.","transformed_code":"import re\nreplace_spaces=lambda text:text.replace(' ','_').replace('_',' ')"}
{"text":"Write a function that gives profit amount if the given amount has profit else return none.","code":"def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None","transformed_text":"Calculate profit amount or return none if no profit.","transformed_code":"profit_amount = lambda actual_cost, sale_amount: actual_cost - sale_amount if actual_cost > sale_amount else None"}
{"text":"Write a function to add the given tuple to the given list.","code":"def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) ","transformed_text":"Add a tuple to a list.","transformed_code":"add_tuple = lambda lst, tup: lst + tup"}
{"text":"Write a function to find the top or bottom surface area of a cylinder.","code":"def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea","transformed_text":"Find surface area of a cylinder.","transformed_code":"topbottom_surfacearea=lambda r: 3.1415*r*r"}
{"text":"Write a function to count alphabets,digits and special charactes in a given string.","code":"def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   ","transformed_text":"Count characters: alphabets, digits, and specials in a string.","transformed_code":"count = lambda s: (sum(c.isalpha() for c in s), sum(c.isdigit() for c in s), len(s) - sum(c.isalnum() for c in s))"}
{"text":"Write a python function to left rotate the bits of a given number.","code":"INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  ","transformed_text":"Create a function to rotate bits left in a number.","transformed_code":"left_Rotate = lambda n, d: (n << d) | (n >> (32 - d))"}
{"text":"Write a function to check if there is a subset with sum divisible by m.","code":"def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]","transformed_text":"Check for a subset with a sum divisible by m.","transformed_code":"modular_sum = lambda arr, n, m: n > m or (DP := [False] * m) and any((DP[j] := True, (DP[(j + arr[i]) % m] := True) if (DP[(j + arr[i]) % m] == False) else None)[0] for i in range(n) for j in range(m) if DP[0] or (temp := [False] * m) and (DP[arr[i] % m] := True)) and [temp[j] and (DP[j] := True) for j in range(m)]) and DP[0]"}
{"text":"Write a python function to check if a given number is one less than twice its reverse.","code":"def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num \/\/ 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ","transformed_text":"Create a function to check if a number equals one less than twice its reverse.","transformed_code":"rev = lambda num: int(str(num)[::-1]); check = lambda n: 2 * rev(n) == n + 1"}
{"text":"Write a python function to find gcd of two positive integers.","code":"def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y \/ 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd","transformed_text":"Find gcd of two positive integers","transformed_code":"gcd = lambda x, y: y if x % y == 0 else next(k for k in range(y\/\/2, 0, -1) if x % k == 0 and y % k == 0)"}
{"text":"Write a function to extract maximum and minimum k elements in the given tuple.","code":"\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ","transformed_text":"Extract the largest and smallest k elements from a tuple.","transformed_code":"extract_min_max = lambda t, k: tuple(sorted(t)[:k] + sorted(t)[-k:])"}
{"text":"Write a function to sort a list of tuples in increasing order by the last element in each tuple.","code":"def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup","transformed_text":"Sort a list of tuples by the last element.","transformed_code":"sort_tuple = lambda tup: sorted(tup, key=lambda x: x[-1])"}
{"text":"Write a function to split the given string with multiple delimiters by using regex.","code":"import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))","transformed_text":"Split a string using multiple delimiters with regex.","transformed_code":"import re; multiple_split=lambda text: re.split('; |, |\\*|\\n', text)"}
{"text":"Write a function to find the list of lists with minimum length.","code":"def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     ","transformed_text":"Find lists with the minimum length.","transformed_code":"min_length = lambda list1: (min(len(x) for x in list1), min(x for x in list1))"}
{"text":"Write a function to find the gcd of the given array elements.","code":"def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd","transformed_text":"Find the gcd of array elements.","transformed_code":"get_gcd = lambda l: (lambda f: (lambda gcd: (gcd := f(f, l[0], l[1]), (gcd := f(f, gcd, l[i]) for i in range(2, len(l))))[-1])(lambda f, x, y: x if not y else f(f, y, x % y)))(0))"}
{"text":"Write a function to split a given list into two parts where the length of the first part of the list is given.","code":"def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]","transformed_text":"Split a list into two parts by length.","transformed_code":"split_two_parts = lambda list1, L: (list1[:L], list1[L:])"}
{"text":"Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.","code":"import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)","transformed_text":"Check if a string has only allowed characters a-z, A-Z, and 0-9.","transformed_code":"import re\nis_allowed_specific_char = lambda s: not re.search(r'[^a-zA-Z0-9]', s)"}
{"text":"Write a function to access dictionary key\u2019s element by index.","code":"def access_key(ditionary,key):\r\n  return list(ditionary)[key]","transformed_text":"Access dictionary element by index.","transformed_code":"access_key = lambda d, k: list(d)[k]"}
{"text":"Write a function to convert the given binary tuple to integer.","code":"def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ","transformed_text":"Convert binary tuple to integer.","transformed_code":"binary_to_integer = lambda tup: int(''.join(map(str, tup)), 2)"}
{"text":"Write a python function to find the largest negative number from the given list.","code":"def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max","transformed_text":"Find the largest negative number in a list.","transformed_code":"largest_neg = lambda lst: max(x for x in lst if x < 0)"}
{"text":"Write a function to find the element count that occurs before the record in the given tuple.","code":"def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ","transformed_text":"Find the count of elements before the first tuple in a given tuple.","transformed_code":"count_first_elements = lambda t: next((i for i, e in enumerate(t) if isinstance(e, tuple)), len(t))"}
{"text":"Write a function to extract only the rear index element of each string in the given tuple.","code":"def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ","transformed_text":"Extract the last character from each string in the tuple.","transformed_code":"extract_rear = lambda t: [s[-1] for s in t]"}
{"text":"Write a function to get the n largest items from a dataset.","code":"import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest","transformed_text":"Get the largest n items from a dataset.","transformed_code":"import heapq; larg_nnum=lambda list1,n:heapq.nlargest(n,list1)"}
{"text":"Write a function that matches a string that has an a followed by zero or more b's.","code":"import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')","transformed_text":"Create a function to match a string containing 'a' followed by any number of 'b's.","transformed_code":"import re\ntext_match = lambda text: 'Found a match!' if re.search('ab*?', text) else 'Not matched!'"}
{"text":"Write a function to get an item of a tuple.","code":"def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item","transformed_text":"Get an item from a tuple using its index.","transformed_code":"get_item = lambda tup1, index: tup1[index]"}
{"text":"Write a function to count number of unique lists within a list.","code":"def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result","transformed_text":"Count unique lists in a list.","transformed_code":"unique_sublists = lambda list1: {a: sum(b) for a, b in {tuple(l): [] for l in list1}.items()}"}
{"text":"Write a function to find the maximum sum that can be formed which has no three consecutive elements present.","code":"def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]","transformed_text":"Find maximum sum without three consecutive elements.","transformed_code":"max_sum_of_three_consecutive = lambda arr, n: (lambda sum: (sum[0], sum[1] := arr[0], arr[0] + arr[1]) if n >= 2 else 0, (sum[2] := max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) if n > 2 else 0, [sum.append(max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3])) for i in range(3, n)] and sum[n-1]) ([])"}
{"text":"Write a python function to find the minimum sum of absolute differences of two arrays.","code":"def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum","transformed_text":"Find minimum sum of absolute differences between two arrays.","transformed_code":"find_Min_Sum = lambda a, b, n: sum(abs(x - y) for x, y in zip(sorted(a), sorted(b)))"}
{"text":"Write a function to convert a given string to a tuple.","code":"def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result","transformed_text":"Convert a string to a tuple.","transformed_code":"string_to_tuple = lambda str1: tuple(x for x in str1 if not x.isspace())"}
{"text":"Write a function that matches a word containing 'z'.","code":"import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')","transformed_text":"Find a word containing 'z'.","transformed_code":"import re; text_match_wordz = lambda text: 'Found a match!' if re.search('\\w*z.\\w*', text) else 'Not matched!'"}
{"text":"Write a function to calculate the harmonic sum of n-1.","code":"def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 \/ n + (harmonic_sum(n - 1))","transformed_text":"Calculate harmonic sum for n-1.","transformed_code":"harmonic_sum = lambda n: 1 if n < 2 else 1 \/ n + harmonic_sum(n - 1)"}
{"text":"Write a function to check whether the given amount has no profit and no loss","code":"def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False","transformed_text":"Check if amount has no profit and no loss","transformed_code":"noprofit_noloss = lambda actual_cost, sale_amount: sale_amount == actual_cost"}
{"text":"Write a function to find the sequences of one upper case letter followed by lower case letters.","code":"import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')","transformed_text":"Find sequences of one uppercase followed by lowercase letters.","transformed_code":"import re; text_uppercase_lowercase = lambda text: 'Found a match!' if re.search('[A-Z][a-z]+$', text) else 'Not matched!'"}
{"text":"Write a function to convert radians to degrees.","code":"import math\r\ndef degree_radian(radian):\r\n degree = radian*(180\/math.pi)\r\n return degree","transformed_text":"Convert radians to degrees.","transformed_code":"degree_radian = lambda radian: radian * (180 \/ math.pi)"}
{"text":"Write a python function to find the first natural number whose factorial is divisible by x.","code":"def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ","transformed_text":"Find the first natural number with a factorial divisible by x.","transformed_code":"first_Factorial_Divisible_Number = lambda x: next(i for i in range(1, x) if (fact := (fact * i if (i > 1) else 1)) % x == 0)"}
{"text":"Write a python function to count number of substrings with the sum of digits equal to their length.","code":"from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count","transformed_text":"Count substrings with digit sum equal to length.","transformed_code":"from collections import defaultdict; count, sum = 0, 0; mp = defaultdict(int); mp[0] += 1; [sum := sum + ord(s[i]) - ord('0'), count := count + mp[sum - (i + 1)], mp[sum - (i + 1)] += 1 for i in range(n)]; count"}
{"text":"Write a function to get the length of a complex number.","code":"import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length","transformed_text":"Get the length of a complex number.","transformed_code":"len_complex=lambda a,b:abs(complex(a,b))"}
{"text":"Write a python function to count the number of distinct power of prime factor of given number.","code":"def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n \/= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count ","transformed_text":"Count distinct prime power factors of a number.","transformed_code":"count_Fac = lambda n: sum(1 for i in range(2, int(n**0.5) + 1) if (n := n \/\/ i) % i == 0) + (1 if n > 1 else 0)"}
{"text":"Write a function to find the directrix of a parabola.","code":"def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix","transformed_text":"Find the directrix of a parabola.","transformed_code":"parabola_directrix = lambda a, b, c: c - (b * b + 1) * 4 * a"}
{"text":"Write a function to extract elements that occur singly in the given tuple list.","code":"def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ","transformed_text":"Extract elements that appear only once from a list of tuples.","transformed_code":"extract_singly = lambda test_list: [ele for inner in test_list for ele in set(inner) if inner.count(ele) == 1]"}
{"text":"Write a python function to find the sum of all odd length subarrays.","code":"def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) \/\/ 2) * arr[i])\r\n    return Sum","transformed_text":"Find the sum of all odd length subarrays.","transformed_code":"Odd_Length_Sum = lambda arr: sum((((i + 1) * (len(arr) - i) + 1) \/\/ 2) * arr[i] for i in range(len(arr)))"}
{"text":"Write a function to convert degrees to radians.","code":"import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi\/180)\r\n return radian","transformed_text":"Create a function that converts degrees to radians.","transformed_code":"import math; radian_degree = lambda degree: degree * (math.pi \/ 180)"}
{"text":"Write a python function to check if the elements of a given list are unique or not.","code":"def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True","transformed_text":"Check if list elements are unique.","transformed_code":"all_unique = lambda lst: len(lst) == len(set(lst))"}
{"text":"Write a function to find the volume of a cone.","code":"import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0\/3) * math.pi * r * r * h\r\n  return volume","transformed_text":"Calculate the cone's volume.","transformed_code":"volume_cone = lambda r, h: (1\/3) * math.pi * r * r * h"}
{"text":"Write a function to perfom the modulo of tuple elements in the given two tuples.","code":"def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) ","transformed_text":"Perform modulo on elements of two tuples.","transformed_code":"tuple_modulo = lambda t1, t2: tuple(a % b for a, b in zip(t1, t2))"}
{"text":"Write a function to remove all whitespaces from the given string using regex.","code":"import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))","transformed_text":"Remove all whitespace from a string using regex.","transformed_code":"import re; remove_whitespaces = lambda text1: re.sub(r'\\s+', '', text1)"}
{"text":"Write a function to find common elements in given nested lists. * list item * list item * list item * list item","code":"def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result","transformed_text":"Find common elements in nested lists.","transformed_code":"common_in_nested_lists = lambda nl: list(set.intersection(*map(set, nl)))"}
{"text":"Write a function to find the n-th power of individual elements in a list using lambda function.","code":"def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums","transformed_text":"Find the power of each number in a list.","transformed_code":"nth_nums = lambda nums, n: list(map(lambda x: x ** n, nums))"}
{"text":"Write a python function to find the sublist having minimum length.","code":"def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList","transformed_text":"Find sublist with minimum length.","transformed_code":"Find_Min = lambda lst: min(lst)"}
{"text":"Write a function to reflect the modified run-length encoding from a list.","code":"from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]","transformed_text":"Create a function for modified run-length encoding from a list.","transformed_code":"from itertools import groupby; modified_encode = lambda alist: [lambda el: [len(el), el[0]] if len(el)>1 else el[0] for key, group in groupby(alist)]"}
{"text":"Write a function to remove multiple spaces in a string.","code":"import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))","transformed_text":"Remove extra spaces from a string.","transformed_code":"import re; remove_spaces = lambda text: re.sub(' +', ' ', text)"}
{"text":"Write a function to remove sublists from a given list of lists, which are outside a given range.","code":"def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result","transformed_text":"Remove sublists from a list outside a given range.","transformed_code":"remove_list_range = lambda list1, leftrange, rigthrange: [i for i in list1 if min(i) >= leftrange and max(i) <= rigthrange]"}
{"text":"Write a python function to find highest power of 2 less than or equal to given number.","code":"def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ","transformed_text":"Find highest power of 2 less than or equal to number.","transformed_code":"highest_Power_of_2 = lambda n: max(i for i in range(n + 1) if (i & (i - 1)) == 0)"}
{"text":"Write a python function to shift last element to first position in the given list.","code":"def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list","transformed_text":"Move the last element of the list to the front.","transformed_code":"move_first = lambda lst: [lst[-1]] + lst[:-1]"}
{"text":"Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.","code":"def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))","transformed_text":"Filter names that start with an uppercase letter and sum their lengths.","transformed_code":"sum_len = lambda names: sum(len(name) for name in names if name[0].isupper())"}
{"text":"Write a function to divide two lists using map and lambda function.","code":"def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x \/ y, nums1, nums2)\r\n  return list(result)","transformed_text":"Divide two lists using map and lambda.","transformed_code":"lambda nums1, nums2: list(map(lambda x, y: x \/ y, nums1, nums2))"}
{"text":"Write a function to find the union of elements of the given tuples.","code":"def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) ","transformed_text":"Find the union of elements from two tuples.","transformed_code":"union_elements = lambda t1, t2: tuple(set(t1 + t2))"}
{"text":"Write a python function to check whether a sequence of numbers has a decreasing trend or not.","code":"def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False","transformed_text":"Check if numbers are in a decreasing order.","transformed_code":"decreasing_trend = lambda nums: sorted(nums) == nums"}
{"text":"Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.","code":"def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True","transformed_text":"Check if a number is a sum of non-zero powers of 2.","transformed_code":"is_Sum_Of_Powers_Of_Two=lambda n: n % 2 == 0"}
{"text":"Write a python function to sort a list according to the second element in sublist.","code":"def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ","transformed_text":"Sort a list by the second element of each sublist.","transformed_code":"sorted_list = sorted(sub_li, key=lambda x: x[1])"}
{"text":"Write a python function to find the first non-repeated character in a given string.","code":"def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None","transformed_text":"Find the first non-repeated character in a string.","transformed_code":"first_non_repeating_character = lambda s: next((c for c in s if s.count(c) == 1), None)"}
{"text":"Write a function to find the focus of a parabola.","code":"def parabola_focus(a, b, c): \r\n  focus= (((-b \/ (2 * a)),(((4 * a * c) - (b * b) + 1) \/ (4 * a))))\r\n  return focus","transformed_text":"Find the focus of a parabola.","transformed_code":"parabola_focus = lambda a, b, c: (-b \/ (2 * a), ((4 * a * c - b * b + 1) \/ (4 * a)))"}
{"text":"Write a function to caluclate perimeter of a parallelogram.","code":"def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter","transformed_text":"Calculate the perimeter of a parallelogram.","transformed_code":"parallelogram_perimeter=lambda b,h:2*(b+h)"}
{"text":"Write a function to extract specified size of strings from a give list of string values.","code":"def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result","transformed_text":"Extract strings of specific length from a list.","transformed_code":"extract_string = lambda str, l: [e for e in str if len(e) == l]"}
{"text":"Write a function to calculate the perimeter of a regular polygon.","code":"from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter","transformed_text":"Calculate the perimeter of a regular polygon.","transformed_code":"perimeter_polygon = lambda s, l: s * l"}
{"text":"Write a function to calculate the nth pell number.","code":"def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ","transformed_text":"Calculate the nth pell number.","transformed_code":"get_pell = lambda n: n if n <= 2 else (lambda a, b: (lambda f, i: f(f, i))(lambda f, i: a if i > n else f(f, i+1) if (c := 2*b + a) and (a := b) and (b := c) else b, 3))(1, 2)"}
{"text":"Write a function to compute the value of ncr mod p.","code":"def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] ","transformed_text":"Compute nCr value with modulus p.","transformed_code":"nCr_mod_p = lambda n, r, p: (lambda C: (C.append(1), [C.__setitem__(j, (C[j] + C[j-1]) % p) for j in range(min(i, r), 0, -1) for i in range(1, n + 1)], C[r])[1])([0] * (r + 1)))[0]"}
{"text":"Write a python function to toggle all odd bits of a given number.","code":"def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ","transformed_text":"Toggle odd bits of a number.","transformed_code":"toggle_odd_bits = lambda n: n ^ sum((1 << i) for i in range(n.bit_length()) if i % 2 == 1)"}
{"text":"Write a function to find number of even elements in the given list using lambda function.","code":"def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even","transformed_text":"Count even numbers in a list using a lambda function.","transformed_code":"lambda array_nums: len(list(filter(lambda x: x % 2 == 0, array_nums)))"}
{"text":"Write a python function to check whether the length of the word is odd or not.","code":"def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False","transformed_text":"Check if a word's length is odd.","transformed_code":"word_len = lambda s: any(len(word) % 2 != 0 for word in s.split())"}
{"text":"Write a python function to count all the substrings starting and ending with same characters.","code":"def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ","transformed_text":"Count substrings that start and end with the same character.","transformed_code":"count_Substring_With_Equal_Ends = lambda s: sum(1 for i in range(len(s)) for j in range(1, len(s) - i + 1) if s[i] == s[i + j - 1])"}
{"text":"Write a function to perform mathematical division operation across the given tuples.","code":"def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 \/\/ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ","transformed_text":"Perform division on elements from two tuples.","transformed_code":"lambda t1, t2: tuple(a \/\/ b for a, b in zip(t1, t2))"}
{"text":"Write a function to count character frequency of a given string.","code":"def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict","transformed_text":"Count character frequency in a string.","transformed_code":"char_frequency = lambda str1: {n: str1.count(n) for n in set(str1)}"}
{"text":"Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.","code":"import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") ","transformed_text":"Check if a string ends with alphanumeric characters using regex.","transformed_code":"import re; check_alphanumeric = lambda string: \"Accept\" if re.search('[a-zA-Z0-9]$', string) else \"Discard\""}
{"text":"Write a python function to find the smallest missing number from the given array.","code":"def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) \/ 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) ","transformed_text":"Find the smallest missing number in an array.","transformed_code":"find_First_Missing=lambda a,s,e: e+1 if s>e else s if s!=a[s] else find_First_Missing(a,(s+e)\/\/2+1,e) if a[(s+e)\/\/2]==(s+e)\/\/2 else find_First_Missing(a,s,(s+e)\/\/2)"}
{"text":"Write a python function to count the pairs with xor as an even number.","code":"def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ","transformed_text":"Count pairs with even xor from the list.","transformed_code":"find_even_Pair = lambda A, N: sum(1 for i in range(N) for j in range(i+1, N) if (A[i] ^ A[j]) % 2 == 0)"}
{"text":"Write a function to replace all occurrences of spaces, commas, or dots with a colon.","code":"import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r","transformed_text":"Replace spaces, commas, and dots with a colon.","transformed_code":"replace_specialchar = lambda text: re.sub('[ ,.]', ':', text)"}
{"text":"Write a python function to check whether an array can be sorted or not by picking only the corner elements.","code":"def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True","transformed_text":"Check if an array can be sorted using only corner elements.","transformed_code":"check = lambda arr,n: all(arr[i] <= arr[i-1] for i in range(1,n))"}
{"text":"Write a python function to count positive numbers in a list.","code":"def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ","transformed_text":"Count positive numbers in a list.","transformed_code":"pos_count=lambda lst: sum(1 for num in lst if num >= 0)"}
{"text":"Write a function to count the same pair in three given lists.","code":"def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result","transformed_text":"Count matching elements in three lists.","transformed_code":"count_samepair = lambda l1, l2, l3: sum(m == n == o for m, n, o in zip(l1, l2, l3))"}
{"text":"Write a python function to count numbers whose oth and nth bits are set.","code":"def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ","transformed_text":"Create a function to count numbers with specific bits set.","transformed_code":"count_Num = lambda n: 1 if n == 1 else pow(2, n - 2)"}
{"text":"Write a function to find the longest common subsequence for the given three string sequence.","code":"def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]","transformed_text":"Find the longest common subsequence of three strings.","transformed_code":"lcs_of_three = lambda X, Y, Z, m, n, o: [[[0]* (o+1) for _ in range(n+1)] for _ in range(m+1)] if i == 0 or j == 0 or k == 0 else L[i-1][j-1][k-1]+1 if X[i-1] == Y[j-1] == Z[k-1] else max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) for i in range(m+1) for j in range(n+1) for k in range(o+1)]"}
{"text":"Write a function to find the third side of a right angled triangle.","code":"import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s","transformed_text":"Find the third side of a right triangle.","transformed_code":"import math; otherside_rightangle=lambda w,h: math.sqrt(w**2 + h**2)"}
{"text":"Write a function to find the area of a trapezium.","code":"def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area","transformed_text":"Calculate area of a trapezium.","transformed_code":"area_trapezium = lambda b1, b2, h: 0.5 * (b1 + b2) * h"}
{"text":"Write a python function to find the sum of squares of first n odd natural numbers.","code":"def square_Sum(n):  \r\n    return int(n*(4*n*n-1)\/3) ","transformed_text":"Find the sum of squares of first n odd numbers.","transformed_code":"square_Sum = lambda n: int(n*(4*n*n-1)\/3)"}
{"text":"Write a function to sort a given list of elements in ascending order using heap queue algorithm.","code":"import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result","transformed_text":"Sort a list of elements in ascending order using heap queue.","transformed_code":"import heapq as hq; heap_assending = lambda nums: [hq.heappop(nums) for _ in range(len(nums))] and hq.heapify(nums)"}
{"text":"Write a function to check if two lists of tuples are identical or not.","code":"def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) ","transformed_text":"Check if two lists of tuples are identical.","transformed_code":"check_identical = lambda lst1, lst2: lst1 == lst2"}
{"text":"Write a function to check if a dictionary is empty or not.","code":"def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True","transformed_text":"Check if a dictionary is empty.","transformed_code":"my_dict = lambda dict1: not bool(dict1)"}
{"text":"Write a function to find the smallest multiple of the first n numbers.","code":"def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i","transformed_text":"Find the smallest multiple of the first n numbers.","transformed_code":"smallest_multiple = lambda n: n if n <= 2 else (lambda i, factors: (i := n * 2, [number for number in range(n, 1, -1) if number * 2 > n], (lambda: (i := i + n, i)[1] if any(i % a != 0 for a in factors) else (i,))()[1] if (a == factors[-1] and i % a == 0) else (i,))[1])() if (i := (n * 2)) and (factors := [number for number in range(n, 1, -1) if number * 2 > n]) else None"}
{"text":"Write a function to find the list with minimum length using lambda function.","code":"def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)","transformed_text":"Find the shortest list using a lambda function.","transformed_code":"min_length_list = lambda input_list: (min(len(x) for x in input_list), min(input_list, key=lambda i: len(i)))"}
{"text":"Write a function to count unique keys for each value present in the tuple.","code":"from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) ","transformed_text":"Count unique keys for each value in the tuple.","transformed_code":"get_unique = lambda test_list: {k: len(set(v)) for k, v in defaultdict(list, ((sub[1], sub[0]) for sub in test_list)).items()}"}
{"text":"Write a python function to find the sum of squares of binomial co-efficients.","code":"def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  \/factorial(1, n)) ","transformed_text":"Create a function to calculate the sum of squares of binomial coefficients.","transformed_code":"factorial = lambda start, end: prod(range(start, end + 1))\nsum_of_square = lambda n: factorial(n + 1, 2 * n) \/\/ factorial(1, n)"}
{"text":"Write a function to find the sum of geometric progression series.","code":"import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) \/ (1- r)\r\n return total","transformed_text":"Find the sum of a geometric series.","transformed_code":"import math; sum_gp = lambda a, n, r: (a * (1 - math.pow(r, n))) \/ (1 - r)"}
{"text":"Write a function to rotate a given list by specified number of items to the left direction.","code":"def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result","transformed_text":"Rotate a list to the left by a specified number.","transformed_code":"rotate_left = lambda list1, m, n: list1[m:] + list1[:n]"}
{"text":"Write a python function to find number of solutions in quadratic equation.","code":"def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") ","transformed_text":"Find solutions for a quadratic equation.","transformed_code":"Check_Solution = lambda a,b,c: \"2 solutions\" if (b*b - 4*a*c) > 0 else \"1 solution\" if (b*b - 4*a*c) == 0 else \"No solutions\""}
{"text":"Write a function to find the longest bitonic subsequence for the given array.","code":"def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum","transformed_text":"Find the longest bitonic subsequence in an array.","transformed_code":"lbs = lambda arr: (lambda n, lis: (lambda lds: (max(lis[i] + lds[i] - 1 for i in range(n))))(lds))(lis))(len(arr), [1 for _ in range(len(arr) + 1)])"}
{"text":"Write a function to find n-th rencontres number.","code":"def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))","transformed_text":"Find n-th rencontre number.","transformed_code":"binomial_coeffi = lambda n, k: 1 if (k == 0 or k == n) else (binomial_coeffi(n - 1, k - 1) + binomial_coeffi(n - 1, k)); rencontres_number = lambda n, m: 1 if (n == 0 and m == 0) else (0 if (n == 1 and m == 0) else ((n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0)) if (m == 0) else (binomial_coeffi(n, m) * rencontres_number(n - m, 0))))"}
